<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>benchmark on Yowko&#39;s Notes</title><link>https://blog.yowko.com/tags/benchmark/</link><description>Recent content in benchmark on Yowko&#39;s Notes</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 05 Dec 2024 00:30:00 +0800</lastBuildDate><atom:link href="https://blog.yowko.com/tags/benchmark/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 Incremental Generators 來為 method 加上時間測量</title><link>https://blog.yowko.com/incremental-generators-stopwatch/</link><pubDate>Thu, 05 Dec 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/incremental-generators-stopwatch/</guid><description>使用 Incremental Generators 來為 method 加上時間測量 之前筆記 Stopwatch 的正確用法 紀錄了使用在 .NET 7 所發表 Stopwatch 的新 api 來測量程式執行時間以避免 memory allocate，接著就想起 Metho</description></item><item><title>使用 Source Generators 來為 method 加上時間測量</title><link>https://blog.yowko.com/source-generators-stopwatch/</link><pubDate>Tue, 03 Dec 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/source-generators-stopwatch/</guid><description>使用 Source Generators 來為 method 加上時間測量 之前筆記 Stopwatch 的正確用法 紀錄了使用在 .NET 7 所發表 Stopwatch 的新 api 來測量程式執行時間以避免 memory allocate，接著就想起 Metho</description></item><item><title>使用 MethodTimer.Fody 來為 method 加上時間測量</title><link>https://blog.yowko.com/measure-method-performance-with-methodtimer-fody/</link><pubDate>Wed, 27 Nov 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/measure-method-performance-with-methodtimer-fody/</guid><description>使用 MethodTimer.Fody 來為 method 加上時間測量 之前筆記 Stopwatch 的正確用法 紀錄到如何使用 Stopwatch 的新 API，讓我想起過去常使用的 GitHub:MethodTimer.Fody 也是透過 Stopwatch.StartNew() 方式來計算時間，回頭確認是否有更新時</description></item><item><title>Stopwatch 的正確用法</title><link>https://blog.yowko.com/stopwatch-best-practice/</link><pubDate>Fri, 22 Nov 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/stopwatch-best-practice/</guid><description>Stopwatch 的正確用法 前幾天從 Cash 大的粉專上看到 Cash Wu Geek 分享了 youtuber-Nick Chapsas 對於 Stopwatch 的正確用法：Youtube:How to Measure Time Correctly in .NET，覺得值得仔細了解一下，快速筆</description></item><item><title>C# Crawler 套件 Benchmark</title><link>https://blog.yowko.com/csharp-crawler-benchmark/</link><pubDate>Fri, 27 Sep 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-crawler-benchmark/</guid><description>C# Crawler 套件 Benchmark 最近團隊有個需求，需要從網頁上抓取一些資料，雖然普遍對於網路爬蟲的第一印象都是 python，但因為團隊中多數成員都是 C# develo</description></item><item><title>關於 gRPC 的 Load Test</title><link>https://blog.yowko.com/grpc-load-test/</link><pubDate>Fri, 29 Apr 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-load-test/</guid><description>關於 gRPC 的 Load Test 搜尋資訊的過程中，偶爾看到 Load testing for gRPC - the case，分析用來針對 gRPC service 做 load test 的三種方式： Gatling with gRPC plugin. 使用 scala 來建立測試腳本 支援四種 gRPC serv</description></item><item><title>使用 Gatling 來對 gRPC 做負載測試</title><link>https://blog.yowko.com/grpc-load-test-gatling/</link><pubDate>Thu, 28 Apr 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-load-test-gatling/</guid><description>使用 Gatling 來對 gRPC 做負載測試 關於 Gatling 先決條件：安裝 64bits OpenJDK LTS：8,11,17 &amp;gt; 其他 JVM 像是 JDK 12, client JVMs, 32bits systems or OpenJ9 都不支援 Gatling 3.7 開始支援 Java, Kotlin and Scala 來撰寫測試腳本 &amp;gt;</description></item><item><title>安裝 Gatling</title><link>https://blog.yowko.com/gatling-install/</link><pubDate>Tue, 12 Apr 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/gatling-install/</guid><description>安裝 Gatling 原本想要使用 Gatling 來進行 gRPC 的 load test，但光安裝 Gatling 就不是很理解，所以先了解並紀錄一下 Gatling 的基本安裝，我認為應該是我平常熟悉的開發語言跟工具不</description></item><item><title>使用 k6 來對 gRPC 做負載測試</title><link>https://blog.yowko.com/grpc-load-test-k6/</link><pubDate>Fri, 08 Apr 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-load-test-k6/</guid><description>使用 k6 來對 gRPC 做負載測試 第一次聽到 k6 是 twMVC 的活動宣傳 讓我們用 k6 來進行壓測吧，雖然後來時間因素沒有到場聽到實際應用的分享，但為了不要與技術潮流脫節</description></item><item><title>使用 ghz 來對 gRPC 做負載測試</title><link>https://blog.yowko.com/grpc-load-test-ghz/</link><pubDate>Mon, 04 Apr 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-load-test-ghz/</guid><description>使用 ghz 來對 gRPC 做負載測試 最近興起想要比較幾個 gRPC load test 工具的使用心得，這才發現過去在建立 gRPC service 時因為專案時間壓力並沒有特別紀錄 ghz 的用法，後來工作也慢</description></item><item><title>使用 PerfTest 進行 RabbitMQ 效能測試</title><link>https://blog.yowko.com/rabbitmq-perftest/</link><pubDate>Tue, 03 Aug 2021 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/rabbitmq-perftest/</guid><description>使用 PerfTest 進行 RabbitMQ 效能測試 之前筆記 在 CentOS7 上建立 RabbitMQ Cluster 提到打算透過針對 RabbitMQ 的效能測試來確認使用的硬體規格，今天就來紀錄該怎麼 使用 PerfTest 進行 RabbitMQ 效能測試 為了專注於</description></item><item><title>使用 sysbench 來取得 ProxySQL 效能差異</title><link>https://blog.yowko.com/proxysql-benchmark-sysbench/</link><pubDate>Fri, 16 Jul 2021 12:30:00 +0800</pubDate><guid>https://blog.yowko.com/proxysql-benchmark-sysbench/</guid><description>使用 sysbench 來取得 ProxySQL 效能差異 在之前筆記 使用 ProxySQL 來簡化 MySQL 的讀寫分離 提到需要進行壓力測試取得透過 ProxySQL 與直接存取 MySQL 的效能數據差來評估是否採用 ProxySQL 今天就來紀錄使</description></item><item><title>C# (.NET Core 2) 啟用 gRPC 壓縮</title><link>https://blog.yowko.com/dotnet-core-2-grpc-compression/</link><pubDate>Sat, 16 Nov 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-core-2-grpc-compression/</guid><description>C# (.NET Core 2) 啟用 gRPC 壓縮 目前專案在大資料量傳遞時會透過 gRPC stream，不過因為是非對稱式資料內容，採用 chunk byte 來傳輸，以避免單次 gRPC 的 message size 限制問題，但以</description></item><item><title>[Benchmark] 使用 C# 對 InfluxDB insert 操作的效能數據</title><link>https://blog.yowko.com/csharp-influxdb-benchmark/</link><pubDate>Sun, 22 Sep 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-influxdb-benchmark/</guid><description>[Benchmark] 使用 C# 對 InfluxDB insert 操作的效能數據 之前筆記 使用 C# 存取 InfluxDB 紀錄了 C# 在 InfluxDB 的基本 CRUD，也提到新專案可能會使用 InfluxDB 儲存資料，在了解 C# 的基本用法後接著就來確</description></item><item><title>HttpClient 無法反應 DNS 異動的解決方式</title><link>https://blog.yowko.com/httpclient-not-respect-dns-change/</link><pubDate>Sat, 05 Jan 2019 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient-not-respect-dns-change/</guid><description>HttpClient 無法反應 DNS 異動的解決方式 之前筆記 探討 HttpClient 可能的問題 提到使用 HttpCLient 時避免 socket 耗盡的方式就是只建立一個 HttpClient instance (透過 static or singleton)，但這樣的方式</description></item><item><title>[Benchmark] DB 物件對映至 C# class 的做法</title><link>https://blog.yowko.com/object-relation-mapping/</link><pubDate>Tue, 01 Jan 2019 00:42:34 +0800</pubDate><guid>https://blog.yowko.com/object-relation-mapping/</guid><description>Benchmark : DB 物件對映至 C# class 的做法 跟同事討論到 ORM 的優劣，當然各有擁護的對象，但相同的目標卻很一致：速度快，而在 速度快 這個基本前提下，我個人覺得還有討</description></item></channel></rss>