<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gRPC on Yowko&#39;s Notes</title>
    <link>https://blog.yowko.com/tags/grpc/</link>
    <description>Recent content in gRPC on Yowko&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 19 Oct 2020 21:30:00 +0800</lastBuildDate>
    
	<atom:link href="https://blog.yowko.com/tags/grpc/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ASP.NET Core 的 gRPC Polly Retry</title>
      <link>https://blog.yowko.com/aspdotnet-core-grpc-polly-retry/</link>
      <pubDate>Mon, 19 Oct 2020 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/aspdotnet-core-grpc-polly-retry/</guid>
      <description>ASP.NET Core 的 gRPC Polly Retry 之前曾經對 gRPC 的 keepalive 調整一輪 (server、kubernetes、container)，原本看似已解決，但最近斷線的錯誤又出現，於是</description>
    </item>
    
    <item>
      <title>使用 Kubernetes 搭配 ASP.NET Core BackgroundService 確保 gRPC 服務回應合乎預期</title>
      <link>https://blog.yowko.com/kubernetes-aspdotnet-core-backgroundservice-grpc/</link>
      <pubDate>Tue, 22 Sep 2020 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/kubernetes-aspdotnet-core-backgroundservice-grpc/</guid>
      <description>使用 Kubernetes 搭配 ASP.NET Core BackgroundService 確保 gRPC 服務回應合乎預期 之前在筆記 使用 Kubernetes Liveness 來檢查 ASP.NET Core gRPC 回應合乎預期 紀錄到使用 Kubernetes Liveness 在 pod 中的 service 回應如果不如預期時就直接重啟 pod 來嘗試</description>
    </item>
    
    <item>
      <title>使用 Kubernetes Liveness 來檢查 ASP.NET Core gRPC 回應合乎預期</title>
      <link>https://blog.yowko.com/kubernetes-liveness-aspdotnet-core-grpc/</link>
      <pubDate>Mon, 21 Sep 2020 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/kubernetes-liveness-aspdotnet-core-grpc/</guid>
      <description>使用 Kubernetes Liveness 來檢查 ASP.NET Core gRPC 回應合乎預期 今天要紀錄透過 Kubernetes 搭配 使用 ASP.NET Core middleware 進行 gRPC healthy check (當然 使用 ASP.NET Core BackgroundService 進行 gRPC healthy check 也是可行的) 與 讓 container 中的 ASP.NET Core 也有憑證 來確保 service</description>
    </item>
    
    <item>
      <title>讓 container 中的 ASP.NET Core 也有憑證</title>
      <link>https://blog.yowko.com/aspdotnet-core-container-certificate/</link>
      <pubDate>Sun, 20 Sep 2020 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/aspdotnet-core-container-certificate/</guid>
      <description>讓 container 中的 ASP.NET Core 也有憑證 之前筆記 使用 ASP.NET Core middleware 進行 gRPC healthy check、使用 ASP.NET Core BackgroundService 進行 gRPC healthy check 以及 ASP.NET Core gRPC 無法在 macOS 上啟動？！ 都有提到過 gRPC 的原生限制：採用 HTTP2 協定</description>
    </item>
    
    <item>
      <title>使用 dotnet-grpc-cli 取得 gRPC Service 內容</title>
      <link>https://blog.yowko.com/dotnet-grpc-cli/</link>
      <pubDate>Sun, 13 Sep 2020 12:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dotnet-grpc-cli/</guid>
      <description>使用 dotnet-grpc-cli 取得 gRPC Service 內容 之前筆記 使用 grpc-cli 呼叫 gRPC Service 紀錄到 gprc 官方 command line tool 的使用方式，後來偶爾間發現竟然有 dotnet 版：dotnet-grpc-cli，還是 C# 撰寫的</description>
    </item>
    
    <item>
      <title>使用 grpc-cli 呼叫 gRPC Service</title>
      <link>https://blog.yowko.com/grpc-cli/</link>
      <pubDate>Sat, 12 Sep 2020 12:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/grpc-cli/</guid>
      <description>使用 dotnet-grpc-cli 呼叫 gRPC Service 之前筆記 使用grpcurl 呼叫gRPC Service 紀錄到 grpcurl (curl for grpc) 的使用方式，最近在查其他資料時這才發現原來 gRPC 官方也有提供：grpc-cl</description>
    </item>
    
    <item>
      <title>在 ASP.NET Core 上啟用 gRPC Reflection</title>
      <link>https://blog.yowko.com/aspdotnet-core-grpc-reflection/</link>
      <pubDate>Thu, 10 Sep 2020 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/aspdotnet-core-grpc-reflection/</guid>
      <description>在 ASP.NET Core 上啟用 gRPC Reflection 系統功能愈來愈多，自然而然地 proto 檔也就熟變得愈來愈龐大，如果每次想要手動測試 gRPC 功能時都要手 key proto 實在沒效率 (測試工具可以參考之前</description>
    </item>
    
    <item>
      <title>使用 ASP.NET Core BackgroundService 進行 gRPC healthy check</title>
      <link>https://blog.yowko.com/aspdotnet-core-backgroundservice-grpc-healthy-check/</link>
      <pubDate>Sun, 06 Sep 2020 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/aspdotnet-core-backgroundservice-grpc-healthy-check/</guid>
      <description>使用 ASP.NET Core BackgroundService 進行 gRPC healthy check 之前筆記 使用 ASP.NET Core middleware 進行 gRPC healthy check 紀錄到如何使用 ASP.NET Core 內建的 Health Check middleware 來進行 gRPC service 的檢查，當時有看到 Steve Gordon 的 HEALTH CHECKS WITH GRPC AND ASP.NET CORE 3.0 使用 serive 本身的</description>
    </item>
    
    <item>
      <title>使用 ASP.NET Core middleware 進行 gRPC healthy check</title>
      <link>https://blog.yowko.com/aspdotnet-core-middleware-grpc-healthy-check/</link>
      <pubDate>Mon, 31 Aug 2020 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/aspdotnet-core-middleware-grpc-healthy-check/</guid>
      <description>使用 ASP.NET Core middleware 進行 gRPC healthy check 這個需求來自於某次的 issue：有個 service 的回應時好時壞，沒有規律，這讓我想起當年在壽險公司資訊部門使用 asp 提供服務的故事，當</description>
    </item>
    
    <item>
      <title>使用 grpcurl 使用 Timestamp 參數呼叫 gRPC Service</title>
      <link>https://blog.yowko.com/grpcurl-timestamp/</link>
      <pubDate>Mon, 09 Mar 2020 23:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/grpcurl-timestamp/</guid>
      <description>使用 grpcurl 使用 Timestamp 參數呼叫 gRPC Service 之前筆記 使用 grpcurl 呼叫 gRPC Service 紀錄到使用 grpcurl 就可以不用 gui 工具以及自行撰寫程式來呼叫 gRPC Service，正以為可以順利解決問題時發</description>
    </item>
    
    <item>
      <title>使用 grpcurl 呼叫 gRPC Service</title>
      <link>https://blog.yowko.com/grpcurl/</link>
      <pubDate>Sat, 07 Mar 2020 12:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/grpcurl/</guid>
      <description>使用 grpcurl 呼叫 gRPC Service 一般情況下測試 gRPC 服務，我大多是透過簡易的 console 直接呼叫 (一來可以順便檢查程式，二來 stream 相關功能比較齊全)，如果想要測試的功能只是 simple call</description>
    </item>
    
    <item>
      <title>在 Windows 上的 ASP.NET Core 中呼叫 gRPC</title>
      <link>https://blog.yowko.com/windows-aspnetcore-grpc/</link>
      <pubDate>Mon, 24 Feb 2020 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/windows-aspnetcore-grpc/</guid>
      <description>在 Windows 上的 ASP.NET Core 中呼叫 gRPC 現在的工作主力都在 mac 上，但最近在測試功能時覺得與過去認知不同，特別用 Windows 測試一下，證實在 Windows 平台上功能與印象相同，為了日後比</description>
    </item>
    
    <item>
      <title>在 macOS 上的 ASP.NET Core 中呼叫 gRPC</title>
      <link>https://blog.yowko.com/macos-aspnetcore-grpc/</link>
      <pubDate>Sun, 23 Feb 2020 22:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/macos-aspnetcore-grpc/</guid>
      <description>在 macOS 上的 ASP.NET Core 中呼叫 gRPC 最近為了進行某個專案需求的 poc，需要建立基本的 gRPC Server 與 Cient，這才想到之前都是在 .NET Core 2 上使用 gRPC，還沒紀錄過 .NET Core</description>
    </item>
    
    <item>
      <title>C# (.NET Core 2) 啟用 gRPC 壓縮</title>
      <link>https://blog.yowko.com/dotnet-core-2-grpc-compression/</link>
      <pubDate>Sat, 16 Nov 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dotnet-core-2-grpc-compression/</guid>
      <description>C# (.NET Core 2) 啟用 gRPC 壓縮 目前專案在大資料量傳遞時會透過 gRPC stream，不過因為是非對稱式資料內容，採用 chunk byte 來傳輸，以避免單次 gRPC 的 message size 限制問題，但以</description>
    </item>
    
    <item>
      <title>C# (.NET Core 2) Log 與 Trace gRPC</title>
      <link>https://blog.yowko.com/dotnet-core-2-log-grpc/</link>
      <pubDate>Tue, 12 Nov 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dotnet-core-2-log-grpc/</guid>
      <description>C# (.NET Core 2) Log 與 Trace gRPC gRPC 在 .NET Core 3 被官方宣告重點發展項目之一，而身為追求系統更快更好又愛嚐鮮的工程師團隊的一員，早在一年前的 .NET Core 2 專案中就用上了 gR</description>
    </item>
    
    <item>
      <title>gRPC stream 如何傳送單一大物件 (Client 版)</title>
      <link>https://blog.yowko.com/grpc-stream-chunk-client/</link>
      <pubDate>Thu, 01 Aug 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/grpc-stream-chunk-client/</guid>
      <description>gRPC stream 如何傳送單一大物件 (Client 版) 繼之前筆記 gRPC stream 如何傳送單一大物件 提到該如何使用 gRPC stream 來傳送不是整齊 collection 物件後，公司專案已逐步將可能傳送超出預設 4mb 限制</description>
    </item>
    
    <item>
      <title>gRPC stream 如何傳送單一大物件</title>
      <link>https://blog.yowko.com/grpc-stream-big-object/</link>
      <pubDate>Sun, 07 Jul 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/grpc-stream-big-object/</guid>
      <description>gRPC stream 如何傳送單一大物件 之前筆記 C# 搭配 gRPC 中使用 stream RPC 提到為了對於較大資料量以及即時性資料內容，可以透過 gRPC 的 stream RPC 來處理，不過官方範例是用在傳送 repeated 內</description>
    </item>
    
    <item>
      <title>gRPC 出現 `8 RESOURCE_EXHAUSTED` 錯誤</title>
      <link>https://blog.yowko.com/grpc-8-resource-exhausted/</link>
      <pubDate>Sun, 23 Jun 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/grpc-8-resource-exhausted/</guid>
      <description>gRPC 出現 8 RESOURCE_EXHAUSTED 錯誤 隨著系統一步步成形，資料量也愈來愈大，在原本只是先求功能正常而未進行資料分頁的功能逐漸露出原型，今天就來筆記 gRPC 在傳送龐大資料可</description>
    </item>
    
    <item>
      <title>嘗試為gRPC 中的 stream RPC 加上 Unit Test</title>
      <link>https://blog.yowko.com/csharp-grpc-stream-unit-test/</link>
      <pubDate>Wed, 19 Jun 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/csharp-grpc-stream-unit-test/</guid>
      <description>嘗試為gRPC 中的 stream RPC 加上 Unit Test 之前筆記 C# 搭配 gRPC 中使用 stream RPC 紀錄到在 gRPC 中使用 stream RPC 的操作語法，但實際應用在專案上時卻卡關，主因是單元測試出現錯誤，</description>
    </item>
    
    <item>
      <title>C# 搭配 gRPC 中使用 stream RPC</title>
      <link>https://blog.yowko.com/csharp-grpc-stream/</link>
      <pubDate>Sun, 16 Jun 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/csharp-grpc-stream/</guid>
      <description>C# 搭配 gRPC 中使用 stream RPC gRPC 允許使用四種則型的 service 方法： 簡單 RPC (simple RPC) 主機端串流 RPC (server-side streaming RPC) 用戶端串流 RPC (client-side streaming RPC) 雙向串流 RPC (bidirectional streaming RPC) 過去的筆記都是使用 簡單 RPC (simple RPC</description>
    </item>
    
    <item>
      <title>使用 GenericHost 來 Host gRPC Server</title>
      <link>https://blog.yowko.com/generichost-grpc-server/</link>
      <pubDate>Sun, 26 May 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/generichost-grpc-server/</guid>
      <description>使用 GenericHost 來 Host gRPC Server 之前筆記 在 .NET Core console 上使用 Dependency Injection - DI 提到 ASP.NET Core 有兩種 host 方式： WebHost Generic Host 而在之前另一則筆記 使用 ASP.NET Core 2.2 來 Host gRPC Server 使用到 WebHost 來 host gRPC Server，經同</description>
    </item>
    
    <item>
      <title>使用 ASP.NET Core 2.2 來 Host gRPC Server</title>
      <link>https://blog.yowko.com/aspdotnet-core-2-host-grpc-server/</link>
      <pubDate>Tue, 21 May 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/aspdotnet-core-2-host-grpc-server/</guid>
      <description>使用 ASP.NET Core 2.2 來 Host gRPC Server 之前筆記 Protobuf 該如何處理不定型別, .NET Core 上使用 Jaeger 追蹤 gRPC 呼叫, Protobuf 時間屬性該如何表示？ 在 host gRPC Server 時都是透過 console project 來進行，但 console 專案需要使用</description>
    </item>
    
    <item>
      <title>Protobuf 該如何處理不定型別</title>
      <link>https://blog.yowko.com/protobuf-object-any/</link>
      <pubDate>Sat, 16 Mar 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/protobuf-object-any/</guid>
      <description>Protobuf 該如何處理不定型別 之前筆記 Protobuf 時間屬性該如何表示？ 紀錄了 C# DateTime 屬性在 Protobuf 的 message 表示方式，當時在找資料時發現 any.proto 特別查了資料看可以應用在什麼地方，就個</description>
    </item>
    
    <item>
      <title>.NET Core 上使用 Jaeger 追蹤 gRPC 呼叫</title>
      <link>https://blog.yowko.com/dotnet-core-jaeger-grpc/</link>
      <pubDate>Wed, 13 Mar 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dotnet-core-jaeger-grpc/</guid>
      <description>.NET Core 上使用 Jaeger 追蹤 gRPC 呼叫 隨著系統使用人數愈來愈多，架構也跟著愈來愈複雜，各種技術為了解決既有問題或是加快反應速度不斷推陳出新，服務的架構也從單</description>
    </item>
    
    <item>
      <title>Protobuf 時間屬性該如何表示？</title>
      <link>https://blog.yowko.com/protobuf-datetime-timestamp/</link>
      <pubDate>Tue, 12 Mar 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/protobuf-datetime-timestamp/</guid>
      <description>Protobuf 時間屬性該如何表示？ 最近的專案在跨 application 的溝通上捨去以往熟悉的 RESTful API 而採用 gRPC 做為溝通的 protocal，過去沒有相關使用經驗的我當然是踩雷不斷，</description>
    </item>
    
  </channel>
</rss>