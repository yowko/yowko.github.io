<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dotnet core on Yowko&#39;s Notes</title><link>https://blog.yowko.com/tags/dotnet-core/</link><description>Recent content in dotnet core on Yowko&#39;s Notes</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 13 Apr 2020 22:30:00 +0800</lastBuildDate><atom:link href="https://blog.yowko.com/tags/dotnet-core/index.xml" rel="self" type="application/rss+xml"/><item><title>在 Debian container 中安裝 .NET Core SDK</title><link>https://blog.yowko.com/debian-container-install-dotnet-core-sdk/</link><pubDate>Mon, 13 Apr 2020 22:30:00 +0800</pubDate><guid>https://blog.yowko.com/debian-container-install-dotnet-core-sdk/</guid><description>在 Debian container 中安裝 .NET Core SDK 之前筆記 在 Debian container 中無法成功註冊微軟金鑰 提到想要在 container 中利用 dotnet cli 做些測試，但經過 multi-stage builds 來建立 image 中只有 .NET Core runtime 沒有需要的 dotnet cli，所以</description></item><item><title>讓 Kafka 達成 Broadcast 效果</title><link>https://blog.yowko.com/kafka-broadcast-assign/</link><pubDate>Sun, 05 Apr 2020 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/kafka-broadcast-assign/</guid><description>讓 Kafka 達成 Broadcast 效果 Kafka 在處理訊息上主要是透過 Consumer GroupId + Topic + Partition 做為 Unique 的派送訊息基準，預設(未指定 Partition)下會由 Kafka 自行決定 Partition 在上述的原則下，如</description></item><item><title>在 Windows 上的 ASP.NET Core 中呼叫 gRPC</title><link>https://blog.yowko.com/windows-aspnetcore-grpc/</link><pubDate>Mon, 24 Feb 2020 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/windows-aspnetcore-grpc/</guid><description>在 Windows 上的 ASP.NET Core 中呼叫 gRPC 現在的工作主力都在 mac 上，但最近在測試功能時覺得與過去認知不同，特別用 Windows 測試一下，證實在 Windows 平台上功能與印象相同，為了日後比</description></item><item><title>在 macOS 上的 ASP.NET Core 中呼叫 gRPC</title><link>https://blog.yowko.com/macos-aspnetcore-grpc/</link><pubDate>Sun, 23 Feb 2020 22:30:00 +0800</pubDate><guid>https://blog.yowko.com/macos-aspnetcore-grpc/</guid><description>在 macOS 上的 ASP.NET Core 中呼叫 gRPC 最近為了進行某個專案需求的 poc，需要建立基本的 gRPC Server 與 Cient，這才想到之前都是在 .NET Core 2 上使用 gRPC，還沒紀錄過 .NET Core</description></item><item><title>在 macOS 上建立開發用 .NET Core 憑證</title><link>https://blog.yowko.com/macos-dotnet-cert/</link><pubDate>Sun, 23 Feb 2020 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/macos-dotnet-cert/</guid><description>在 macOS 上建立開發用 .NET Core 憑證 現在的 web 環境幾乎都會要求 https，這樣的改變當然也套用在開發上，像是 HTTP/2 雖然在協定本身允許非加密的 HTTP 協定，但絕大部份</description></item><item><title>[C#] 將 .NET Core 中的 Configuration 輸出為 JSON</title><link>https://blog.yowko.com/configuration-to-json/</link><pubDate>Sat, 08 Feb 2020 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/configuration-to-json/</guid><description>[C#] 將 .NET Core 中的 Configuration 輸出為 JSON 之前筆記 [C#] 將 Dictionary 轉為 JSON 紀錄到 將 Dictionary 轉為 JSON 的方式，對 .NET Core 有些認識的朋友馬上就想到是為了處理 .NET Core Configuration，主</description></item><item><title>JetBrains Rider 在升級 .NET Core 3.1 後無法編譯紀錄 (更新)</title><link>https://blog.yowko.com/rider-dotnetcore31-cannot-build/</link><pubDate>Sat, 14 Dec 2019 15:30:00 +0800</pubDate><guid>https://blog.yowko.com/rider-dotnetcore31-cannot-build/</guid><description>JetBrains Rider 在升級 .NET Core 3.1 後無法編譯紀錄 (更新) 前幾天的筆記 JetBrains Rider 在升級 .NET Core 3.1 後無法編譯紀錄 提到在升級 .NET Core SDK 3.1.100 我就無法成功透過 JetBrains Rider 來 build project (無論是既有專案</description></item><item><title>JetBrains Rider 在升級 .NET Core 3.1 後無法編譯紀錄</title><link>https://blog.yowko.com/rider-dotnetcore3-cannot-build/</link><pubDate>Sat, 07 Dec 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/rider-dotnetcore3-cannot-build/</guid><description>JetBrains Rider 在升級 .NET Core 3.1 後無法編譯紀錄 已有更新版本，請參考 JetBrains Rider 在升級 .NET Core 3.1 後無法編譯紀錄 (更新) 前幾天 .NET Core 3.1 正式 release 了，身為新技術的愛好者，當然是立馬</description></item><item><title>.Net Core 操作 MongoDB 出現 MongoWaitQueueFullException</title><link>https://blog.yowko.com/csharp-mongodb-waitqueuefullexception/</link><pubDate>Sun, 28 Jul 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-mongodb-waitqueuefullexception/</guid><description>.Net Core 操作 MongoDB 出現 MongoWaitQueueFullException 之前筆記 在 Docker Compose file 3 下限制 CPU 與 Memory 中提到同事反應說某個專案在執行時會造成 MongoDB CPU high，最後引發 docker service crash，一直沒有找到 root ca</description></item><item><title>從 Mac 移除 .NET Core Runtime 與 SDK</title><link>https://blog.yowko.com/remove-dotnet-from-mac/</link><pubDate>Mon, 22 Jul 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/remove-dotnet-from-mac/</guid><description>從 Mac 移除 .NET Core Runtime 與 SDK 可以不時更新 .NET Core SDK 是幸福，也是痛苦; 幸福的是可以使用新的語言特性或是新功能，而痛苦的是不僅又有新的 feature 要學習適應還要想辦法移</description></item><item><title>Kafka Producer 不同壓縮方式對發送速度的影響</title><link>https://blog.yowko.com/dotnet-kafka-producer-compresstype/</link><pubDate>Sun, 02 Jun 2019 19:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-kafka-producer-compresstype/</guid><description>Kafka Producer 不同壓縮方式對發送速度的影響 這兩天在測試 Kafka consumer 各項設定對於處理速度的影響 (詳細內容可以參考 Kafka Consumer 處理速度緩慢，設定調整紀實)，經過一輪比較後</description></item><item><title>Kafka Consumer 處理速度緩慢，設定調整紀實</title><link>https://blog.yowko.com/dotnet-kafka-consumer-setting/</link><pubDate>Sat, 01 Jun 2019 19:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-kafka-consumer-setting/</guid><description>Kafka Consumer 處理速度緩慢，設定調整紀實 最近專案用了 Kafka 做為中介的 message queue，近期已經陸陸續續開始準備上線的前置作業，其中一項就是壓測數據，不過 Kafka 的 consumer</description></item><item><title>使用 GenericHost 來 Host gRPC Server</title><link>https://blog.yowko.com/generichost-grpc-server/</link><pubDate>Sun, 26 May 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/generichost-grpc-server/</guid><description>使用 GenericHost 來 Host gRPC Server 之前筆記 在 .NET Core console 上使用 Dependency Injection - DI 提到 ASP.NET Core 有兩種 host 方式： WebHost Generic Host 而在之前另一則筆記 使用 ASP.NET Core 2.2 來 Host gRPC Server 使用到 WebHost 來 host gRPC Server，經同</description></item><item><title>將 .NET Core Console 專案轉換為 ASP.NET Core</title><link>https://blog.yowko.com/dotnet-core-console-to-aspdotnet-core/</link><pubDate>Tue, 21 May 2019 19:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-core-console-to-aspdotnet-core/</guid><description>將 .NET Core Console 專案轉換為 ASP.NET Core console 因為組成簡單、建立快速，常被用來確認語法或是 POC 特定功能需求，不過一旦 POC 沒問題就會遇到程式碼彙總的狀況，如果程式碼數量</description></item><item><title>為 .NET Core Middleware 加上 Unit Test</title><link>https://blog.yowko.com/dotnet-core-middieware-unit-test/</link><pubDate>Sun, 28 Apr 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-core-middieware-unit-test/</guid><description>為 .NET Core Middleware 加上 Unit Test .NET Core 的 Middleware 在 .NET Core 的 pipeline 中扮演了非常重要的角色，因此在實際應用上更需要確保功能與結果符合預期。第一次寫 middleware 的 unit test 順手紀錄過程，看看在</description></item><item><title>使用 Jaeger 追蹤 ASP.NET Core 中的 class 呼叫</title><link>https://blog.yowko.com/jaeger-trace-aspdotnet-core-class-call/</link><pubDate>Sun, 14 Apr 2019 15:30:00 +0800</pubDate><guid>https://blog.yowko.com/jaeger-trace-aspdotnet-core-class-call/</guid><description>使用 Jaeger 追蹤 ASP.NET Core 中的 class 呼叫 之前筆記 .NET Core 上使用 Jaeger 追蹤 gRPC 呼叫 與 使用 Jaeger 追蹤 ASP.NET Core 呼叫 分別紀錄到使用 Jaeger 來紀錄 gRPC call 與 ASP.NET Core Web API 的呼叫歷程內容，接著紀錄另個常</description></item><item><title>使用 Jaeger 追蹤 ASP.NET Core 呼叫</title><link>https://blog.yowko.com/jaeger-trace-aspdotnet-core/</link><pubDate>Sat, 13 Apr 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/jaeger-trace-aspdotnet-core/</guid><description>使用 Jaeger 追蹤 ASP.NET Core 呼叫 之前筆記 .NET Core 上使用 Jaeger 追蹤 gRPC 呼叫 紀錄到如何使用 Jaeger 來追蹤 .NET Core Console project 中 gRPC 的呼叫歷程，不過想必未來應該免不了還是需要使用 REST api 的專案，</description></item><item><title>.NET Core 上使用 Jaeger 追蹤 gRPC 呼叫</title><link>https://blog.yowko.com/dotnet-core-jaeger-grpc/</link><pubDate>Wed, 13 Mar 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-core-jaeger-grpc/</guid><description>.NET Core 上使用 Jaeger 追蹤 gRPC 呼叫 隨著系統使用人數愈來愈多，架構也跟著愈來愈複雜，各種技術為了解決既有問題或是加快反應速度不斷推陳出新，服務的架構也從單</description></item><item><title>讓 .NET Core 的 HttpClientFactory 不驗證 Https 憑證</title><link>https://blog.yowko.com/dotnet-core-httpclientfactory-invalid-certificate/</link><pubDate>Wed, 06 Mar 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-core-httpclientfactory-invalid-certificate/</guid><description>讓 .NET Core 的 HttpClientFactory 不驗證 Https 憑證 Https 幾乎已成為了現在網站的基本配備，從過去只有敏感交易網站才需要，到現在瀏覽器還會把非 Https 網站標記為 不安全，而 .NET Core 程式在預</description></item><item><title>使用 C# (.NET Core) 傳訊息至 Slack</title><link>https://blog.yowko.com/csharp-message-slack/</link><pubDate>Wed, 06 Feb 2019 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-message-slack/</guid><description>使用 C# (.NET Core) 傳訊息至 Slack 公司有個臨時性需求：某個重要功能開啟或是關閉時，立即通知營運團隊及各級主管知道，讓大家在討論 production issue 有共同的討論基準。 經過一</description></item><item><title>在 .NET Core 與 .NET Framework 上使用 HttpClientFactory</title><link>https://blog.yowko.com/httpclientfactory-dotnet-core-dotnet-framework/</link><pubDate>Wed, 16 Jan 2019 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/httpclientfactory-dotnet-core-dotnet-framework/</guid><description>在 .NET Core 與 .NET Framework 上使用 HttpClientFactory 之前筆記 探討 HttpClient 可能的問題 與 HttpClient 無法反應 DNS 異動的解決方式 的出現是因為工作任務需要將一些重要訊息傳送至 Slack 而留意到 .NET Core 使用的 HttpClientFactory 是</description></item><item><title>在 ASP.NET MVC 5 中使用 ASP.NET Core Dependency Injection 與 HttpClientFactory</title><link>https://blog.yowko.com/aspnet-core-di-httpclientfactory-in-aspnet-mvc-5/</link><pubDate>Mon, 14 Jan 2019 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/aspnet-core-di-httpclientfactory-in-aspnet-mvc-5/</guid><description>在 ASP.NET MVC 5 中使用 ASP.NET Core Dependency Injection 與 HttpClientFactory 習慣了 ASP.NET Core DI 的寫法後，回到 ASP.NET MVC 5 後突然覺得不太適應，沒有 HttpClientFactory 都覺得 HttpClient 好像很容易出錯，於是試著研究研究，順手紀錄一下，</description></item><item><title>調整哪些設定會引起 IIS 站台重啟？！</title><link/><pubDate>Fri, 30 Nov 2018 23:45:00 +0800</pubDate><guid/><description/></item><item><title>在 .NET Core console 上使用 Dependency Injection - DI</title><link>https://blog.yowko.com/dotnet-core-console-di/</link><pubDate>Wed, 28 Nov 2018 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-core-console-di/</guid><description>在 .NET Core console 上使用 Dependency Injection - DI 開始撰寫 ASP.NET Core 後，對於整個開發流程雖然不至於陌生卻也一直覺得掌握度不足，尤其在習慣 ASP.NET Core 註冊及啟動流程後，突然要寫 .NET Core console application</description></item><item><title>Visual Studio 2017 啟動 Azure Function 偵錯出現 Fatal Error ？！</title><link>https://blog.yowko.com/visualstudio-0x8000ffff/</link><pubDate>Thu, 22 Nov 2018 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/visualstudio-0x8000ffff/</guid><description>Visual Studio 2017 啟動 Azure Function 偵錯出現 Fatal Error ？！ 因緣際會下，剛好有個很趕但很小的功能可以透過 Azure Function 來完成，過去 Azure Function 1.x 我來不及參與，直接使用 Azure Function 2.x 似乎也沒什麼違和</description></item><item><title>列出當下環境可以使用的 .NET Core 專案範本</title><link>https://blog.yowko.com/dotnet-template-list/</link><pubDate>Sun, 18 Nov 2018 00:42:34 +0800</pubDate><guid>https://blog.yowko.com/dotnet-template-list/</guid><description>列出當下環境可以使用的 .NET Core 專案範本 .NET Core 問世以來，跨平台的特性帶來了許多的改變，其中一個就是開發模式，過去 .Net 開發人員只能透過 Visual Studio 這類的 IDE 工具進</description></item></channel></rss>