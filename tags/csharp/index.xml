<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>csharp on Yowko&#39;s Notes</title><link>https://blog.yowko.com/tags/csharp/</link><description>Recent content in csharp on Yowko&#39;s Notes</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 22 Jul 2024 00:30:00 +0800</lastBuildDate><atom:link href="https://blog.yowko.com/tags/csharp/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 C# 存取 redis JSON</title><link>https://blog.yowko.com/csharp-redis-json/</link><pubDate>Mon, 22 Jul 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-redis-json/</guid><description>使用 C# 存取 redis JSON 雖然一直以來持續都在使用 redis，只是用途一直是當做 cache，有訂閱著 redis 的更新消息，但除了 security patch 之外卻沒有額外關注，最近查指</description></item><item><title>.NET 中的 UUID(GUID) 與 ULID</title><link>https://blog.yowko.com/dotnet-uuid-guid-ulid/</link><pubDate>Wed, 10 Jul 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-uuid-guid-ulid/</guid><description>.NET 中的 UUID(GUID) 與 ULID 先來認識一下 UUID(GUID) 與 ULID UUID (Universally Unique Identifier) 128-bit 長的唯一標識符，通常用於生成唯一 ID UUID Version 1：基於時間和 MAC address 結構：60 bit 代表時間戳，48 bit 代表節點（通常</description></item><item><title>使用 C# 體驗 Apache Kafka Streams</title><link>https://blog.yowko.com/csharp-kafka-streams/</link><pubDate>Wed, 03 Jul 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-kafka-streams/</guid><description>使用 C# 體驗 Apache Kafka Streams 幾年前開始使用 Kafka 時，就有注意 Kafka Streams，但當時查資料發現 Kafka Streams 是 Java 的 library (僅支援 Java 與 Scala)，並不支援 .NET，最近看</description></item><item><title>使用 C# 取得 Redis 複雜型別 table 資料</title><link>https://blog.yowko.com/csharp-redis-table/</link><pubDate>Sun, 21 Apr 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-redis-table/</guid><description>使用 C# 取得 Redis 複雜型別 table 資料 之前筆記 使用 C# 取得 Redis key 的記憶體用量 提到如何使用 C# 取得 Redis key 的記憶體用量，但是把所有 redis key 全部拉回 C# 做處理，可以想見執行</description></item><item><title>使用 C# 取得 Redis key 的記憶體用量</title><link>https://blog.yowko.com/csharp-redis-key-memory-usage/</link><pubDate>Wed, 17 Apr 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-redis-key-memory-usage/</guid><description>使用 C# 取得 Redis key 的記憶體用量 團隊某個 redis cluster 中，有一組 replication (master-replica) 的 memory 用量特別高，推測是 key 的 hash tag 不夠分散，造成 key 都集中在某些 slot 上，進而使得一組 cluster replication (master-replica) 的 memory 用</description></item><item><title>C# 在啟用 TLS 的 RabbitMQ 上收發訊息</title><link>https://blog.yowko.com/csharp-tls-rabbitmq/</link><pubDate>Thu, 01 Feb 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-tls-rabbitmq/</guid><description>C# 在啟用 TLS 的 RabbitMQ 上收發訊息 之前筆記 為 RabbitMQ container 啟用 TLS 連線 提到最近 partner 為了安全性考量，在與我們介接的 RabbitMQ 上啟用 TLS 連線，連線由 port 5672 改為 port 5671，造成 application 這邊</description></item><item><title>ClickHouse 使用 MySql Database Engine</title><link>https://blog.yowko.com/clickhouse-mysql-engine/</link><pubDate>Mon, 15 Jan 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/clickhouse-mysql-engine/</guid><description>ClickHouse 使用 MySql Database Engine 之前筆記 ClickHouse 在彙總資料時的效能優勢 紀錄到 ClickHouse 與 MySql 在特定查詢情境的效能差異，查閱官網文件時，發現 ClickHouse 除了支援自有的 table engine 之外，也支援其他 DB</description></item><item><title>為頻繁更新 ClickHouse 資料選擇適合的 Table Engine</title><link>https://blog.yowko.com/clickhouse-replacingmergetree-collapsingmergetree/</link><pubDate>Fri, 12 Jan 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/clickhouse-replacingmergetree-collapsingmergetree/</guid><description>為頻繁更新 ClickHouse 資料選擇適合的 Table Engine 雖然之前筆記 新增修改刪除查詢 ClickHouse 資料&amp;rdquo; 有紀錄到如何更新與刪除資料，但在 ClickHouse 官網文件：Avoid Mutations 就明確</description></item><item><title>新增修改刪除查詢 ClickHouse 資料</title><link>https://blog.yowko.com/clickhouse-insert-update-select-delete/</link><pubDate>Wed, 10 Jan 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/clickhouse-insert-update-select-delete/</guid><description>新增修改刪除查詢 ClickHouse 資料&amp;rdquo; 之前筆記 C# 如何新增資料至 ClickHouse 與 ClickHouse 在彙總資料時的效能優勢 分別紀錄到如何透過 C# 來新增大量資料至 ClickHouse 以及如何查詢 ClickHouse</description></item><item><title>ClickHouse 在彙總資料時的效能優勢</title><link>https://blog.yowko.com/clickhouse-aggregate-query-performance/</link><pubDate>Wed, 03 Jan 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/clickhouse-aggregate-query-performance/</guid><description>ClickHouse 在彙總資料時的效能優勢 前提：雖然本篇筆記中使用了 MySql 做為範例，但主要是因為目前團隊使用 MySql，我對 MySql 相同熟悉點，而不是為了踩 MySql 捧 Clic</description></item><item><title>C# 如何新增資料至 ClickHouse</title><link>https://blog.yowko.com/csharp-insert-clickhouse/</link><pubDate>Wed, 27 Dec 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-insert-clickhouse/</guid><description>C# 如何新增資料至 ClickHouse 最近在評估導入 ClickHouse 的可行性，首先除了測試環境建立之外，最重要的就是要能夠透過 C# 來新增資料，所以今天就來紀錄如何透過 C# 來新增資</description></item><item><title>erlang 降版的步驟</title><link>https://blog.yowko.com/apt-downgrade-erlang/</link><pubDate>Tue, 26 Dec 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/apt-downgrade-erlang/</guid><description>erlang 降版的步驟 這幾天有台與 partner 介接用的 server 異常，造成 rabbitmq 無法連線，團隊在這類的 service 安裝腳本一直透過 ansible 管理，安裝上很順利，只是安裝後 .NET application 卻無法成功連線 (</description></item><item><title>C# 如何快速新增大量資料至 MySQL</title><link>https://blog.yowko.com/csharp-mysql-bulk-insert/</link><pubDate>Fri, 22 Dec 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-mysql-bulk-insert/</guid><description>C# 如何快速新增大量資料至 MySQL 最近在重現系統上遇到的狀況，初步懷疑是資料量過大，造成相關處理效能不佳，而連帶影響到系統後續運作，但這是初步懷疑，</description></item><item><title>將 ASP.NET gRPC 的 Trace 整合至 Grafana Tempo</title><link>https://blog.yowko.com/aspdotnet-grpc-tempo/</link><pubDate>Fri, 01 Dec 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-grpc-tempo/</guid><description>將 ASP.NET gRPC 的 Trace 整合至 Grafana Tempo 之前筆記 將 ASP.NET 的 Trace 整合至 Grafana Tempo 紀錄到如何將 ASP.NET 的 Trace 整合至 Grafana Tempo，今天來看看如何將 ASP.NET gRPC 的 Trace 整合至 Grafana Tempo 過去 trace 相關筆記如下： OpenTracing</description></item><item><title>將 ASP.NET 的 Trace 整合至 Grafana Tempo</title><link>https://blog.yowko.com/aspdotnet-tempo/</link><pubDate>Wed, 29 Nov 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-tempo/</guid><description>將 ASP.NET 的 Trace 整合至 Grafana Tempo 之前筆記 使用 Docker Compose 啟動 Grafana Tempo 紀錄到如何透過 docker compose 快速建立 Grafana Tempo 測試環境，今天來看看如何將 ASP.NET 的 Trace 整合至 Grafana Tempo 過去 trace 相關筆記如下： OpenTracing .NET Core</description></item><item><title>停用 C# 編譯時特定的警告</title><link>https://blog.yowko.com/csharp-disable-warn/</link><pubDate>Fri, 24 Nov 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-disable-warn/</guid><description>停用 C# 編譯時特定的警告 之前筆記 NuGet restore error NU1803 紀錄了在某次 build fail 後意外發現 Microsoft NuGet team 的 HTTPS everywhere 計劃，接著筆記 NuGet 設定 Insecure HTTP source 是根據 Microsoft NuGet team 的新計劃：HTTPS Everywhere Update 嘗</description></item><item><title>使用 C# 設定 Single Active Consumer 讀取 RabbitMQ Streams</title><link>https://blog.yowko.com/csharp-rabbitmq-streams-single-active-consumer/</link><pubDate>Tue, 07 Nov 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-rabbitmq-streams-single-active-consumer/</guid><description>使用 C# 設定 Single Active Consumer 讀取 RabbitMQ Streams RabbitMQ 團隊在 RabbitMQ 3.9 導入 Streams，官網文件大致上說明了有哪些異動與效能改善，以下整理個人理解： 不會像過去 RabbitMQ 在 message 得到 ack 後</description></item><item><title>使用 C# 透過二進位協定存取 RabbitMQ Streams</title><link>https://blog.yowko.com/csharp-rabbitmq-streams-binary/</link><pubDate>Fri, 03 Nov 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-rabbitmq-streams-binary/</guid><description>使用 C# 透過二進位協定存取 RabbitMQ Streams RabbitMQ 團隊在 RabbitMQ 3.9 導入 Streams，官網文件大致上說明了有哪些異動與效能改善，以下整理個人理解： 不會像過去 RabbitMQ 在 message 得到</description></item><item><title>使用 C# 存取 RabbitMQ Streams</title><link>https://blog.yowko.com/csharp-rabbitmq-streams/</link><pubDate>Mon, 30 Oct 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-rabbitmq-streams/</guid><description>使用 C# 存取 RabbitMQ Streams RabbitMQ 團隊在 RabbitMQ 3.9 導入 Streams，官網文件大致上說明了有哪些異動與效能改善，以下整理個人理解： 不會像過去 RabbitMQ 在 message 得到 ack 後就刪除，處</description></item><item><title>如何指定 container 或是 .NET application 的時區</title><link>https://blog.yowko.com/timezone-in-container-or-dotnet/</link><pubDate>Thu, 26 Oct 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/timezone-in-container-or-dotnet/</guid><description>如何指定 container 或是 .NET application 的時區 最近經手的一個專案，使用到外部 partner 提供的 NuGet library，但這個 library 有個問題，就是 DateTime.UtcNow 與 DateTime.Now 同時都有用到，而且沒有提供任何的</description></item><item><title>使用 Coravel 來進行 Schedule Job</title><link>https://blog.yowko.com/coravel/</link><pubDate>Fri, 04 Aug 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/coravel/</guid><description>使用 Coravel 來進行 Schedule Job 最近有個舊專案 (.NET Core 2.1) 需要增加功能，升級 framework 是絕對必要的，只是其中一段用來執行每天更新 cache 的背景作業引起了我的興趣，我忘記為什麼當</description></item><item><title>使用 Quartz.NET 來進行 Schedule Job</title><link>https://blog.yowko.com/quartz-net/</link><pubDate>Thu, 03 Aug 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/quartz-net/</guid><description>使用 Quartz.NET 來進行 Schedule Job 最近有個舊專案 (.NET Core 2.1) 需要增加功能，升級 framework 是絕對必要的，只是其中一段用來執行每天更新 cache 的背景作業引起了我的興趣，我忘記為什麼當</description></item><item><title>使用 Hangfire 來進行 Schedule Job</title><link>https://blog.yowko.com/hangfire/</link><pubDate>Wed, 02 Aug 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/hangfire/</guid><description>使用 Hangfire 來進行 Schedule Job 最近有個舊專案 (.NET Core 2.1) 需要增加功能，升級 framework 是絕對必要的，只是其中一段用來執行每天更新 cache 的背景作業引起了我的興趣，我忘記為什麼當</description></item><item><title>使用原生 HostedService 來進行 Schedule Job</title><link>https://blog.yowko.com/hostedservice-schedule-job/</link><pubDate>Tue, 01 Aug 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/hostedservice-schedule-job/</guid><description>使用原生 HostedService 來進行 Schedule Job 最近有個舊專案 (.NET Core 2.1) 需要增加功能，升級 framework 是絕對必要的，只是其中一段用來執行每天更新 cache 的背景作業引起了我的興趣，我忘記為什</description></item><item><title>使用 C# 搭配 Avro 存取 Kafka</title><link>https://blog.yowko.com/csharp-avro-kafka/</link><pubDate>Mon, 10 Jul 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-avro-kafka/</guid><description>使用 C# 搭配 Avro 存取 Kafka 之前筆記 使用 Docker Compose 啟動 Avro Schema Registry 紀錄到如何使用 docker compose 來快速建立 Kafka 與 Schema Registry，當然沒事不會特別建立環境，今天就進入重點，紀</description></item><item><title>如何在 .NET6 上指定 HttpClient 使用 HTTP/2</title><link>https://blog.yowko.com/httpclient-http2/</link><pubDate>Tue, 30 May 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient-http2/</guid><description>如何在 .NET6 上指定 HttpClient 使用 HTTP/2 之前筆記 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 紀錄到如何使用 ASP.NET Core 7 加入的 JSON 轉碼功能：可以讓 gRPC service 也可以透過 rest api 的方式來呼叫，所以就有了 HttpClient</description></item><item><title>ASP.NET Core 的 gRPC-Web 功能</title><link>https://blog.yowko.com/aspdotnetcore-grpc-web/</link><pubDate>Fri, 05 May 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnetcore-grpc-web/</guid><description>ASP.NET Core 的 gRPC-Web 功能 之前筆記 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 紀錄到如何使用 Transcoding 讓 gRPC service 同時提供 web rest api 的功能，過程中在 Microsoft 官方文件 gRPC JSON transcoding in ASP.NET Core gRPC apps 看到 Microsoft 官方將 gRPC JSON transcoding 與</description></item><item><title>使用 Postman 來發送 gRPC request</title><link>https://blog.yowko.com/postman-grpc/</link><pubDate>Fri, 28 Apr 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/postman-grpc/</guid><description>使用 Postman 來發送 gRPC request 過去在測試 gRPC 時大部份都是依賴 BloomRPC，畢竟 grpcurl 還是語法上還是沒辦法像 GUI 一樣直覺，只是今年要更新 BloomRPC 時發現已停止維護，雖然</description></item><item><title>再探 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 (Streaming)</title><link>https://blog.yowko.com/grpc-aspdotnetcore7-json-streaming/</link><pubDate>Thu, 27 Apr 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-aspdotnetcore7-json-streaming/</guid><description>再探 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 (Streaming) 之前筆記 再探 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 紀錄到如何使用 ASP.NET Core 7 加入的 JSON 轉碼功能讓 gRPC service 與 rest api 有接近的使用體驗：使用 POST 方法搭</description></item><item><title>Google Cloud Functions 發送訊息到 Google Cloud Pub/Sub</title><link>https://blog.yowko.com/gcp-cloud-function-pubsub/</link><pubDate>Wed, 26 Apr 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/gcp-cloud-function-pubsub/</guid><description>Google Cloud Functions 發送訊息到 Google Cloud Pub/Sub 因為公司部份產品建置在 SaaS 基礎上，但這些 SaaS 都有自己維護的時間跟計劃，所以為了避免 SaaS 維護造成產品服務異常，所以想要將 SaaS 的相</description></item><item><title>再探 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能</title><link>https://blog.yowko.com/grpc-aspdotnetcore7-json-post/</link><pubDate>Wed, 26 Apr 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-aspdotnetcore7-json-post/</guid><description>再探 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 之前筆記 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 紀錄到如何使用 ASP.NET Core 7 加入的 JSON 轉碼功能：可以讓 gRPC service 也可以透過 rest api 的方式來呼叫。 不過眼尖</description></item><item><title>gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 (macOS)</title><link>https://blog.yowko.com/grpc-aspdotnetcore7-json-macos/</link><pubDate>Fri, 14 Apr 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-aspdotnetcore7-json-macos/</guid><description>gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 (macOS) 在之前筆記 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 紀錄到如何使用 ASP.NET Core 7 加入的 JSON 轉碼功能：可以讓 gRPC service 也可以透過 rest api 的方式來呼叫 但由於該功</description></item><item><title>gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能</title><link>https://blog.yowko.com/grpc-aspdotnetcore7-json/</link><pubDate>Tue, 11 Apr 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-aspdotnetcore7-json/</guid><description>gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 .NET 7 跟過去幾個 .NET 版本一樣有不少效能的改善，也增加了好幾個語法糖以及功能，但因為單數版本的關係屬於 Standard Term Support (STS)：只有</description></item><item><title>使用 C# 訂閱 GKE 更新通知</title><link>https://blog.yowko.com/csharp-subscribe-gke-update/</link><pubDate>Mon, 30 Jan 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-subscribe-gke-update/</guid><description>使用 C# 訂閱 GKE 更新通知 目前團隊的產品在 production 有不少各式各樣的監控：有針對網站的 health check、有針對 log 異常情境的、有針對 kubernetes 上 application 運行狀態的&amp;helli</description></item><item><title>同時訂閱多個 Kafka topic</title><link>https://blog.yowko.com/subscribe-multiple-kafka-topics/</link><pubDate>Wed, 18 Jan 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/subscribe-multiple-kafka-topics/</guid><description>同時訂閱多個 Kafka topic 隨著產品的發展，團隊所建立的 application 也逐漸變多，不同 application 的溝通也變得複雜，為了避免直接相依，一部份的功能是透 kafka 來交換資料，但如果不加</description></item><item><title>關於 gRPC 的 Load Test</title><link>https://blog.yowko.com/grpc-load-test/</link><pubDate>Fri, 29 Apr 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-load-test/</guid><description>關於 gRPC 的 Load Test 搜尋資訊的過程中，偶爾看到 Load testing for gRPC - the case，分析用來針對 gRPC service 做 load test 的三種方式： Gatling with gRPC plugin. 使用 scala 來建立測試腳本 支援四種 gRPC serv</description></item><item><title>使用 Gatling 來對 gRPC 做負載測試</title><link>https://blog.yowko.com/grpc-load-test-gatling/</link><pubDate>Thu, 28 Apr 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-load-test-gatling/</guid><description>使用 Gatling 來對 gRPC 做負載測試 關於 Gatling 先決條件：安裝 64bits OpenJDK LTS：8,11,17 &amp;gt; 其他 JVM 像是 JDK 12, client JVMs, 32bits systems or OpenJ9 都不支援 Gatling 3.7 開始支援 Java, Kotlin and Scala 來撰寫測試腳本 &amp;gt;</description></item><item><title>使用 k6 來對 gRPC 做負載測試</title><link>https://blog.yowko.com/grpc-load-test-k6/</link><pubDate>Fri, 08 Apr 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-load-test-k6/</guid><description>使用 k6 來對 gRPC 做負載測試 第一次聽到 k6 是 twMVC 的活動宣傳 讓我們用 k6 來進行壓測吧，雖然後來時間因素沒有到場聽到實際應用的分享，但為了不要與技術潮流脫節</description></item><item><title>使用 ghz 來對 gRPC 做負載測試</title><link>https://blog.yowko.com/grpc-load-test-ghz/</link><pubDate>Mon, 04 Apr 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-load-test-ghz/</guid><description>使用 ghz 來對 gRPC 做負載測試 最近興起想要比較幾個 gRPC load test 工具的使用心得，這才發現過去在建立 gRPC service 時因為專案時間壓力並沒有特別紀錄 ghz 的用法，後來工作也慢</description></item><item><title>在 Linux 上確認 dll 版本</title><link>https://blog.yowko.com/linux-dll-version/</link><pubDate>Sat, 02 Apr 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/linux-dll-version/</guid><description>在 Linux 上確認 dll 版本 這是為了解決 ASP.NET Core 3.1 的 amd64 image 無法在 arm 晶片 (M1) 上執行而衍生的問題 我嘗試在 ASP.NET Core 3.1 的 application 中升級一個 NuGet package 以套用在 .NET 5 以後加入的功能，為了確認</description></item><item><title>RabbitMQ 關於寫入部份 Queue 的權限設定</title><link>https://blog.yowko.com/rabbitmq-topic-permission-queue/</link><pubDate>Sat, 12 Mar 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/rabbitmq-topic-permission-queue/</guid><description>RabbitMQ 關於寫入部份 Queue 的權限設定 之前筆記 RabbitMQ 為不同帳號設定不同 Queue 權限 紀錄到讓不同 user 有不同權限，當時的情境是以讀取資料為例，最近同事想要為寫入也加上不</description></item><item><title>在 ASP.NET Core 中從 Apache Pulsar 接收訊息 (Reader)</title><link>https://blog.yowko.com/aspdotnet-core-pulsar-reader/</link><pubDate>Fri, 11 Mar 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-pulsar-reader/</guid><description>在 ASP.NET Core 中從 Apache Pulsar 接收訊息 (Reader) Apache Pulsar 常常被拿來與 Kafka 做比較，孰優孰劣常常也是各自擁護者爭相討論的內容，以下條列幾項選擇 Pulsar 的正面意見 同時支援即時訊息與訊</description></item><item><title>在 ASP.NET Core 中從 Apache Pulsar 接收訊息</title><link>https://blog.yowko.com/aspdotnet-core-pulsar-consumer/</link><pubDate>Thu, 10 Mar 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-pulsar-consumer/</guid><description>在 ASP.NET Core 中從 Apache Pulsar 接收訊息 Apache Pulsar 常常被拿來與 Kafka 做比較，孰優孰劣常常也是各自擁護者爭相討論的內容，以下條列幾項選擇 Pulsar 的正面意見 同時支援即時訊息與訊息</description></item><item><title>在 ASP.NET Core 中發送訊息至 Apache Pulsar</title><link>https://blog.yowko.com/aspdotnet-core-pulsar-producer/</link><pubDate>Tue, 08 Mar 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-pulsar-producer/</guid><description>在 ASP.NET Core 中發送訊息至 Apache Pulsar Apache Pulsar 常常被拿來與 Kafka 做比較，孰優孰劣常常也是各自擁護者爭相討論的內容，以下條列幾項選擇 Pulsar 的正面意見 同時支援即時訊息與訊息</description></item><item><title>啟動 ASP.NET Core 時傳入參數</title><link>https://blog.yowko.com/aspdotnet-core-pass-parameters/</link><pubDate>Sat, 22 Jan 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-pass-parameters/</guid><description>啟動 ASP.NET Core 時傳入參數 團隊中有多個專案都有使用相同 source code，不過可以依據 config 不同而執行著不同任務的特性 sre 在處理這種類型的 application 時都是 build 一份 image</description></item><item><title>ASP.NET Core Configuration 中的 array 沒有正確覆寫</title><link>https://blog.yowko.com/aspdotnet-core-config-array-not-override/</link><pubDate>Fri, 21 Jan 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-config-array-not-override/</guid><description>ASP.NET Core Configuration 中的 array 沒有正確覆寫 之前筆記 在 ASP.NET Core Configuration 中使用 array 中紀錄到如何在 config 中使用 array，不過在使用後發現有些限制，趁著這個機會紀錄一下 基本環境說明</description></item><item><title>在 ASP.NET Core Configuration 中使用 array</title><link>https://blog.yowko.com/aspdotnet-core-config-array/</link><pubDate>Thu, 20 Jan 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-config-array/</guid><description>在 ASP.NET Core Configuration 中使用 array 這是之前專案遇到的需求：在 config 中設定多個值來供 application 使用，印象中之前有用過但沒找到筆記，順便嘗試一下不同做法，筆記一下 基本環境說明</description></item><item><title>取得 Kafka 與 zookeeper 版本</title><link>https://blog.yowko.com/kafka-zookeeper-version/</link><pubDate>Fri, 05 Nov 2021 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/kafka-zookeeper-version/</guid><description>取得 Kafka 與 zookeeper 版本 雖然各個環境的軟體都是使用 ansible 腳本來安裝設定的，但畢竟各個環境的執行時間有些落差，後續可能有版本更新的狀況，所以還是直接至環境上</description></item><item><title>放大 kafka message size</title><link>https://blog.yowko.com/kafka-max-message-size/</link><pubDate>Fri, 05 Nov 2021 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/kafka-max-message-size/</guid><description>放大 kafka message size 今天 prod 監控噴出大量 Message size too large 的錯誤訊息，訊息內容很明確：就是傳到 kafka 的 message 太大 (預設為 1048588 約 1MB)，趁著這個機會紀錄一下 調整方式與使用方</description></item><item><title>RedLock.net 使用 StackExchange.Redis 的連線設定</title><link>https://blog.yowko.com/redlock-stackexchange-redis-connection/</link><pubDate>Mon, 25 Oct 2021 00:39:29 +0800</pubDate><guid>https://blog.yowko.com/redlock-stackexchange-redis-connection/</guid><description>RedLock.net 使用 StackExchange.Redis 的連線設定 最近專案發現在大量並行處理時會出現重複建立資料的狀況，因為這個專案本來就是設計來進行分散式作業，同時會建立好幾個 instance 在不同的</description></item><item><title>ASP.NET Core 中 StackExchange.Redis 的註冊與使用方式</title><link>https://blog.yowko.com/stackexchange-redis-in-aspdotnet-core/</link><pubDate>Fri, 22 Oct 2021 00:39:29 +0800</pubDate><guid>https://blog.yowko.com/stackexchange-redis-in-aspdotnet-core/</guid><description>ASP.NET Core 註冊 StackExchange.Redis 的方式 最近有個專案需要用到 RedLock.net，在做可行性評估時發現 StackExchange.Redis 有幾個註冊方式自己都沒有紀錄過，趁著工作空檔簡單筆記一下 基</description></item><item><title>個別 HttpClient request 使用不同 Timeout 時間</title><link>https://blog.yowko.com/httpclient-different-timeout/</link><pubDate>Wed, 25 Aug 2021 12:30:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient-different-timeout/</guid><description>個別 HttpClient request 使用不同 Timeout 時間 在透過 HttpClient 與 partner 介接時，常會使用同一個 named-client 來建立 instance，這也是可以共用 pool 與 存留期設定的推薦方式，雖然可以在 AddHttpClient 時加上</description></item><item><title>C# Socket 使用 proxy 連線</title><link>https://blog.yowko.com/csharp-socket-proxy/</link><pubDate>Mon, 23 Aug 2021 12:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-socket-proxy/</guid><description>C# Socket 使用 proxy 連線 合作的 partner 在資料介接上提供 socket 的接口來確保資料更新的即時性，但為了有基本安全性所以只允許 whitelist server 可以連線，這在 production server 是很常見的限制，甚至</description></item><item><title>HttpClient 使用 Polly 做 Timeout 重試</title><link>https://blog.yowko.com/httpclient-polly-timeout-retry/</link><pubDate>Wed, 28 Jul 2021 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient-polly-timeout-retry/</guid><description>HttpClient 使用 Polly 做 Timeout 重試 之前使用 HttpClient 做了一個內部的網頁回應偵測工具，原本沒有調整預設的 Timeout 時間 (預設為 100,000 毫秒 = 100 秒，相關說明可以參考 Microsoft docs:HttpClient.Timeout 屬性)，為了更即</description></item><item><title>使用 HttpClient 傳送檔案</title><link>https://blog.yowko.com/httpclient-file/</link><pubDate>Tue, 27 Jul 2021 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient-file/</guid><description>使用 HttpClient 傳送檔案 最近專案有個需求要將系統畫面 透過 RESTFul API 傳給其他平台做紀錄，這才發現這功能雖然過去待在專案公司時常做，但時間一久覺得好陌生，猛然發</description></item><item><title>HttpClient 使用 URL Parameters (Query Strings) 的方式</title><link>https://blog.yowko.com/httpclient-url-parameter/</link><pubDate>Sat, 24 Jul 2021 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient-url-parameter/</guid><description>HttpClient 使用 URL Parameters (Query Strings) 的方式 前陣子有個跟其他系統介接的需求，因為手上工作太滿，先由前端的同事使用 Node.js 開發，過陣子再接手改用 C# 開發；其中有個功能需要 post 幾</description></item><item><title>讓特定 message 在 kafka 中可以有順序性</title><link>https://blog.yowko.com/kafka-message-immutable-sequence/</link><pubDate>Sat, 25 Jul 2020 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/kafka-message-immutable-sequence/</guid><description>讓特定 message 在 kafka 中可以有順序性 之前專案為了保證 message 的順序性捨棄當時還在 0.8 版的 kafka 而選用 RabbitMQ，雖然 RabbitMQ 在效能數據上跟 kafka 不是同個量級水準，但已</description></item><item><title>[C#] 將 .NET Core 中的 Configuration 輸出為 JSON</title><link>https://blog.yowko.com/configuration-to-json/</link><pubDate>Sat, 08 Feb 2020 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/configuration-to-json/</guid><description>[C#] 將 .NET Core 中的 Configuration 輸出為 JSON 之前筆記 [C#] 將 Dictionary 轉為 JSON 紀錄到 將 Dictionary 轉為 JSON 的方式，對 .NET Core 有些認識的朋友馬上就想到是為了處理 .NET Core Configuration，主</description></item><item><title>[C#] 將 Dictionary 轉為 JSON</title><link>https://blog.yowko.com/dictionary-to-json/</link><pubDate>Sun, 02 Feb 2020 14:30:00 +0800</pubDate><guid>https://blog.yowko.com/dictionary-to-json/</guid><description>[C#] 將 Dictionary 轉為 JSON 之前筆記 [C#] 將 JSON 轉為 Dictionary 紀錄到如果將 JSON file 轉為 C# 的 Dictionary 來做後續加工處理，當然有 JSON to Dictionary 就需要有 Dictionary to JSON 囉 基本環境說明 macOS Catalina 10.15.2 .NET Core SDK 3.1.101 C# 8.0 程式碼</description></item><item><title>[C#] 將 JSON 轉為 Dictionary</title><link>https://blog.yowko.com/json-to-dictionary/</link><pubDate>Sat, 01 Feb 2020 14:30:00 +0800</pubDate><guid>https://blog.yowko.com/json-to-dictionary/</guid><description>[C#] 將 JSON 轉為 Dictionary 使用 JSON 做為避免在程式中寫死固定值的解決方案是種常見做法，不過一旦系統日漸龐大複雜起來時，可能就需要有良好的管理方式或是流程，像是</description></item><item><title>C# 使用 Lua 取得 Redis 自訂複雜型別</title><link>https://blog.yowko.com/csharp-lua-redis-custom-type/</link><pubDate>Mon, 09 Dec 2019 22:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-lua-redis-custom-type/</guid><description>C# 使用 Lua 取得 Redis 自訂複雜型別 之前筆記 在 Redis 中使用 Lua 的 Dictionary 紀錄到在 Redis 中使用 Lua 時可以如何模擬並使用 Dictionary，而筆記最後也提到透過這樣的方式</description></item><item><title>C# - Property 與 Value 的 Dictionary 轉為 Object</title><link>https://blog.yowko.com/property-value-dictionary-to-object/</link><pubDate>Mon, 09 Dec 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/property-value-dictionary-to-object/</guid><description>C# - Property 與 Value 的 Dictionary 轉為 Object 之前筆記 C# - 將 Object 的 Property 與 Value 轉換為 Dictionary 紀錄到將 C# object 的 property name 與 value 透過 dictionary 的資料型態存放，當時主要是為了配合 InfluxDB 的 insert 而做的筆記 ，想不到時</description></item><item><title>Polly retry 之後的行為是？</title><link>https://blog.yowko.com/polly-after-retry/</link><pubDate>Sun, 01 Dec 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/polly-after-retry/</guid><description>Polly retry 之後的行為是？ 同事在追查 bug 時，問到在執行某個動作時使用的 Polly policy 來進行失敗重試，如果 policy 中設定的 retry 次數結束仍然失敗會發生什麼事？ 印象中之前測試</description></item><item><title>C# (.NET Core 2) 啟用 gRPC 壓縮</title><link>https://blog.yowko.com/dotnet-core-2-grpc-compression/</link><pubDate>Sat, 16 Nov 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-core-2-grpc-compression/</guid><description>C# (.NET Core 2) 啟用 gRPC 壓縮 目前專案在大資料量傳遞時會透過 gRPC stream，不過因為是非對稱式資料內容，採用 chunk byte 來傳輸，以避免單次 gRPC 的 message size 限制問題，但以</description></item><item><title>C# (.NET Core 2) Log 與 Trace gRPC</title><link>https://blog.yowko.com/dotnet-core-2-log-grpc/</link><pubDate>Tue, 12 Nov 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-core-2-log-grpc/</guid><description>C# (.NET Core 2) Log 與 Trace gRPC gRPC 在 .NET Core 3 被官方宣告重點發展項目之一，而身為追求系統更快更好又愛嚐鮮的工程師團隊的一員，早在一年前的 .NET Core 2 專案中就用上了 gR</description></item><item><title>[Benchmark] 使用 C# 對 InfluxDB insert 操作的效能數據</title><link>https://blog.yowko.com/csharp-influxdb-benchmark/</link><pubDate>Sun, 22 Sep 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-influxdb-benchmark/</guid><description>[Benchmark] 使用 C# 對 InfluxDB insert 操作的效能數據 之前筆記 使用 C# 存取 InfluxDB 紀錄了 C# 在 InfluxDB 的基本 CRUD，也提到新專案可能會使用 InfluxDB 儲存資料，在了解 C# 的基本用法後接著就來確</description></item><item><title>C# - 將 Object 的 Property 與 Value 轉換為 Dictionary</title><link>https://blog.yowko.com/csharp-object-to-dictionary/</link><pubDate>Sat, 21 Sep 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-object-to-dictionary/</guid><description>C# - 將 Object 的 Property 與 Value 轉換為 Dictionary 之前筆記 使用 C# 存取 InfluxDB 提到正在嘗試導入 InfluxDB，POC 使用到的 library - InfluxData.Net 在儲存資料時僅接受 Dictionary，如</description></item><item><title>使用 C# 存取 InfluxDB</title><link>https://blog.yowko.com/csharp-influxdb-curd/</link><pubDate>Sun, 15 Sep 2019 20:40:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-influxdb-curd/</guid><description>使用 C# 存取 InfluxDB 最近專案可能會用到 InfluxDB，之前嘗試過的經驗主要是用在監控上，不是直接使用 C# 存取，所以趁著專案開始前先試試看可以如何存取</description></item><item><title>需要在 return 前自行 new ValueTask 嗎？</title><link>https://blog.yowko.com/new-valuetask-or-not/</link><pubDate>Sun, 11 Aug 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/new-valuetask-or-not/</guid><description>需要在 return 前自行 new ValueTask 嗎？ 上個月黑大的 閱讀筆記 - 使用 .NET Async/Await 的常見錯誤 跟同事討論起 ValueTask 的用法，大意是 ValueTask 在使用上只需要將方法簽章改為 ValueTask&amp;lt;T&amp;gt; 就好嗎？ 還是應該在</description></item><item><title>取得 MongoDB SDK 實際產生的指令</title><link>https://blog.yowko.com/mongodb-interceptor/</link><pubDate>Sat, 03 Aug 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/mongodb-interceptor/</guid><description>取得 MongoDB SDK 實際產生的指令 之前曾經在 取得 Entity Framework 存取 DB 時的實際 SQL Script 提到如果都透過 EntityFramework 來存取 DB，有時候遇到的效能瓶頸是因為 EntityFramework 沒有使用正確的 index 或是執行計</description></item><item><title>gRPC stream 如何傳送單一大物件 (Client 版)</title><link>https://blog.yowko.com/grpc-stream-chunk-client/</link><pubDate>Thu, 01 Aug 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-stream-chunk-client/</guid><description>gRPC stream 如何傳送單一大物件 (Client 版) 繼之前筆記 gRPC stream 如何傳送單一大物件 提到該如何使用 gRPC stream 來傳送不是整齊 collection 物件後，公司專案已逐步將可能傳送超出預設 4mb 限制</description></item><item><title>.Net Core 操作 MongoDB 出現 MongoWaitQueueFullException</title><link>https://blog.yowko.com/csharp-mongodb-waitqueuefullexception/</link><pubDate>Sun, 28 Jul 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-mongodb-waitqueuefullexception/</guid><description>.Net Core 操作 MongoDB 出現 MongoWaitQueueFullException 之前筆記 在 Docker Compose file 3 下限制 CPU 與 Memory 中提到同事反應說某個專案在執行時會造成 MongoDB CPU high，最後引發 docker service crash，一直沒有找到 root ca</description></item><item><title>Test 中驗證 Object 是否相同的方法</title><link>https://blog.yowko.com/object-compare-in-test/</link><pubDate>Tue, 23 Jul 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/object-compare-in-test/</guid><description>Test 中驗證 Object 是否相同的方法 最近花了不少時間在重構先前專案中的 Unit Test 與 Integration Test，其中對於 reference type 的物件比對有幾種不同的寫法 當然我個人大多配合團隊規範</description></item><item><title>gRPC stream 如何傳送單一大物件</title><link>https://blog.yowko.com/grpc-stream-big-object/</link><pubDate>Sun, 07 Jul 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-stream-big-object/</guid><description>gRPC stream 如何傳送單一大物件 之前筆記 C# 搭配 gRPC 中使用 stream RPC 提到為了對於較大資料量以及即時性資料內容，可以透過 gRPC 的 stream RPC 來處理，不過官方範例是用在傳送 repeated 內</description></item><item><title>C# 中使用 Protocol Buffers 協定來序列化與反序列化物件</title><link>https://blog.yowko.com/csharp-protobuf-serialize-deserialize/</link><pubDate>Sat, 06 Jul 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-protobuf-serialize-deserialize/</guid><description>C# 中使用 Protocol Buffers 協定來序列化與反序列化物件 專案上剛好需要將 object 進行序列化，過去常用的方式都是序列為 json，後來同事覺得既然都使用 protobuf 了，為什麼不直</description></item><item><title>gRPC 出現 `8 RESOURCE_EXHAUSTED` 錯誤</title><link>https://blog.yowko.com/grpc-8-resource-exhausted/</link><pubDate>Sun, 23 Jun 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-8-resource-exhausted/</guid><description>gRPC 出現 8 RESOURCE_EXHAUSTED 錯誤 隨著系統一步步成形，資料量也愈來愈大，在原本只是先求功能正常而未進行資料分頁的功能逐漸露出原型，今天就來筆記 gRPC 在傳送龐大資料可</description></item><item><title>嘗試為gRPC 中的 stream RPC 加上 Unit Test</title><link>https://blog.yowko.com/csharp-grpc-stream-unit-test/</link><pubDate>Wed, 19 Jun 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-grpc-stream-unit-test/</guid><description>嘗試為gRPC 中的 stream RPC 加上 Unit Test 之前筆記 C# 搭配 gRPC 中使用 stream RPC 紀錄到在 gRPC 中使用 stream RPC 的操作語法，但實際應用在專案上時卻卡關，主因是單元測試出現錯誤，</description></item><item><title>C# 搭配 gRPC 中使用 stream RPC</title><link>https://blog.yowko.com/csharp-grpc-stream/</link><pubDate>Sun, 16 Jun 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-grpc-stream/</guid><description>C# 搭配 gRPC 中使用 stream RPC gRPC 允許使用四種則型的 service 方法： 簡單 RPC (simple RPC) 主機端串流 RPC (server-side streaming RPC) 用戶端串流 RPC (client-side streaming RPC) 雙向串流 RPC (bidirectional streaming RPC) 過去的筆記都是使用 簡單 RPC (simple RPC</description></item><item><title>調整 Kafka 中 Topic 的 Partition 數量</title><link>https://blog.yowko.com/change-kafka-topic-partition/</link><pubDate>Fri, 07 Jun 2019 23:30:00 +0800</pubDate><guid>https://blog.yowko.com/change-kafka-topic-partition/</guid><description>調整 Kafka 中 Topic 的 Partition 數量 最近積極在針對 Kafka 做些設定調整與效能測試，其中也包含了 Topic 的 Partition 數量產生的影響，也就常常需要調整 Topic 中的 Partition 數量來檢視對效能的影響，</description></item><item><title>建立 Kafka 的 Topic</title><link>https://blog.yowko.com/create-kafka-topic/</link><pubDate>Fri, 07 Jun 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/create-kafka-topic/</guid><description>建立 Kafka 的 Topic 最近系統效能瓶頸主要落在在 Kafka 上，所以經常需要對 Kafka 做些設定調整與效能測試，而在那之前首先就是要建立 Topic，過去都是透過 kafka 預設值來</description></item><item><title>TimeZoneInfo 在 Mac/Linux 找不到 time zone ID</title><link>https://blog.yowko.com/timezoneinfo-time-zone-id-not-found/</link><pubDate>Fri, 10 May 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/timezoneinfo-time-zone-id-not-found/</guid><description>TimeZoneInfo 在 Mac/Linux 找不到指定 time zone ID 同事提到 TimeZoneInfo 的操作在 Linux server 會出現錯誤，想說我怎麼沒遇到立馬試試，於是發現原來是 time zone ID 在 Windows 與 Linux 不同造成的 XD 雖說可以理解，但不</description></item><item><title>將 Object 序列化為 Json 時，攤平 Json string 欄位</title><link>https://blog.yowko.com/not-serialize-json-string/</link><pubDate>Sun, 05 May 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/not-serialize-json-string/</guid><description>將 Object 序列化為 Json 時，攤平 Json string 欄位 在不同系統間透過 Json 來交換資料是很常見的設計，甚至在某些系統上還可以見到將 Json string 儲存在屬性中，當然有人會質疑這樣就</description></item><item><title>Protobuf 該如何處理不定型別</title><link>https://blog.yowko.com/protobuf-object-any/</link><pubDate>Sat, 16 Mar 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/protobuf-object-any/</guid><description>Protobuf 該如何處理不定型別 之前筆記 Protobuf 時間屬性該如何表示？ 紀錄了 C# DateTime 屬性在 Protobuf 的 message 表示方式，當時在找資料時發現 any.proto 特別查了資料看可以應用在什麼地方，就個</description></item><item><title>.NET Core 上使用 Jaeger 追蹤 gRPC 呼叫</title><link>https://blog.yowko.com/dotnet-core-jaeger-grpc/</link><pubDate>Wed, 13 Mar 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-core-jaeger-grpc/</guid><description>.NET Core 上使用 Jaeger 追蹤 gRPC 呼叫 隨著系統使用人數愈來愈多，架構也跟著愈來愈複雜，各種技術為了解決既有問題或是加快反應速度不斷推陳出新，服務的架構也從單</description></item><item><title>Protobuf 時間屬性該如何表示？</title><link>https://blog.yowko.com/protobuf-datetime-timestamp/</link><pubDate>Tue, 12 Mar 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/protobuf-datetime-timestamp/</guid><description>Protobuf 時間屬性該如何表示？ 最近的專案在跨 application 的溝通上捨去以往熟悉的 RESTful API 而採用 gRPC 做為溝通的 protocal，過去沒有相關使用經驗的我當然是踩雷不斷，</description></item><item><title>讓 .NET Core 的 HttpClientFactory 不驗證 Https 憑證</title><link>https://blog.yowko.com/dotnet-core-httpclientfactory-invalid-certificate/</link><pubDate>Wed, 06 Mar 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-core-httpclientfactory-invalid-certificate/</guid><description>讓 .NET Core 的 HttpClientFactory 不驗證 Https 憑證 Https 幾乎已成為了現在網站的基本配備，從過去只有敏感交易網站才需要，到現在瀏覽器還會把非 Https 網站標記為 不安全，而 .NET Core 程式在預</description></item><item><title>[Benchmark] 使用 C# 對 NoSQL insert 操作的效能數據</title><link>https://blog.yowko.com/nosql-insert-benchmark/</link><pubDate>Sun, 24 Feb 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/nosql-insert-benchmark/</guid><description>[Benchmark] 使用 C# 對 NoSQL insert 操作的效能數據 最近專案需要將收到的原始 request 內容直接儲存下來，以備日後有問題或是後續加工使用。 針對這類只有 insert 跟 select 操作的需要，過去大</description></item><item><title>使用 C# 存取 Riak</title><link>https://blog.yowko.com/csharp-riak/</link><pubDate>Sat, 23 Feb 2019 20:40:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-riak/</guid><description>使用 C# 存取 Riak 之前筆記 使用 C# 存取 Cassandra 提到想要將 log 存放至 NoSQL 中而正在嘗試某幾套 NoSQL，現在就來看看 Riak 的使用吧 基本環境說明 在 Windows 上使用 docker 建立 linux 版本 R</description></item><item><title>使用 C# 存取 PostgreSQL</title><link>https://blog.yowko.com/csharp-postgresql/</link><pubDate>Sun, 17 Feb 2019 20:40:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-postgresql/</guid><description>使用 C# 存取 PostgreSQL 之前筆記 使用 C# 存取 Cassandra 提到想要將 log 存放至 NoSQL 中而正在嘗試某幾套 NoSQL，現在就來看看 PostgreSQL 的使用吧 基本環境說明 在 mac 上使用 docker 建立 Post</description></item><item><title>使用 C# 存取 MongoDB</title><link>https://blog.yowko.com/csharp-mangodb/</link><pubDate>Sat, 16 Feb 2019 22:40:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-mangodb/</guid><description>使用 C# 存取 MongoDB 之前筆記 使用 C# 存取 Cassandra 提到想要將 log 存放至 NoSQL 中而正在嘗試某幾套 NoSQL，現在就來看看 MongoDB 的使用吧 基本環境說明 在 mac 上使用 docker 建立 Mong</description></item><item><title>使用 C# 存取 ArangoDB</title><link>https://blog.yowko.com/csharp-arangodb/</link><pubDate>Tue, 12 Feb 2019 22:40:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-arangodb/</guid><description>使用 C# 存取 ArangoDB 之前筆記 使用 C# 存取 Cassandra 提到想要將 log 存放至 NoSQL 中而正在嘗試某幾套 NoSQL，現在就來看看 ArangoDB 的使用吧 基本環境說明 在 mac 上使用 docker 建立 Aran</description></item><item><title>使用 C# 存取 RavenDB</title><link>https://blog.yowko.com/csharp-ravendb/</link><pubDate>Mon, 11 Feb 2019 22:45:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-ravendb/</guid><description>使用 C# 存取 RavenDB 之前筆記 使用 C# 存取 Cassandra 提到想要將 log 存放至 NoSQL 中而正在嘗試某幾套 NoSQL，現在就來看看 RavenDB 的使用吧 基本環境說明 在 mac 上使用 docker 建立 Rave</description></item><item><title>使用 C# 存取 CouchDB</title><link>https://blog.yowko.com/csharp-couchdb/</link><pubDate>Sun, 10 Feb 2019 23:43:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-couchdb/</guid><description>使用 C# 存取 CouchDB 之前筆記 使用 C# 存取 Cassandra 提到想要將 log 存放至 NoSQL 中而正在嘗試某幾套 NoSQL，現在就來看看 CouchDB 的使用吧 基本環境說明 在 mac 上使用 docker 建立 Couc</description></item><item><title>使用 C# 存取 Cassandra</title><link>https://blog.yowko.com/csharp-cassandra/</link><pubDate>Sat, 09 Feb 2019 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-cassandra/</guid><description>使用 C# 存取 Cassandra 公司專案因為流量龐大連帶也會產生大量 log，過去都是使用 local file 來儲存，但在 cluster 的環境下 log file 會散落在許多主機上，一旦需要查閱詳細內容或</description></item><item><title>使用 C# (.NET Core) 傳訊息至 Slack</title><link>https://blog.yowko.com/csharp-message-slack/</link><pubDate>Wed, 06 Feb 2019 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-message-slack/</guid><description>使用 C# (.NET Core) 傳訊息至 Slack 公司有個臨時性需求：某個重要功能開啟或是關閉時，立即通知營運團隊及各級主管知道，讓大家在討論 production issue 有共同的討論基準。 經過一</description></item><item><title>透過自訂 Attribute 標示屬性讓 Dapper 進行 json 轉換</title><link>https://blog.yowko.com/dapper-customattribute-typehandler/</link><pubDate>Thu, 17 Jan 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/dapper-customattribute-typehandler/</guid><description>透過自訂 Attribute 標示屬性讓 Dapper 進行 json 轉換 之前在筆記 使用 Dapper 將 json string 轉換為 object 紀錄到可以透過自訂 TypeHandler 讓 Dapper 可以將 db 內的值處理成需要的樣子(目前的用法是 db 欄位直接</description></item><item><title>在 .NET Core 與 .NET Framework 上使用 HttpClientFactory</title><link>https://blog.yowko.com/httpclient/</link><pubDate>Wed, 16 Jan 2019 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient/</guid><description>在 .NET Core 與 .NET Framework 上使用 HttpClientFactory 之前筆記 探討 HttpClient 可能的問題 與 HttpClient 無法反應 DNS 異動的解決方式 的出現是因為工作任務需要將一些重要訊息傳送至 Slack 而留意到 .NET Core 使用的 HttpClientFactory 是</description></item><item><title>在 ASP.NET MVC 5 中使用 ASP.NET Core Dependency Injection 與 HttpClientFactory</title><link>https://blog.yowko.com/aspnet-core-di-httpclientfactory-in-aspnet-mvc-5/</link><pubDate>Mon, 14 Jan 2019 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/aspnet-core-di-httpclientfactory-in-aspnet-mvc-5/</guid><description>在 ASP.NET MVC 5 中使用 ASP.NET Core Dependency Injection 與 HttpClientFactory 習慣了 ASP.NET Core DI 的寫法後，回到 ASP.NET MVC 5 後突然覺得不太適應，沒有 HttpClientFactory 都覺得 HttpClient 好像很容易出錯，於是試著研究研究，順手紀錄一下，</description></item><item><title>HttpClient 無法反應 DNS 異動的解決方式</title><link>https://blog.yowko.com/httpclient-not-respect-dns-change/</link><pubDate>Sat, 05 Jan 2019 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient-not-respect-dns-change/</guid><description>HttpClient 無法反應 DNS 異動的解決方式 之前筆記 探討 HttpClient 可能的問題 提到使用 HttpCLient 時避免 socket 耗盡的方式就是只建立一個 HttpClient instance (透過 static or singleton)，但這樣的方式</description></item><item><title>[Benchmark] DB 物件對映至 C# class 的做法</title><link>https://blog.yowko.com/object-relation-mapping/</link><pubDate>Tue, 01 Jan 2019 00:42:34 +0800</pubDate><guid>https://blog.yowko.com/object-relation-mapping/</guid><description>Benchmark : DB 物件對映至 C# class 的做法 跟同事討論到 ORM 的優劣，當然各有擁護的對象，但相同的目標卻很一致：速度快，而在 速度快 這個基本前提下，我個人覺得還有討</description></item><item><title>使用 Dapper 將 json string 轉換為 object</title><link>https://blog.yowko.com/dapper-json-string-to-object/</link><pubDate>Wed, 26 Dec 2018 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/dapper-json-string-to-object/</guid><description>使用 Dapper 將 json string 轉換為 object 同事設計物件儲存在 DB 的 schema 時將非核心功能屬性 (e.g. 畫面顯示用或是狀態表示用) 轉為 json 放在單一欄位中而不是一一建立欄位。我覺得超酷</description></item><item><title>探討 HttpClient 可能的問題</title><link>https://blog.yowko.com/httpclient-issue/</link><pubDate>Mon, 10 Dec 2018 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient-issue/</guid><description>探討 HttpClient 可能的問題 印象中前幾年曾經看過有文章提到 HttpClient 雖然是 disposable 但透過 using 來使用 HttpClient 卻反而可能出現問題，當時覺得網路文章多數仍是使用 using，於是我抱</description></item><item><title>在 .NET Core console 上使用 Dependency Injection - DI</title><link>https://blog.yowko.com/dotnet-core-console-di/</link><pubDate>Wed, 28 Nov 2018 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-core-console-di/</guid><description>在 .NET Core console 上使用 Dependency Injection - DI 開始撰寫 ASP.NET Core 後，對於整個開發流程雖然不至於陌生卻也一直覺得掌握度不足，尤其在習慣 ASP.NET Core 註冊及啟動流程後，突然要寫 .NET Core console application</description></item><item><title>如何擴充 enum ？</title><link>https://blog.yowko.com/extend-enum/</link><pubDate>Sun, 25 Nov 2018 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/extend-enum/</guid><description>如何擴充 enum ？ 同事問到可不可以擴充 enum ？！我的第一個反應：為什麼不行，就接著上個設定往下加不就好了？！ 不過立馬回過神來，如果這麼容易搞定，同事應</description></item><item><title>應該使用 IsNullOrEmpty 還是 IsNullOrWhiteSpace</title><link>https://blog.yowko.com/string-isnullorempty-isnullorwhitespace/</link><pubDate>Sat, 17 Nov 2018 00:42:34 +0800</pubDate><guid>https://blog.yowko.com/string-isnullorempty-isnullorwhitespace/</guid><description>應該使用 IsNullOrEmpty 還是 IsNullOrWhiteSpace 前幾天看到 Bruce 分享微軟內部團隊在 C# 寫作上的團隊規範 - #80 寫程式的參考準測 (coding guideline) - C# 篇，其中一點是 用 string.IsNullOrWhiteSpace() 來檢查字串是否為 null 或是空白，雖</description></item><item><title>如何使用 Blogger APIs Client Library for .NET 匯出 Blogger 文章</title><link>https://blog.yowko.com/dotnet-blogger-library/</link><pubDate>Sat, 15 Sep 2018 18:44:34 +0800</pubDate><guid>https://blog.yowko.com/dotnet-blogger-library/</guid><description>如何使用 Blogger APIs Client Library for .NET 匯出 Blogger 文章 雖然剛開始決定為自己的開發經驗做些筆記時就已經知道 Blogger 的一些缺點：無法為自訂 domain 加上 https (嘗試過使用 CloudFare ，直到幾個月前</description></item><item><title>取得 Redis 中指定 key 條件的筆數</title><link>https://blog.yowko.com/redis-key-count/</link><pubDate>Fri, 13 Jul 2018 02:40:00 +0800</pubDate><guid>https://blog.yowko.com/redis-key-count/</guid><description>取得 Redis 中指定 key 條件的筆數 公司有個流量很大的 ASP.NET MVC 網站仍在使用 Session，並利用 Redis 來儲存 Session 資訊，而近來的大型活動讓 Redis 壓力倍增，使用的 memory 是活動</description></item><item><title>使用 HttpClient 出現 ObjectDisposedException ？！</title><link>https://blog.yowko.com/httpclient-objectdisposedexception/</link><pubDate>Wed, 11 Jul 2018 22:52:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient-objectdisposedexception/</guid><description>使用 HttpClient 出現 ObjectDisposedException ？ 最近某個專案中有個需求需要對 partner 發出 http request，而 user 針對 request 出現 error 時希望加上 retry 機制：重試一次，結果就是這個重試一次的要求讓程</description></item><item><title>C# 搭配 MongoDB 的連線寫法</title><link>https://blog.yowko.com/mongodb-connectionstring/</link><pubDate>Sun, 10 Jun 2018 20:26:00 +0800</pubDate><guid>https://blog.yowko.com/mongodb-connectionstring/</guid><description>C# 搭配 MongoDB 的連線寫法 最近有個新專案需要儲存 json 格式的資料，MongoDB 是考慮的選項之一，評估的過程中才發現我沒有 C# 連線 MongoDB 的使用筆記，雖然專案時</description></item><item><title>C# 連線 Oracle 出現 ORA-01000: maximum open cursors exceeded</title><link>https://blog.yowko.com/oracle-maximum-open-cursors-exceeded/</link><pubDate>Thu, 07 Jun 2018 23:52:00 +0800</pubDate><guid>https://blog.yowko.com/oracle-maximum-open-cursors-exceeded/</guid><description>C# 連線 Oracle 出現 ORA-01000: maximum open cursors exceeded 同事負責的系統在 production 環境出現異常問題：原本系統已經運作了一段時間，某天突然出現 ORA-01000: maximum open cursors exceeded 造成相關功能無法運作，經過 IIS reset 後</description></item><item><title>不需安裝 Oracle client 使用 C# 搭配 Oracle.DataAccess 連線 Oracle</title><link>https://blog.yowko.com/oracleaccess-without-oracle-client/</link><pubDate>Thu, 31 May 2018 01:45:00 +0800</pubDate><guid>https://blog.yowko.com/oracleaccess-without-oracle-client/</guid><description>不需安裝 Oracle client 使用 C# 搭配 Oracle.DataAccess 連線 Oracle 之前公司電腦因為註冊檔毀損，讓電腦上的 Oracle client 一直無法正常運作，就算是重灌多次 Oracle client 還是一樣無法正確運作就連移除功能</description></item><item><title>讓 log4net 收到指定錯誤 Level 發送 mail</title><link>https://blog.yowko.com/log4net-mail/</link><pubDate>Sun, 27 May 2018 02:02:00 +0800</pubDate><guid>https://blog.yowko.com/log4net-mail/</guid><description>讓 log4net 收到指定錯誤 Level 發送 mail 平常我自己本身慣用的 log 套件是 nlog，主要原因是因為設定相對較簡潔，加上多年前看過的效能比較 - Benchmarking 5 popular .NET logging libraries 結果是 nlog 效</description></item><item><title>如何知道使用的 dll 是否需以 32 位元模式執行</title><link>https://blog.yowko.com/detect-dll-require-32bit/</link><pubDate>Tue, 08 May 2018 09:57:00 +0800</pubDate><guid>https://blog.yowko.com/detect-dll-require-32bit/</guid><description>如何知道使用的 dll 是否需以 32 位元模式執行 最近因為年度計畫預計做些 Windows server OS 的升級作業，將大部份 OS 升級為 Windows Server 2016，也順便整理 server 上的 applica</description></item><item><title>C# 使用 Dapper 連線 DB 時指定逾時時間 (timeout)：0x80004005</title><link>https://blog.yowko.com/dapper-timeout/</link><pubDate>Sun, 22 Apr 2018 23:34:00 +0800</pubDate><guid>https://blog.yowko.com/dapper-timeout/</guid><description>C# 使用 Dapper 連線 DB 時指定逾時時間 (timeout)：0x80004005 最近專案在 production 環境執行時常常遇到 [Win32Exception (0x80004005): The wait operation timed out]，造成程式未完整執行，</description></item><item><title>decimal , double , float 輸出 json 的格式問題</title><link>https://blog.yowko.com/decimal-double-float-json-format/</link><pubDate>Sun, 22 Apr 2018 17:42:00 +0800</pubDate><guid>https://blog.yowko.com/decimal-double-float-json-format/</guid><description>decimal , double , float 輸出 json 的格式問題 之前筆記 decimal 屬性輸出 JSON 時指定的格式問題 提到在專案中因為系統介接需要統一 decimal 小數位數，過程中也才發現 json.net 在輸出沒有小數的 decimal</description></item><item><title>decimal 屬性輸出 JSON 時指定的格式問題</title><link>https://blog.yowko.com/decimal-json-digital/</link><pubDate>Sat, 21 Apr 2018 00:14:00 +0800</pubDate><guid>https://blog.yowko.com/decimal-json-digital/</guid><description>decimal 屬性輸出 JSON 時指定的格式問題 這是之前專案遇到的狀況：輸出 金額 時只需處理到小數點下二位。既然是 金額，為了避免精準度造成的誤差都會選用 deciaml 資料類型</description></item><item><title>使用 Topshelf 搭配 Quartz.Net 撰寫 Windows Service 排程執行工作</title><link>https://blog.yowko.com/topshelf-quartznet-windows-service/</link><pubDate>Thu, 12 Apr 2018 21:00:00 +0800</pubDate><guid>https://blog.yowko.com/topshelf-quartznet-windows-service/</guid><description>使用 Topshelf 搭配 Quartz.Net 撰寫 Windows Service 排程執行工作 排程工作在許多系統中都是必備組件，常用來處理非立即性作業(e.g.：每日交易結清，發送電子報&amp;hellip;</description></item><item><title>使用 RedLock.net 搭配 redis 達成分散式 Lock</title><link>https://blog.yowko.com/redlocknet-redis-lock/</link><pubDate>Tue, 10 Apr 2018 01:31:00 +0800</pubDate><guid>https://blog.yowko.com/redlocknet-redis-lock/</guid><description>使用 RedLock.net 搭配 redis 達成分散式 Lock RedLock.net 是前兩個禮拜從安德魯大大的 架構面試題 #1, 線上交易的正確性 一文中看到使用 redis 搭配 RedLock 演算法製造出分散式鎖定 (Distributed locks) 的套件，也是</description></item><item><title>匯出 Excel 時使用多國語系 Resource 當做欄位名稱</title><link>https://blog.yowko.com/reflection-resource-culture/</link><pubDate>Fri, 06 Apr 2018 21:53:00 +0800</pubDate><guid>https://blog.yowko.com/reflection-resource-culture/</guid><description>匯出 Excel 時使用多國語系 Resource 當做欄位名稱 之前筆記 使用 C# 將資料匯出成 Excel (.xlsx) 紀錄到使用 ClosedXML 搭配 generic 與 reflection 匯出 excel，方便使用者自行調整資料報表 剛好有個系統</description></item><item><title>使用 C# 將資料匯出成 Excel (.xlsx)</title><link>https://blog.yowko.com/list-to-excel/</link><pubDate>Thu, 05 Apr 2018 22:17:00 +0800</pubDate><guid>https://blog.yowko.com/list-to-excel/</guid><description>使用 C# 將資料匯出成 Excel (.xlsx) 雖然大部份系統都會有報表相關功能，只是多數情況都無法在系統建置時就設想到所有使用者需求，加上常常功能需求的優先程度會被</description></item><item><title>使用 C# 將資料匯出為 CSV</title><link>https://blog.yowko.com/list-to-csv/</link><pubDate>Wed, 04 Apr 2018 15:21:00 +0800</pubDate><guid>https://blog.yowko.com/list-to-csv/</guid><description>使用 C# 將資料匯出為 CSV 最近有個需求是將部份資料內容倒進其他系統中，主要計劃是打算透過目標系統所開發的 restful api 來 insert 資料，但在實際透過 api 交換資料之前最</description></item><item><title>用 C# 將 PowerPoint 檔(.pptx .ppt) 轉換為 PDF</title><link>https://blog.yowko.com/ppt-to-pdf/</link><pubDate>Tue, 13 Mar 2018 01:30:00 +0800</pubDate><guid>https://blog.yowko.com/ppt-to-pdf/</guid><description>用 C# 將 PowerPoint 檔(.pptx .ppt) 轉換為 PDF 之前筆記 使用 C# 將 Word 檔(.docx .doc) 轉換為 PDF 紀錄到該如何使用 Word 內建 API 將 Word 轉存為 PDF，後來有網友問到 Excel 及 PowerPoint 轉存</description></item><item><title>使用 C# 將 Excel 檔(.xlsx .xls) 轉換為 PDF</title><link>https://blog.yowko.com/excel-to-pdf/</link><pubDate>Mon, 12 Mar 2018 21:00:00 +0800</pubDate><guid>https://blog.yowko.com/excel-to-pdf/</guid><description>使用 C# 將 Excel 檔(.xlsx .xls) 轉換為 PDF 之前筆記 使用 C# 將 Word 檔(.docx .doc) 轉換為 PDF 紀錄到該如何使用 Word 內建 API 將 Word 轉存為 PDF，後來有網友問到 Excel 及 PowerPoint 轉</description></item><item><title>C# DateTime 轉 JavaScript Date (依使用者偏好區域來顯示時間)</title><link>https://blog.yowko.com/csharp-datetime-javascript-date/</link><pubDate>Mon, 05 Feb 2018 00:17:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-datetime-javascript-date/</guid><description>C# DateTime 轉 JavaScript Date (依使用者偏好區域來顯示時間) 同事負責的頁面會有不同時區的 user 來瀏覽，時間類型的顯示會直接影響 user 的使用者體驗，尤其是各式公告跟有時效</description></item><item><title>Enum To List&lt;SelectListItem&gt; 及 Enum To SelectList</title><link>https://blog.yowko.com/enum-to-selectlist/</link><pubDate>Tue, 30 Jan 2018 02:53:00 +0800</pubDate><guid>https://blog.yowko.com/enum-to-selectlist/</guid><description>Enum To List&amp;lt;SelectListItem&amp;gt; 及 Enum To SelectList 無意間看到專案中的一段程式碼，讓我停頓了一下，一時之間好幾個念頭閃過卻不知道該選擇哪個做法來改善 大意是 View 中有個欄位資料型別是一</description></item><item><title>使用 C# 取出 Word (.docx) 中的內嵌 Office 物件</title><link>https://blog.yowko.com/extract-office-object-from-word/</link><pubDate>Thu, 18 Jan 2018 02:46:00 +0800</pubDate><guid>https://blog.yowko.com/extract-office-object-from-word/</guid><description>使用 C# 取出 Word (.docx) 中的內嵌 Office 物件 之前筆記 取得 Word(.docx) 中的內嵌檔案 紀錄到如何在 word 中嵌入其他物件，也提到如何簡易地取出內嵌物件 今天則是要紀錄如何使用 C# 將 Word</description></item><item><title>使用 C# 將 Word 檔(.docx .doc) 轉換為 PDF</title><link>https://blog.yowko.com/c-sharp-word-to-pdf/</link><pubDate>Thu, 04 Jan 2018 03:22:00 +0800</pubDate><guid>https://blog.yowko.com/c-sharp-word-to-pdf/</guid><description>使用 C# 將 Word 檔(.docx .doc) 轉換為 PDF 同事想要將 user 上傳的 word 檔轉換為 pdf，降低內容被篡改的機會，記憶中 word 轉存成 PDF 功能的程式碼並不多，但印象模糊，</description></item><item><title>不用安裝 Oracle Client 使用 C# 透過 tnsnamses.ora 連結 Oracle</title><link>https://blog.yowko.com/csharp-oracle-tns-without-client/</link><pubDate>Tue, 21 Nov 2017 23:11:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-oracle-tns-without-client/</guid><description>不用安裝 Oracle Client 使用 C# 透過 tnsnamses.ora 連結 Oracle 之前進公司時報到的第一天依公司前輩給的文件開始架設開發環境，大部份環境都很熟悉不用多久時間就完成安裝及設定，唯</description></item><item><title>使用 delagate 來進行多個條件驗證</title><link>https://blog.yowko.com/delegate-rule-check/</link><pubDate>Mon, 20 Nov 2017 21:57:00 +0800</pubDate><guid>https://blog.yowko.com/delegate-rule-check/</guid><description>使用 delagate 來進行多個條件驗證 今天跟同事討論到某個功能在實際執行前需要做一些商業邏輯檢查，確認符合所有規則才能繼續執行後面動作，同事本來使用多層 if</description></item><item><title>將 method 或是 class 標記為 internal 來限定專案使用</title><link>https://blog.yowko.com/limit-caller-method-class/</link><pubDate>Sun, 19 Nov 2017 21:11:00 +0800</pubDate><guid>https://blog.yowko.com/limit-caller-method-class/</guid><description>將 method 或是 class 標記為 internal 來限定專案使用 一般專案常常會有部份操作是的前後台行為相同或是極度類似的，如果這些行為雷同的程式分別置於前後台會讓程式碼顯得</description></item><item><title>C# 連線至 RabbitMQ Cluster - 使用 RabbitMQ .Net Client 及 EasyNetQ</title><link>https://blog.yowko.com/dotnet-client-rabbitmq-cluster/</link><pubDate>Sun, 20 Aug 2017 01:26:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-client-rabbitmq-cluster/</guid><description>C# 連線至 RabbitMQ Cluster - 使用 RabbitMQ .Net Client 及 EasyNetQ 之前文章 如何在 Windwos 上設定 RabbitMQ Cluster 介紹到透過建立 cluster 的方式來讓 RabbtMQ 可以擁有 HA ，而在 queue 及 message 完整性方面則利用 mirrored queue 的機制來處理，詳</description></item><item><title>客製 Json.NET 的 JsonConverter - 自動 Initial Value Type 屬性 (使用 JsonSerializer)</title><link>https://blog.yowko.com/jsonnet-jsonserializer-initial-value/</link><pubDate>Wed, 02 Aug 2017 23:42:00 +0800</pubDate><guid>https://blog.yowko.com/jsonnet-jsonserializer-initial-value/</guid><description>客製 Json.NET 的 JsonConverter - 自動 Initial Value Type 屬性 (使用 JsonSerializer) 之前文章 客製 Json.NET 的 JsonConverter - 自動 Initial Value Type 屬性 介紹到可以在使用自訂 JsonConverter 在將物件轉為 json 前先進行初始化 後來同事在使用自訂 JsonConverter 時</description></item><item><title>從 Json String 中取得物件的屬性值</title><link>https://blog.yowko.com/jobject-parse/</link><pubDate>Sun, 30 Jul 2017 23:55:00 +0800</pubDate><guid>https://blog.yowko.com/jobject-parse/</guid><description>從 Json String 中取得物件的屬性值 之前文章 使用 string 建立 instance 及反序列化 json 為 class 介紹到如何使用 string 產生 instance 及反序列化 json 為 class，後來同事看到寫法建議可以用 json.net 的 JObject.Parse</description></item><item><title>關於 GetType 的一些事</title><link>https://blog.yowko.com/gettype/</link><pubDate>Sun, 30 Jul 2017 22:30:00 +0800</pubDate><guid>https://blog.yowko.com/gettype/</guid><description>關於 GetType 的一些事 之前在 LINQ to Objects VS LINQ to Entities 中提到 LINQ to Objects 是一系列 IEnumerable 及 IEnumerable&amp;lt;T&amp;gt; 的擴充方法，而 LINQ to Entities 是一系統 IQueryable 及 IQueryable&amp;lt;T&amp;gt; 的擴充方法，透過物件繼承的型別可以很容易區分出</description></item><item><title>NuGet 發行 Package 時自動增加版號</title><link>https://blog.yowko.com/nuget-package-auto-version/</link><pubDate>Sat, 22 Jul 2017 23:56:00 +0800</pubDate><guid>https://blog.yowko.com/nuget-package-auto-version/</guid><description>NuGet 發行 Package 時自動增加版號 之前文章 Jenkins 自動 Publish NuGet Package 已經可以透過 Jenkins 將程式碼成品打包成 NuGet package，但文末也提到 NuGet 是使用 {id+版號} 當做唯一值，一</description></item><item><title>LINQ to Objects VS LINQ to Entities</title><link>https://blog.yowko.com/linq-to-objects-vs-linq-to-entities/</link><pubDate>Mon, 17 Jul 2017 23:20:00 +0800</pubDate><guid>https://blog.yowko.com/linq-to-objects-vs-linq-to-entities/</guid><description>LINQ to Objects VS LINQ to Entities 前幾天去參加 黃忠成 老師的 LINQ - 強者之道時，聽到忠成老師說 LINQ 有兩種行為：LINQ to Objects 與 LINQ to Entities。What！！用那麼久 L</description></item><item><title>使用 string 建立 instance 及反序列化 json 為 class</title><link>https://blog.yowko.com/string-create-instance/</link><pubDate>Thu, 13 Jul 2017 23:55:00 +0800</pubDate><guid>https://blog.yowko.com/string-create-instance/</guid><description>使用 string 建立 instance 及反序列化 json 為 class 最近的專案在架構拆分時，將可能可以共用的部份獨立設計成開放式的服務，將執行行為也當做輸入參數的一部份，直接交由使</description></item><item><title>Unit Test 想驗證 private static method 該怎麼做？ - 使用 PrivateType</title><link>https://blog.yowko.com/unit-test-static-method/</link><pubDate>Sun, 18 Jun 2017 21:26:00 +0800</pubDate><guid>https://blog.yowko.com/unit-test-static-method/</guid><description>Unit Test 想驗證 private static method 該怎麼做？ - 使用 PrivateType TDD 的第一天課程中就提到，以單元測試的角度 private method 不需單獨進行測試，在驗證 public 及 internal method 的過程中自然會涵蓋到 private or protected me</description></item><item><title>使用 HttpClient 來存取 GET,POST,PUT,DELETE,PATCH 網路資源</title><link>https://blog.yowko.com/how-to-use-httpclient/</link><pubDate>Wed, 14 Jun 2017 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/how-to-use-httpclient/</guid><description>使用 HttpClient 來存取 GET,POST,PUT,DELETE,PATCH 網路資源 之前文章 如何使用 WebRequest,HttpWebRequest 來存取 (GET,POST,PUT,DELETE,PATCH) 網路資源 紀錄 WebRequest,HttpWebRequest 的用法，使用 WebClient 來存取 GET,POST,PUT,DELETE,PATCH 網路資源 則紀錄了 WebClient 的用法，接著就是我所知的最後一個可以用</description></item><item><title>使用 WebClient 來存取 GET,POST,PUT,DELETE,PATCH 網路資源</title><link>https://blog.yowko.com/webclient/</link><pubDate>Tue, 13 Jun 2017 21:00:00 +0800</pubDate><guid>https://blog.yowko.com/webclient/</guid><description>使用 WebClient 來存取 GET,POST,PUT,DELETE,PATCH 網路資源 之前在專案中看到許多不同風格的程式，這種現象很常見，尤其在由來已久、團隊成員來來去去的專案中更是常發生，我並沒有太多想</description></item><item><title>製作 Selenium IDE 的 xUnit.net 2.0 版 Formatter</title><link>https://blog.yowko.com/selenium-ide-xunit-formatter/</link><pubDate>Wed, 07 Jun 2017 21:00:00 +0800</pubDate><guid>https://blog.yowko.com/selenium-ide-xunit-formatter/</guid><description>製作 Selenium IDE 的 xUnit.net 2.0 版 Formatter TDD 課程中，91 大介紹了 Selenium IDE 的用法，我的心得筆記請參考 使用 Selenium IDE 與 C# 做 Web UI 測試，因為 Selenium IDE 預設只支援 Nunit，所以 91 大動手做了</description></item><item><title>使用 Selenium IDE 與 C# 做 Web UI 測試</title><link>https://blog.yowko.com/selenium-ide-csharp-web-ui-test/</link><pubDate>Mon, 05 Jun 2017 21:00:00 +0800</pubDate><guid>https://blog.yowko.com/selenium-ide-csharp-web-ui-test/</guid><description>使用 Selenium IDE 與 C# 做 Web UI 測試 網頁 UI 及前端技術變化很快，也愈來愈專業，分工愈來愈細，除了前後端獨立的 unit test 之外，前後端介接完成後的整合測試也是重點之一</description></item><item><title>使用 .NET client 連線至 Apache Kafka 收發訊息</title><link>https://blog.yowko.com/kafka-client-produce-consume/</link><pubDate>Thu, 25 May 2017 01:00:00 +0800</pubDate><guid>https://blog.yowko.com/kafka-client-produce-consume/</guid><description>使用 .NET client 連線至 Apache Kafka 收發訊息 .NET Core 用法可以參考 讓 Kafka 達成 Broadcast 效果 繼之前紀錄 如何在 Windows OS 安裝 Apache Kafka 到現在默默地過了兩個月XD，直到最近才有時間可以再開始進</description></item><item><title>使用 .NET client 連線至 RabbitMQ 收發訊息</title><link>https://blog.yowko.com/rabbitmq-client-send-consume/</link><pubDate>Mon, 22 May 2017 23:35:00 +0800</pubDate><guid>https://blog.yowko.com/rabbitmq-client-send-consume/</guid><description>使用 .NET client 連線至 RabbitMQ 收發訊息 繼之前 使用 RabbitMQ.Client 連線至 RabbitMQ 出現 BrokerUnreachableException 問題解決後，終於又可以繼續測試 RabbitMQ 了，要比較的不僅僅是 mq 的能力，也要比較使用上的便利性及周邊</description></item><item><title>建構式中呼叫基底類別 (base class) 建構式傳入 Action 出現錯誤</title><link>https://blog.yowko.com/pass-action-base-constructor/</link><pubDate>Mon, 22 May 2017 22:29:00 +0800</pubDate><guid>https://blog.yowko.com/pass-action-base-constructor/</guid><description>建構式中呼叫基底類別 (base class) 建構式傳入 Action 出現錯誤 這是最近在重構程式時遇到的狀況，class B 繼承自 class A (class B:A)， class B 的建構式會在呼叫 class A 建構式</description></item><item><title>如何使用 StackExchange.Redis 取得所有 keys 值與指定 pattern 的 key</title><link>https://blog.yowko.com/stackexchange-redis-get-all-keys-or-pattern/</link><pubDate>Thu, 27 Apr 2017 01:00:00 +0800</pubDate><guid>https://blog.yowko.com/stackexchange-redis-get-all-keys-or-pattern/</guid><description>如何使用 StackExchange.Redis 取得所有 keys 值與指定 pattern 的 key 同事因專案需要打算將 redis 資料與 db 資料進行比對，為了要比對資料，首先就是將 redis 資料導出，所以需要取得所有 keys</description></item><item><title>如何客製化 Opserver - 使用不同帳號密碼來監控多台 Windows Server</title><link>https://blog.yowko.com/opserver-windows-server_multiple_auth/</link><pubDate>Thu, 30 Mar 2017 01:00:00 +0800</pubDate><guid>https://blog.yowko.com/opserver-windows-server_multiple_auth/</guid><description>如何客製化 Opserver - 使用不同帳號密碼來監控多台 Windows Server 之前文章 如何使用 Opserver 來監控 Windows Server 介紹該怎麼設定 Opserver 來監控 Windows Server，但我們也發現只能使用同一組帳號</description></item><item><title>如何使用 StackExchange.Redis 配合 Sentinel 或是 Cluster 達到高可用性</title><link>https://blog.yowko.com/stackexchange-redis-sentinel-cluster/</link><pubDate>Sat, 25 Mar 2017 02:44:34 +0800</pubDate><guid>https://blog.yowko.com/stackexchange-redis-sentinel-cluster/</guid><description>如何使用 StackExchange.Redis 配合 Sentinel 或是 Cluster 達到高可用性 前陣子公司其他 team 的同事遇到了 Redis 的 production issue，詳細情形我不好多問，大意是懷疑 Redis 異常，造成部份服務無法正常運</description></item><item><title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 5 使用動態條件與動態欄位</title><link>https://blog.yowko.com/net-framework-memorycache-5/</link><pubDate>Sat, 11 Mar 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/net-framework-memorycache-5/</guid><description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 5 使用動態條件與動態欄位 一直以為 使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 4 使用泛型來簡化 是 .NET MemoryCache 系列的最後一篇，壓根忘</description></item><item><title>如何使用 WebRequest,HttpWebRequest 來存取(GET,POST,PUT,DELETE,PATCH)網路資源</title><link>https://blog.yowko.com/webrequest-and-httpwebrequest/</link><pubDate>Thu, 09 Mar 2017 02:42:34 +0800</pubDate><guid>https://blog.yowko.com/webrequest-and-httpwebrequest/</guid><description>如何使用 WebRequest,HttpWebRequest 來存取(GET,POST,PUT,DELETE,PATCH)網路資源 現在雲端服務多元，很多系統設計上也都走向 api 化的架構，加上前端工</description></item><item><title>初探 Expression Tree</title><link>https://blog.yowko.com/expression-tree/</link><pubDate>Thu, 02 Mar 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/expression-tree/</guid><description>初探 Expression Tree 最近在重構取資料的邏輯，希望可以寫得更有彈性，所以開始使用 expression tree，雖然之前就有聽說 expression tree 很厲害，但總覺得好像不是一定要用，花時間就</description></item><item><title>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 5 (使用 Sorted Sets 型別)</title><link>https://blog.yowko.com/dotnet-redis-sorted-sets/</link><pubDate>Mon, 27 Feb 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/dotnet-redis-sorted-sets/</guid><description>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 5 (使用 Sorted Sets 型別) 今天來看看 Sorted Sets 該怎麼使用，建議可與 如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 4 (使用 Sets 型別) 參照 一樣</description></item><item><title>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 4 (使用 Sets 型別)</title><link>https://blog.yowko.com/dotnet-redis-sets/</link><pubDate>Sun, 26 Feb 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/dotnet-redis-sets/</guid><description>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 4 (使用 Sets 型別) 今天來看看 Sets 該怎麼使用，建議可與 如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 3 (使用 Lists 型別) 參照 先說重點</description></item><item><title>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 3 (使用 Lists 型別)</title><link>https://blog.yowko.com/dotnet-redis-lists/</link><pubDate>Thu, 23 Feb 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/dotnet-redis-lists/</guid><description>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 3 (使用 Lists 型別) 先前文章 如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 2 (使用 Hashes 型別) 使用了 Hashed 型別來 cache 資料，但總覺得不太清</description></item><item><title>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 2 (使用 Hashes 型別)</title><link>https://blog.yowko.com/dotnet-redis-hashes/</link><pubDate>Tue, 21 Feb 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/dotnet-redis-hashes/</guid><description>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 2 (使用 Hashes 型別) 在 如何在 .NET 程式中使用 Redis 做為 Cache Server 一文中把原本使用 .NET 的 MemoryCache 改為使用 Redis，其中用的是 Redis 最基本的</description></item><item><title>C# 如何用特定的 attribute 取得 property 資訊</title><link>https://blog.yowko.com/csharp-get-property-info-from-attribute/</link><pubDate>Mon, 20 Feb 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/csharp-get-property-info-from-attribute/</guid><description>C# 如何用特定的 attribute 取得 property 資訊 今天正在試著如何把自訂 method 寫得更彈性些，不要有太多 magic string 判斷，所以打算利用 attribute 做為媒介，印象中以前也做過這件事，所以筆記</description></item><item><title>使用 ConfigurationSection 自訂 ASP.NET config (web.config) 區段</title><link>https://blog.yowko.com/webconfig-customize-configurationsection/</link><pubDate>Sun, 19 Feb 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/webconfig-customize-configurationsection/</guid><description>使用 ConfigurationSection 自訂 ASP.NET config (web.config) 區段 不得不服老呀，一樣的功能二、三年前寫的時候還相當流暢，想不到這二、三年的光景過去，就搞得像是沒寫過一樣XD 乾脆當做沒寫過</description></item><item><title>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 1 (使用 Strings 型別)</title><link>https://blog.yowko.com/dotnet-redis-strings/</link><pubDate>Sat, 18 Feb 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/dotnet-redis-strings/</guid><description>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 1 (使用 Strings 型別) 在前面文章 使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 1 極簡做法 介紹了最簡單達到 cache 資料的方法，也使用 .NET Framework</description></item><item><title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 4 使用泛型來簡化</title><link>https://blog.yowko.com/net-framework-memorycache-4/</link><pubDate>Fri, 17 Feb 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/net-framework-memorycache-4/</guid><description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 4 使用泛型來簡化 經過第一篇文章 使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 1 極簡做法 介紹了最簡單達到 cache 資料的方法，也在 使</description></item><item><title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 2 使用 lock 避免 ddos db</title><link>https://blog.yowko.com/net-framework-memorycache-2/</link><pubDate>Thu, 16 Feb 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/net-framework-memorycache-2/</guid><description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 2 使用 lock 避免 ddos db 經過前一篇文章 使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 1 極簡做法 介紹了最簡單達到 cache 資料的方法，文末也</description></item><item><title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 3 隱藏的效能瓶頸</title><link>https://blog.yowko.com/net-framework-memorycache-3/</link><pubDate>Thu, 16 Feb 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/net-framework-memorycache-3/</guid><description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 3 隱藏的效能瓶頸 之前筆記 使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 2 使用 lock 避免 ddos db 解決程式可能 ddos db 的重大缺失，最近重新</description></item><item><title>C# 的跳躍語法( break continue goto 與 return)</title><link>https://blog.yowko.com/csharp-break-continue-goto-return/</link><pubDate>Tue, 14 Feb 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/csharp-break-continue-goto-return/</guid><description>C# 的跳躍語法( break continue goto 與 return) 最近看了一段程式，感覺跑的順序跟預期的不同，查了 msdn 文件，順手做了個紀錄。 文件請務必看英文版，中文版的錯很大，完全不是</description></item><item><title>C# reflection getProperty and getValue</title><link>https://blog.yowko.com/csharp-reflection-getproperty-getvalue/</link><pubDate>Tue, 14 Feb 2017 00:42:34 +0800</pubDate><guid>https://blog.yowko.com/csharp-reflection-getproperty-getvalue/</guid><description>C# reflection getProperty and getValue 你曾經想要把 object 中所有的 property name 跟內容都取出來確認嗎？如果每次程式跑 debug 都花個五分鐘，或是你跟我一樣急性子的話，你一定不會想在 debug 下一個一個</description></item><item><title>讓 EntityFramework 綁定自定 Enum 型別</title><link>https://blog.yowko.com/entityframework-enum-binding-class/</link><pubDate>Sun, 05 Feb 2017 00:42:34 +0800</pubDate><guid>https://blog.yowko.com/entityframework-enum-binding-class/</guid><description>讓 EntityFramework 綁定自定 Enum 型別 讓 EntityFramework 可以綁定自定 Enum 有兩個好處： 不用再自行轉換 int 跟 Enum 透過 scaffolding 可以直接綁定 dropdownlist，這讓我們在開發上節省不少工作</description></item><item><title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 2 使用 lock 避免 ddos db</title><link>https://blog.yowko.com/net-framework-memorycache-2/</link><pubDate>Tue, 31 Jan 2017 00:42:34 +0800</pubDate><guid>https://blog.yowko.com/net-framework-memorycache-2/</guid><description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 2 使用 lock 避免 ddos db 經過前一篇文章 使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 1 極簡做法 介紹了最簡單達到 cache 資料的方法，文末也</description></item><item><title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 1 極簡做法</title><link>https://blog.yowko.com/net-framework-memorycache-1/</link><pubDate>Mon, 30 Jan 2017 00:42:34 +0800</pubDate><guid>https://blog.yowko.com/net-framework-memorycache-1/</guid><description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 1 極簡做法 程式多多少少有些資料或設定是經常需要使用的，如果這些資料異動頻率低的特性就可以考慮將其加入 cach</description></item><item><title>Enum in C#</title><link>https://blog.yowko.com/enum-in-c-sharp/</link><pubDate>Sun, 29 Jan 2017 00:42:34 +0800</pubDate><guid>https://blog.yowko.com/enum-in-c-sharp/</guid><description>Enum in C# 最近跟同事討論 enum 相關應用時剛好同事問到 enum 可以用什麼型別，無奈學藝不精沒有答出完整正確答案XD，剛好趁這個機會順便整理一下。 基本特性 名稱</description></item><item><title>字串處理速度比較：&#43; 運算符、string.Format、string.Concat、字串插值(String Interpolation)</title><link>https://blog.yowko.com/stringformat-stringconcat-stringintepolation/</link><pubDate>Thu, 05 Jan 2017 00:42:34 +0800</pubDate><guid>https://blog.yowko.com/stringformat-stringconcat-stringintepolation/</guid><description>字串處理速度比較：+ 運算符、string.Format、string.Concat、字串插值(String Interpolation) c# 6.0 多了一個方便處理字串的語法糖</description></item><item><title>decimal 在 C# 中的隱含轉換建構式</title><link>https://blog.yowko.com/decimal-constructor-with-char/</link><pubDate>Sat, 24 Dec 2016 00:42:34 +0800</pubDate><guid>https://blog.yowko.com/decimal-constructor-with-char/</guid><description>decimal 在 C# 中的隱含轉換建構式 最近有個工作項目是將原本 jsp 的金流相關功能，搬遷到 C# 上 重要性不言可喻，加下小弟寫 java 的時間並不長，還是寫 android，</description></item><item><title>C# 解析 XML 字串(C# Parse XML string)</title><link>https://blog.yowko.com/c-sharp-parse-xml-string/</link><pubDate>Tue, 20 Dec 2016 00:42:34 +0800</pubDate><guid>https://blog.yowko.com/c-sharp-parse-xml-string/</guid><description>C# 解析 XML 字串(C# Parse XML string) 最近在介紹第三方金流服務時，廠商使用 XML 回傳，有段時間沒處理 XML，剛收到時還愣了一下，突然間想不起來該怎麼做，看來有</description></item></channel></rss>