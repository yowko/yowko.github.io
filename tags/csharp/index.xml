<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>csharp on Yowko&#39;s Notes</title><link>https://blog.yowko.com/tags/csharp/</link><description>Recent content in csharp on Yowko&#39;s Notes</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 25 Oct 2021 00:39:29 +0800</lastBuildDate><atom:link href="https://blog.yowko.com/tags/csharp/index.xml" rel="self" type="application/rss+xml"/><item><title>RedLock.net 使用 StackExchange.Redis 的連線設定</title><link>https://blog.yowko.com/redlock-stackexchange-redis-connection/</link><pubDate>Mon, 25 Oct 2021 00:39:29 +0800</pubDate><guid>https://blog.yowko.com/redlock-stackexchange-redis-connection/</guid><description>RedLock.net 使用 StackExchange.Redis 的連線設定 最近專案發現在大量並行處理時會出現重複建立資料的狀況，因為這個專案本來就是設計來進行分散式作業，同時會建立好幾個 instance 在不同的</description></item><item><title>ASP.NET Core 中 StackExchange.Redis 的註冊與使用方式</title><link>https://blog.yowko.com/stackexchange-redis-in-aspdotnet-core/</link><pubDate>Fri, 22 Oct 2021 00:39:29 +0800</pubDate><guid>https://blog.yowko.com/stackexchange-redis-in-aspdotnet-core/</guid><description>ASP.NET Core 註冊 StackExchange.Redis 的方式 最近有個專案需要用到 RedLock.net，在做可行性評估時發現 StackExchange.Redis 有幾個註冊方式自己都沒有紀錄過，趁著工作空檔簡單筆記一下 基</description></item><item><title>個別 HttpClient request 使用不同 Timeout 時間</title><link>https://blog.yowko.com/httpclient-different-timeout/</link><pubDate>Wed, 25 Aug 2021 12:30:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient-different-timeout/</guid><description>個別 HttpClient request 使用不同 Timeout 時間 在透過 HttpClient 與 partner 介接時，常會使用同一個 named-client 來建立 instance，這也是可以共用 pool 與 存留期設定的推薦方式，雖然可以在 AddHttpClient 時加上</description></item><item><title>C# Socket 使用 proxy 連線</title><link>https://blog.yowko.com/csharp-socket-proxy/</link><pubDate>Mon, 23 Aug 2021 12:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-socket-proxy/</guid><description>C# Socket 使用 proxy 連線 合作的 partner 在資料介接上提供 socket 的接口來確保資料更新的即時性，但為了有基本安全性所以只允許 whitelist server 可以連線，這在 production server 是很常見的限制，甚至</description></item><item><title>HttpClient 使用 Polly 做 Timeout 重試</title><link>https://blog.yowko.com/httpclient-polly-timeout-retry/</link><pubDate>Wed, 28 Jul 2021 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient-polly-timeout-retry/</guid><description>HttpClient 使用 Polly 做 Timeout 重試 之前使用 HttpClient 做了一個內部的網頁回應偵測工具，原本沒有調整預設的 Timeout 時間 (預設為 100,000 毫秒 = 100 秒，相關說明可以參考 Microsoft docs:HttpClient.Timeout 屬性)，為了更即</description></item><item><title>使用 HttpClient 傳送檔案</title><link>https://blog.yowko.com/httpclient-file/</link><pubDate>Tue, 27 Jul 2021 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient-file/</guid><description>使用 HttpClient 傳送檔案 最近專案有個需求要將系統畫面 透過 RESTFul API 傳給其他平台做紀錄，這才發現這功能雖然過去待在專案公司時常做，但時間一久覺得好陌生，猛然發</description></item><item><title>HttpClient 使用 URL Parameters (Query Strings) 的方式</title><link>https://blog.yowko.com/httpclient-url-parameter/</link><pubDate>Sat, 24 Jul 2021 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient-url-parameter/</guid><description>HttpClient 使用 URL Parameters (Query Strings) 的方式 前陣子有個跟其他系統介接的需求，因為手上工作太滿，先由前端的同事使用 Node.js 開發，過陣子再接手改用 C# 開發；其中有個功能需要 post 幾</description></item><item><title>讓特定 message 在 kafka 中可以有順序性</title><link>https://blog.yowko.com/kafka-message-immutable-sequence/</link><pubDate>Sat, 25 Jul 2020 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/kafka-message-immutable-sequence/</guid><description>讓特定 message 在 kafka 中可以有順序性 之前專案為了保證 message 的順序性捨棄當時還在 0.8 版的 kafka 而選用 RabbitMQ，雖然 RabbitMQ 在效能數據上跟 kafka 不是同個量級水準，但已</description></item><item><title>[C#] 將 .NET Core 中的 Configuration 輸出為 JSON</title><link>https://blog.yowko.com/configuration-to-json/</link><pubDate>Sat, 08 Feb 2020 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/configuration-to-json/</guid><description>[C#] 將 .NET Core 中的 Configuration 輸出為 JSON 之前筆記 [C#] 將 Dictionary 轉為 JSON 紀錄到 將 Dictionary 轉為 JSON 的方式，對 .NET Core 有些認識的朋友馬上就想到是為了處理 .NET Core Configuration，主</description></item><item><title>[C#] 將 Dictionary 轉為 JSON</title><link>https://blog.yowko.com/dictionary-to-json/</link><pubDate>Sun, 02 Feb 2020 14:30:00 +0800</pubDate><guid>https://blog.yowko.com/dictionary-to-json/</guid><description>[C#] 將 Dictionary 轉為 JSON 之前筆記 [C#] 將 JSON 轉為 Dictionary 紀錄到如果將 JSON file 轉為 C# 的 Dictionary 來做後續加工處理，當然有 JSON to Dictionary 就需要有 Dictionary to JSON 囉 基本環境說明 macOS Catalina 10.15.2 .NET Core SDK 3.1.101 C# 8.0 程式碼</description></item><item><title>[C#] 將 JSON 轉為 Dictionary</title><link>https://blog.yowko.com/json-to-dictionary/</link><pubDate>Sat, 01 Feb 2020 14:30:00 +0800</pubDate><guid>https://blog.yowko.com/json-to-dictionary/</guid><description>[C#] 將 JSON 轉為 Dictionary 使用 JSON 做為避免在程式中寫死固定值的解決方案是種常見做法，不過一旦系統日漸龐大複雜起來時，可能就需要有良好的管理方式或是流程，像是</description></item><item><title>C# 使用 Lua 取得 Redis 自訂複雜型別</title><link>https://blog.yowko.com/csharp-lua-redis-custom-type/</link><pubDate>Mon, 09 Dec 2019 22:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-lua-redis-custom-type/</guid><description>C# 使用 Lua 取得 Redis 自訂複雜型別 之前筆記 在 Redis 中使用 Lua 的 Dictionary 紀錄到在 Redis 中使用 Lua 時可以如何模擬並使用 Dictionary，而筆記最後也提到透過這樣的方式</description></item><item><title>C# - Property 與 Value 的 Dictionary 轉為 Object</title><link>https://blog.yowko.com/property-value-dictionary-to-object/</link><pubDate>Mon, 09 Dec 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/property-value-dictionary-to-object/</guid><description>C# - Property 與 Value 的 Dictionary 轉為 Object 之前筆記 C# - 將 Object 的 Property 與 Value 轉換為 Dictionary 紀錄到將 C# object 的 property name 與 value 透過 dictionary 的資料型態存放，當時主要是為了配合 InfluxDB 的 insert 而做的筆記 ，想不到時</description></item><item><title>Polly retry 之後的行為是？</title><link>https://blog.yowko.com/polly-after-retry/</link><pubDate>Sun, 01 Dec 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/polly-after-retry/</guid><description>Polly retry 之後的行為是？ 同事在追查 bug 時，問到在執行某個動作時使用的 Polly policy 來進行失敗重試，如果 policy 中設定的 retry 次數結束仍然失敗會發生什麼事？ 印象中之前測試</description></item><item><title>C# (.NET Core 2) 啟用 gRPC 壓縮</title><link>https://blog.yowko.com/dotnet-core-2-grpc-compression/</link><pubDate>Sat, 16 Nov 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-core-2-grpc-compression/</guid><description>C# (.NET Core 2) 啟用 gRPC 壓縮 目前專案在大資料量傳遞時會透過 gRPC stream，不過因為是非對稱式資料內容，採用 chunk byte 來傳輸，以避免單次 gRPC 的 message size 限制問題，但以</description></item><item><title>C# (.NET Core 2) Log 與 Trace gRPC</title><link>https://blog.yowko.com/dotnet-core-2-log-grpc/</link><pubDate>Tue, 12 Nov 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-core-2-log-grpc/</guid><description>C# (.NET Core 2) Log 與 Trace gRPC gRPC 在 .NET Core 3 被官方宣告重點發展項目之一，而身為追求系統更快更好又愛嚐鮮的工程師團隊的一員，早在一年前的 .NET Core 2 專案中就用上了 gR</description></item><item><title>[Benchmark] 使用 C# 對 InfluxDB insert 操作的效能數據</title><link>https://blog.yowko.com/csharp-influxdb-benchmark/</link><pubDate>Sun, 22 Sep 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-influxdb-benchmark/</guid><description>[Benchmark] 使用 C# 對 InfluxDB insert 操作的效能數據 之前筆記 使用 C# 存取 InfluxDB 紀錄了 C# 在 InfluxDB 的基本 CRUD，也提到新專案可能會使用 InfluxDB 儲存資料，在了解 C# 的基本用法後接著就來確</description></item><item><title>C# - 將 Object 的 Property 與 Value 轉換為 Dictionary</title><link>https://blog.yowko.com/csharp-object-to-dictionary/</link><pubDate>Sat, 21 Sep 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-object-to-dictionary/</guid><description>C# - 將 Object 的 Property 與 Value 轉換為 Dictionary 之前筆記 使用 C# 存取 InfluxDB 提到正在嘗試導入 InfluxDB，POC 使用到的 library - InfluxData.Net 在儲存資料時僅接受 Dictionary，如</description></item><item><title>需要在 return 前自行 new ValueTask 嗎？</title><link>https://blog.yowko.com/new-valuetask-or-not/</link><pubDate>Sun, 11 Aug 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/new-valuetask-or-not/</guid><description>需要在 return 前自行 new ValueTask 嗎？ 上個月黑大的 閱讀筆記 - 使用 .NET Async/Await 的常見錯誤 跟同事討論起 ValueTask 的用法，大意是 ValueTask 在使用上只需要將方法簽章改為 ValueTask&amp;lt;T&amp;gt; 就好嗎？ 還是應該在</description></item><item><title>Test 中驗證 Object 是否相同的方法</title><link>https://blog.yowko.com/object-compare-in-test/</link><pubDate>Tue, 23 Jul 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/object-compare-in-test/</guid><description>Test 中驗證 Object 是否相同的方法 最近花了不少時間在重構先前專案中的 Unit Test 與 Integration Test，其中對於 reference type 的物件比對有幾種不同的寫法 當然我個人大多配合團隊規範</description></item><item><title>gRPC stream 如何傳送單一大物件</title><link>https://blog.yowko.com/grpc-stream-big-object/</link><pubDate>Sun, 07 Jul 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-stream-big-object/</guid><description>gRPC stream 如何傳送單一大物件 之前筆記 C# 搭配 gRPC 中使用 stream RPC 提到為了對於較大資料量以及即時性資料內容，可以透過 gRPC 的 stream RPC 來處理，不過官方範例是用在傳送 repeated 內</description></item><item><title>C# 中使用 Protocol Buffers 協定來序列化與反序列化物件</title><link>https://blog.yowko.com/csharp-protobuf-serialize-deserialize/</link><pubDate>Sat, 06 Jul 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-protobuf-serialize-deserialize/</guid><description>C# 中使用 Protocol Buffers 協定來序列化與反序列化物件 專案上剛好需要將 object 進行序列化，過去常用的方式都是序列為 json，後來同事覺得既然都使用 protobuf 了，為什麼不直</description></item><item><title>gRPC 出現 `8 RESOURCE_EXHAUSTED` 錯誤</title><link>https://blog.yowko.com/grpc-8-resource-exhausted/</link><pubDate>Sun, 23 Jun 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-8-resource-exhausted/</guid><description>gRPC 出現 8 RESOURCE_EXHAUSTED 錯誤 隨著系統一步步成形，資料量也愈來愈大，在原本只是先求功能正常而未進行資料分頁的功能逐漸露出原型，今天就來筆記 gRPC 在傳送龐大資料可</description></item><item><title>嘗試為gRPC 中的 stream RPC 加上 Unit Test</title><link>https://blog.yowko.com/csharp-grpc-stream-unit-test/</link><pubDate>Wed, 19 Jun 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-grpc-stream-unit-test/</guid><description>嘗試為gRPC 中的 stream RPC 加上 Unit Test 之前筆記 C# 搭配 gRPC 中使用 stream RPC 紀錄到在 gRPC 中使用 stream RPC 的操作語法，但實際應用在專案上時卻卡關，主因是單元測試出現錯誤，</description></item><item><title>C# 搭配 gRPC 中使用 stream RPC</title><link>https://blog.yowko.com/csharp-grpc-stream/</link><pubDate>Sun, 16 Jun 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-grpc-stream/</guid><description>C# 搭配 gRPC 中使用 stream RPC gRPC 允許使用四種則型的 service 方法： 簡單 RPC (simple RPC) 主機端串流 RPC (server-side streaming RPC) 用戶端串流 RPC (client-side streaming RPC) 雙向串流 RPC (bidirectional streaming RPC) 過去的筆記都是使用 簡單 RPC (simple RPC</description></item><item><title>TimeZoneInfo 在 Mac/Linux 找不到 time zone ID</title><link>https://blog.yowko.com/timezoneinfo-time-zone-id-not-found/</link><pubDate>Fri, 10 May 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/timezoneinfo-time-zone-id-not-found/</guid><description>TimeZoneInfo 在 Mac/Linux 找不到指定 time zone ID 同事提到 TimeZoneInfo 的操作在 Linux server 會出現錯誤，想說我怎麼沒遇到立馬試試，於是發現原來是 time zone ID 在 Windows 與 Linux 不同造成的 XD 雖說可以理解，但不</description></item><item><title>在 .NET Core 與 .NET Framework 上使用 HttpClientFactory</title><link>https://blog.yowko.com/httpclient/</link><pubDate>Wed, 16 Jan 2019 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient/</guid><description>在 .NET Core 與 .NET Framework 上使用 HttpClientFactory 之前筆記 探討 HttpClient 可能的問題 與 HttpClient 無法反應 DNS 異動的解決方式 的出現是因為工作任務需要將一些重要訊息傳送至 Slack 而留意到 .NET Core 使用的 HttpClientFactory 是</description></item><item><title>應該使用 IsNullOrEmpty 還是 IsNullOrWhiteSpace</title><link>https://blog.yowko.com/string-isnullorempty-isnullorwhitespace/</link><pubDate>Sat, 17 Nov 2018 00:42:34 +0800</pubDate><guid>https://blog.yowko.com/string-isnullorempty-isnullorwhitespace/</guid><description>應該使用 IsNullOrEmpty 還是 IsNullOrWhiteSpace 前幾天看到 Bruce 分享微軟內部團隊在 C# 寫作上的團隊規範 - #80 寫程式的參考準測 (coding guideline) - C# 篇，其中一點是 用 string.IsNullOrWhiteSpace() 來檢查字串是否為 null 或是空白，雖</description></item><item><title>取得 Redis 中指定 key 條件的筆數</title><link>https://blog.yowko.com/redis-key-count/</link><pubDate>Fri, 13 Jul 2018 02:40:00 +0800</pubDate><guid>https://blog.yowko.com/redis-key-count/</guid><description>取得 Redis 中指定 key 條件的筆數 公司有個流量很大的 ASP.NET MVC 網站仍在使用 Session，並利用 Redis 來儲存 Session 資訊，而近來的大型活動讓 Redis 壓力倍增，使用的 memory 是活動</description></item><item><title>使用 Topshelf 搭配 Quartz.Net 撰寫 Windows Service 排程執行工作</title><link>https://blog.yowko.com/topshelf-quartznet-windows-service/</link><pubDate>Thu, 12 Apr 2018 21:00:00 +0800</pubDate><guid>https://blog.yowko.com/topshelf-quartznet-windows-service/</guid><description>使用 Topshelf 搭配 Quartz.Net 撰寫 Windows Service 排程執行工作 排程工作在許多系統中都是必備組件，常用來處理非立即性作業(e.g.：每日交易結清，發送電子報&amp;hellip;</description></item><item><title>使用 RedLock.net 搭配 redis 達成分散式 Lock</title><link>https://blog.yowko.com/redlocknet-redis-lock/</link><pubDate>Tue, 10 Apr 2018 01:31:00 +0800</pubDate><guid>https://blog.yowko.com/redlocknet-redis-lock/</guid><description>使用 RedLock.net 搭配 redis 達成分散式 Lock RedLock.net 是前兩個禮拜從安德魯大大的 架構面試題 #1, 線上交易的正確性 一文中看到使用 redis 搭配 RedLock 演算法製造出分散式鎖定 (Distributed locks) 的套件，也是</description></item><item><title>匯出 Excel 時使用多國語系 Resource 當做欄位名稱</title><link>https://blog.yowko.com/reflection-resource-culture/</link><pubDate>Fri, 06 Apr 2018 21:53:00 +0800</pubDate><guid>https://blog.yowko.com/reflection-resource-culture/</guid><description>匯出 Excel 時使用多國語系 Resource 當做欄位名稱 之前筆記 使用 C# 將資料匯出成 Excel (.xlsx) 紀錄到使用 ClosedXML 搭配 generic 與 reflection 匯出 excel，方便使用者自行調整資料報表 剛好有個系統</description></item><item><title>使用 C# 取出 Word (.docx) 中的內嵌 Office 物件</title><link>https://blog.yowko.com/extract-office-object-from-word/</link><pubDate>Thu, 18 Jan 2018 02:46:00 +0800</pubDate><guid>https://blog.yowko.com/extract-office-object-from-word/</guid><description>使用 C# 取出 Word (.docx) 中的內嵌 Office 物件 之前筆記 取得 Word(.docx) 中的內嵌檔案 紀錄到如何在 word 中嵌入其他物件，也提到如何簡易地取出內嵌物件 今天則是要紀錄如何使用 C# 將 Word</description></item><item><title>使用 string 建立 instance 及反序列化 json 為 class</title><link>https://blog.yowko.com/string-create-instance/</link><pubDate>Thu, 13 Jul 2017 23:55:00 +0800</pubDate><guid>https://blog.yowko.com/string-create-instance/</guid><description>使用 string 建立 instance 及反序列化 json 為 class 最近的專案在架構拆分時，將可能可以共用的部份獨立設計成開放式的服務，將執行行為也當做輸入參數的一部份，直接交由使</description></item><item><title>Unit Test 想驗證 private static method 該怎麼做？ - 使用 PrivateType</title><link>https://blog.yowko.com/unit-test-static-method/</link><pubDate>Sun, 18 Jun 2017 21:26:00 +0800</pubDate><guid>https://blog.yowko.com/unit-test-static-method/</guid><description>Unit Test 想驗證 private static method 該怎麼做？ - 使用 PrivateType TDD 的第一天課程中就提到，以單元測試的角度 private method 不需單獨進行測試，在驗證 public 及 internal method 的過程中自然會涵蓋到 private or protected me</description></item><item><title>使用 HttpClient 來存取 GET,POST,PUT,DELETE,PATCH 網路資源</title><link>https://blog.yowko.com/how-to-use-httpclient/</link><pubDate>Wed, 14 Jun 2017 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/how-to-use-httpclient/</guid><description>使用 HttpClient 來存取 GET,POST,PUT,DELETE,PATCH 網路資源 之前文章 如何使用 WebRequest,HttpWebRequest 來存取 (GET,POST,PUT,DELETE,PATCH) 網路資源 紀錄 WebRequest,HttpWebRequest 的用法，使用 WebClient 來存取 GET,POST,PUT,DELETE,PATCH 網路資源 則紀錄了 WebClient 的用法，接著就是我所知的最後一個可以用</description></item><item><title>使用 WebClient 來存取 GET,POST,PUT,DELETE,PATCH 網路資源</title><link>https://blog.yowko.com/webclient/</link><pubDate>Tue, 13 Jun 2017 21:00:00 +0800</pubDate><guid>https://blog.yowko.com/webclient/</guid><description>使用 WebClient 來存取 GET,POST,PUT,DELETE,PATCH 網路資源 之前在專案中看到許多不同風格的程式，這種現象很常見，尤其在由來已久、團隊成員來來去去的專案中更是常發生，我並沒有太多想</description></item><item><title>製作 Selenium IDE 的 xUnit.net 2.0 版 Formatter</title><link>https://blog.yowko.com/selenium-ide-xunit-formatter/</link><pubDate>Wed, 07 Jun 2017 21:00:00 +0800</pubDate><guid>https://blog.yowko.com/selenium-ide-xunit-formatter/</guid><description>製作 Selenium IDE 的 xUnit.net 2.0 版 Formatter TDD 課程中，91 大介紹了 Selenium IDE 的用法，我的心得筆記請參考 使用 Selenium IDE 與 C# 做 Web UI 測試，因為 Selenium IDE 預設只支援 Nunit，所以 91 大動手做了</description></item><item><title>使用 Selenium IDE 與 C# 做 Web UI 測試</title><link>https://blog.yowko.com/selenium-ide-csharp-web-ui-test/</link><pubDate>Mon, 05 Jun 2017 21:00:00 +0800</pubDate><guid>https://blog.yowko.com/selenium-ide-csharp-web-ui-test/</guid><description>使用 Selenium IDE 與 C# 做 Web UI 測試 網頁 UI 及前端技術變化很快，也愈來愈專業，分工愈來愈細，除了前後端獨立的 unit test 之外，前後端介接完成後的整合測試也是重點之一</description></item><item><title>使用 .NET client 連線至 RabbitMQ 收發訊息</title><link>https://blog.yowko.com/rabbitmq-client-send-consume/</link><pubDate>Mon, 22 May 2017 23:35:00 +0800</pubDate><guid>https://blog.yowko.com/rabbitmq-client-send-consume/</guid><description>使用 .NET client 連線至 RabbitMQ 收發訊息 繼之前 使用 RabbitMQ.Client 連線至 RabbitMQ 出現 BrokerUnreachableException 問題解決後，終於又可以繼續測試 RabbitMQ 了，要比較的不僅僅是 mq 的能力，也要比較使用上的便利性及周邊</description></item><item><title>如何使用 StackExchange.Redis 取得所有 keys 值與指定 pattern 的 key</title><link>https://blog.yowko.com/stackexchange-redis-get-all-keys-or-pattern/</link><pubDate>Thu, 27 Apr 2017 01:00:00 +0800</pubDate><guid>https://blog.yowko.com/stackexchange-redis-get-all-keys-or-pattern/</guid><description>如何使用 StackExchange.Redis 取得所有 keys 值與指定 pattern 的 key 同事因專案需要打算將 redis 資料與 db 資料進行比對，為了要比對資料，首先就是將 redis 資料導出，所以需要取得所有 keys</description></item><item><title>如何使用 StackExchange.Redis 配合 Sentinel 或是 Cluster 達到高可用性</title><link>https://blog.yowko.com/stackexchange-redis-sentinel-cluster/</link><pubDate>Sat, 25 Mar 2017 02:44:34 +0800</pubDate><guid>https://blog.yowko.com/stackexchange-redis-sentinel-cluster/</guid><description>如何使用 StackExchange.Redis 配合 Sentinel 或是 Cluster 達到高可用性 前陣子公司其他 team 的同事遇到了 Redis 的 production issue，詳細情形我不好多問，大意是懷疑 Redis 異常，造成部份服務無法正常運</description></item><item><title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 5 使用動態條件與動態欄位</title><link>https://blog.yowko.com/net-framework-memorycache-5/</link><pubDate>Sat, 11 Mar 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/net-framework-memorycache-5/</guid><description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 5 使用動態條件與動態欄位 一直以為 使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 4 使用泛型來簡化 是 .NET MemoryCache 系列的最後一篇，壓根忘</description></item><item><title>如何使用 WebRequest,HttpWebRequest 來存取(GET,POST,PUT,DELETE,PATCH)網路資源</title><link>https://blog.yowko.com/webrequest-and-httpwebrequest/</link><pubDate>Thu, 09 Mar 2017 02:42:34 +0800</pubDate><guid>https://blog.yowko.com/webrequest-and-httpwebrequest/</guid><description>如何使用 WebRequest,HttpWebRequest 來存取(GET,POST,PUT,DELETE,PATCH)網路資源 現在雲端服務多元，很多系統設計上也都走向 api 化的架構，加上前端工</description></item><item><title>使用 ConfigurationSection 自訂 ASP.NET config (web.config) 區段</title><link>https://blog.yowko.com/webconfig-customize-configurationsection/</link><pubDate>Sun, 19 Feb 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/webconfig-customize-configurationsection/</guid><description>使用 ConfigurationSection 自訂 ASP.NET config (web.config) 區段 不得不服老呀，一樣的功能二、三年前寫的時候還相當流暢，想不到這二、三年的光景過去，就搞得像是沒寫過一樣XD 乾脆當做沒寫過</description></item><item><title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 4 使用泛型來簡化</title><link>https://blog.yowko.com/net-framework-memorycache-4/</link><pubDate>Fri, 17 Feb 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/net-framework-memorycache-4/</guid><description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 4 使用泛型來簡化 經過第一篇文章 使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 1 極簡做法 介紹了最簡單達到 cache 資料的方法，也在 使</description></item><item><title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 2 使用 lock 避免 ddos db</title><link>https://blog.yowko.com/net-framework-memorycache-2/</link><pubDate>Thu, 16 Feb 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/net-framework-memorycache-2/</guid><description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 2 使用 lock 避免 ddos db 經過前一篇文章 使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 1 極簡做法 介紹了最簡單達到 cache 資料的方法，文末也</description></item><item><title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 3 隱藏的效能瓶頸</title><link>https://blog.yowko.com/net-framework-memorycache-3/</link><pubDate>Thu, 16 Feb 2017 01:42:34 +0800</pubDate><guid>https://blog.yowko.com/net-framework-memorycache-3/</guid><description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 3 隱藏的效能瓶頸 之前筆記 使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 2 使用 lock 避免 ddos db 解決程式可能 ddos db 的重大缺失，最近重新</description></item><item><title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 1 極簡做法</title><link>https://blog.yowko.com/net-framework-memorycache-1/</link><pubDate>Mon, 30 Jan 2017 00:42:34 +0800</pubDate><guid>https://blog.yowko.com/net-framework-memorycache-1/</guid><description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 1 極簡做法 程式多多少少有些資料或設定是經常需要使用的，如果這些資料異動頻率低的特性就可以考慮將其加入 cach</description></item><item><title>字串處理速度比較：&#43; 運算符、string.Format、string.Concat、字串插值(String Interpolation)</title><link>https://blog.yowko.com/stringformat-stringconcat-stringintepolation/</link><pubDate>Thu, 05 Jan 2017 00:42:34 +0800</pubDate><guid>https://blog.yowko.com/stringformat-stringconcat-stringintepolation/</guid><description>字串處理速度比較：+ 運算符、string.Format、string.Concat、字串插值(String Interpolation) c# 6.0 多了一個方便處理字串的語法糖</description></item></channel></rss>