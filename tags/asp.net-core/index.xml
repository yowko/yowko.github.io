<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ASP.NET Core on Yowko&#39;s Notes</title><link>https://blog.yowko.com/tags/asp.net-core/</link><description>Recent content in ASP.NET Core on Yowko&#39;s Notes</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 29 Apr 2022 00:30:00 +0800</lastBuildDate><atom:link href="https://blog.yowko.com/tags/asp.net-core/index.xml" rel="self" type="application/rss+xml"/><item><title>關於 gRPC 的 Load Test</title><link>https://blog.yowko.com/grpc-load-test/</link><pubDate>Fri, 29 Apr 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-load-test/</guid><description>關於 gRPC 的 Load Test 搜尋資訊的過程中，偶爾看到 Load testing for gRPC - the case，分析用來針對 gRPC service 做 load test 的三種方式： Gatling with gRPC plugin. 使用 scala 來建立測試腳本 支援四種 gRPC serv</description></item><item><title>使用 Gatling 來對 gRPC 做負載測試</title><link>https://blog.yowko.com/grpc-load-test-gatling/</link><pubDate>Thu, 28 Apr 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-load-test-gatling/</guid><description>使用 Gatling 來對 gRPC 做負載測試 關於 Gatling 先決條件：安裝 64bits OpenJDK LTS：8,11,17 &amp;gt; 其他 JVM 像是 JDK 12, client JVMs, 32bits systems or OpenJ9 都不支援 Gatling 3.7 開始支援 Java, Kotlin and Scala 來撰寫測試腳本 &amp;gt;</description></item><item><title>使用 k6 來對 gRPC 做負載測試</title><link>https://blog.yowko.com/grpc-load-test-k6/</link><pubDate>Fri, 08 Apr 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-load-test-k6/</guid><description>使用 k6 來對 gRPC 做負載測試 第一次聽到 k6 是 twMVC 的活動宣傳 讓我們用 k6 來進行壓測吧，雖然後來時間因素沒有到場聽到實際應用的分享，但為了不要與技術潮流脫節</description></item><item><title>使用 ghz 來對 gRPC 做負載測試</title><link>https://blog.yowko.com/grpc-load-test-ghz/</link><pubDate>Mon, 04 Apr 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-load-test-ghz/</guid><description>使用 ghz 來對 gRPC 做負載測試 最近興起想要比較幾個 gRPC load test 工具的使用心得，這才發現過去在建立 gRPC service 時因為專案時間壓力並沒有特別紀錄 ghz 的用法，後來工作也慢</description></item><item><title>如何讓 ASP.NET Core 3.1 以 amd64 image 在 arm 晶片 (M1) 上執行</title><link>https://blog.yowko.com/aspdotnet-core-31-amd64-arm/</link><pubDate>Sun, 03 Apr 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-31-amd64-arm/</guid><description>如何讓 ASP.NET Core 3.1 以 amd64 image 在 arm 晶片 (M1) 上執行 公司電腦準備做周期性汰換，所以開始評估搭載 arm cpu (M1) 的 macbook pro，經過一輪測試後，絕大部份工具都能正常使用，而團</description></item><item><title>在 ASP.NET Core 中從 Apache Pulsar 接收訊息 (Reader)</title><link>https://blog.yowko.com/aspdotnet-core-pulsar-reader/</link><pubDate>Fri, 11 Mar 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-pulsar-reader/</guid><description>在 ASP.NET Core 中從 Apache Pulsar 接收訊息 (Reader) Apache Pulsar 常常被拿來與 Kafka 做比較，孰優孰劣常常也是各自擁護者爭相討論的內容，以下條列幾項選擇 Pulsar 的正面意見 同時支援即時訊息與訊</description></item><item><title>在 ASP.NET Core 中從 Apache Pulsar 接收訊息</title><link>https://blog.yowko.com/aspdotnet-core-pulsar-consumer/</link><pubDate>Thu, 10 Mar 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-pulsar-consumer/</guid><description>在 ASP.NET Core 中從 Apache Pulsar 接收訊息 Apache Pulsar 常常被拿來與 Kafka 做比較，孰優孰劣常常也是各自擁護者爭相討論的內容，以下條列幾項選擇 Pulsar 的正面意見 同時支援即時訊息與訊息</description></item><item><title>在 ASP.NET Core 中發送訊息至 Apache Pulsar</title><link>https://blog.yowko.com/aspdotnet-core-pulsar-producer/</link><pubDate>Tue, 08 Mar 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-pulsar-producer/</guid><description>在 ASP.NET Core 中發送訊息至 Apache Pulsar Apache Pulsar 常常被拿來與 Kafka 做比較，孰優孰劣常常也是各自擁護者爭相討論的內容，以下條列幾項選擇 Pulsar 的正面意見 同時支援即時訊息與訊息</description></item><item><title>啟動 ASP.NET Core 時傳入參數</title><link>https://blog.yowko.com/aspdotnet-core-pass-parameters/</link><pubDate>Sat, 22 Jan 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-pass-parameters/</guid><description>啟動 ASP.NET Core 時傳入參數 團隊中有多個專案都有使用相同 source code，不過可以依據 config 不同而執行著不同任務的特性 sre 在處理這種類型的 application 時都是 build 一份 image</description></item><item><title>ASP.NET Core Configuration 中的 array 沒有正確覆寫</title><link>https://blog.yowko.com/aspdotnet-core-config-array-not-override/</link><pubDate>Fri, 21 Jan 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-config-array-not-override/</guid><description>ASP.NET Core Configuration 中的 array 沒有正確覆寫 之前筆記 在 ASP.NET Core Configuration 中使用 array 中紀錄到如何在 config 中使用 array，不過在使用後發現有些限制，趁著這個機會紀錄一下 基本環境說明</description></item><item><title>在 ASP.NET Core Configuration 中使用 array</title><link>https://blog.yowko.com/aspdotnet-core-config-array/</link><pubDate>Thu, 20 Jan 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-config-array/</guid><description>在 ASP.NET Core Configuration 中使用 array 這是之前專案遇到的需求：在 config 中設定多個值來供 application 使用，印象中之前有用過但沒找到筆記，順便嘗試一下不同做法，筆記一下 基本環境說明</description></item><item><title>ASP.NET Core 中 StackExchange.Redis 的註冊與使用方式</title><link>https://blog.yowko.com/stackexchange-redis-in-aspdotnet-core/</link><pubDate>Fri, 22 Oct 2021 00:39:29 +0800</pubDate><guid>https://blog.yowko.com/stackexchange-redis-in-aspdotnet-core/</guid><description>ASP.NET Core 註冊 StackExchange.Redis 的方式 最近有個專案需要用到 RedLock.net，在做可行性評估時發現 StackExchange.Redis 有幾個註冊方式自己都沒有紀錄過，趁著工作空檔簡單筆記一下 基</description></item><item><title>個別 HttpClient request 使用不同 Timeout 時間</title><link>https://blog.yowko.com/httpclient-different-timeout/</link><pubDate>Wed, 25 Aug 2021 12:30:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient-different-timeout/</guid><description>個別 HttpClient request 使用不同 Timeout 時間 在透過 HttpClient 與 partner 介接時，常會使用同一個 named-client 來建立 instance，這也是可以共用 pool 與 存留期設定的推薦方式，雖然可以在 AddHttpClient 時加上</description></item><item><title>關於 ASP.NET Core ListenAnyIP</title><link>https://blog.yowko.com/aspdotnet-core-listenanyip/</link><pubDate>Wed, 18 Aug 2021 12:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-listenanyip/</guid><description>關於 ASP.NET Core ListenAnyIP 之前筆記 ASP.NET Core URLs 設定的套用順序 紀錄到 ASP.NET Core URL 幾種設定方式的套用順序，其中 WebHostBuilder 的 UseKestrel 方法，筆記使用的是 opts.ListenLocalhost(10000, opts =&amp;gt;opts.Protocols= HttpProtocols.Http1); 與 opts.ListenLocalhost(10001, opts =&amp;gt; opts.UseHtt</description></item><item><title>ASP.NET Core URLs 設定的套用順序</title><link>https://blog.yowko.com/aspdotnet-core-urls-setting-sequence/</link><pubDate>Mon, 16 Aug 2021 12:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-urls-setting-sequence/</guid><description>ASP.NET Core URLs 設定的套用順序 最近負責的專案需要為多個 ASP.NET Core 專案指定統一的對外 url (主要是 port)，所以花了點時間好好釐清幾個設定方式的優先順序，為了避</description></item><item><title>[Zipkin] 使用 OpenTelemetry 來追蹤 ASP.NET Core 上的 gRPC 呼叫</title><link>https://blog.yowko.com/aspdotnet-core-opentelemetry-grpc-zipkin/</link><pubDate>Sun, 04 Apr 2021 22:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-opentelemetry-grpc-zipkin/</guid><description>[Zipkin] 使用 OpenTelemetry 來追蹤 ASP.NET Core 上的 gRPC 呼叫 之前筆記 [Zipkin] 使用 OpenTelemetry 來追蹤 ASP.NET Core 紀錄到使用 OpenTelemetry 搭配 Zipkin 來追蹤 ASP.NET Core 也曾在 .NET Core 上使用 Jaeger 追蹤 gRPC 呼叫 紀錄使用 OpenTracing 來追蹤 gRPC 呼叫，之前筆</description></item><item><title>[Jaeger] 使用 OpenTelemetry 來追蹤 ASP.NET Core 上的 gRPC 呼叫</title><link>https://blog.yowko.com/aspdotnet-core-opentelemetry-grpc-jaeger/</link><pubDate>Sun, 04 Apr 2021 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-opentelemetry-grpc-jaeger/</guid><description>[Jaeger] 使用 OpenTelemetry 來追蹤 ASP.NET Core 上的 gRPC 呼叫 之前筆記 [Jaeger] 使用 OpenTelemetry 來追蹤 ASP.NET Core 紀錄到使用 OpenTelemetry 搭配 Jaeger 來追蹤 ASP.NET Core 也曾在 .NET Core 上使用 Jaeger 追蹤 gRPC 呼叫 紀錄使用 OpenTracing 來追蹤 gRPC 呼叫，因為目</description></item><item><title>[Zipkin] 使用 OpenTelemetry 來追蹤 ASP.NET Core</title><link>https://blog.yowko.com/aspdotnet-core-opentelemetry-zipkin/</link><pubDate>Sat, 03 Apr 2021 22:00:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-opentelemetry-zipkin/</guid><description>[Zipkin] 使用 OpenTelemetry 來追蹤 ASP.NET Core 這是延續之前筆記 [Jaeger] 使用 OpenTelemetry 來追蹤 ASP.NET Core 進行嘗試的筆記，過去使用 OpenTracing 時因為 Zipkin 與 .NET Core 的整合程式較低，設定上繁瑣許多，加上無法處理主要</description></item><item><title>[Jaeger] 使用 OpenTelemetry 來追蹤 ASP.NET Core</title><link>https://blog.yowko.com/aspdotnet-core-opentelemetry-jaeger/</link><pubDate>Sat, 03 Apr 2021 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-opentelemetry-jaeger/</guid><description>[Jaeger] 使用 OpenTelemetry 來追蹤 ASP.NET Core 前幾天看到微軟官方部落格 OpenTelemetry .NET reaches v1.0 公開了 OpenTelemetry .NET v1.0 版，之前在研究 OpenTracing 也有考慮過 OpenTelemetry 畢竟大一統的規格未來性跟前景應該都比較好，但當時相</description></item><item><title>RabbitMQ 為不同帳號設定不同 Queue 權限</title><link>https://blog.yowko.com/rabbitmq-user-queue-authorisation/</link><pubDate>Sun, 14 Mar 2021 09:30:00 +0800</pubDate><guid>https://blog.yowko.com/rabbitmq-user-queue-authorisation/</guid><description>RabbitMQ 為不同帳號設定不同 Queue 權限 同事在新功能的架構設計時想要讓不同 user 在 MQ 存取時可以有權限的概念，但以團隊之前使用的 Kafka 至少就我個人所知是無法達成的，</description></item><item><title>ASP.NET Core gRPC 的 Secure 與 Insecure 不同做法</title><link>https://blog.yowko.com/aspdotnetcore-grpc-secure-insecure/</link><pubDate>Sun, 07 Mar 2021 09:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnetcore-grpc-secure-insecure/</guid><description>ASP.NET Core gRPC 的 Secure 與 Insecure 不同做法 之前筆記 ASP.NET Core gRPC 使用自發憑證時在 macOS 的特別處理 紀錄到如何在 macOS 與 container 間使用不同 port 與 protocol 來建立 gRPC service，當時查資料看到也許</description></item><item><title>ASP.NET Core gRPC 使用自發憑證時在 macOS 的特別處理</title><link>https://blog.yowko.com/aspdotnetcore-grpc-self-signed-certificate-macos/</link><pubDate>Fri, 05 Mar 2021 09:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnetcore-grpc-self-signed-certificate-macos/</guid><description>ASP.NET Core gRPC 使用自發憑證時在 macOS 的特別處理 之前筆記 ASP.NET Core gRPC 使用自發憑證 紀錄到使用自發憑證來為 ASP.NET Core gRPC service 加上 tls，透過新的做法看似可以正確在 container 內執行，只</description></item><item><title>ASP.NET Core gRPC 使用自發憑證</title><link>https://blog.yowko.com/aspdotnetcore-grpc-self-signed-certificate/</link><pubDate>Thu, 04 Mar 2021 09:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnetcore-grpc-self-signed-certificate/</guid><description>ASP.NET Core gRPC 使用自發憑證 距之前筆記 讓 container 中的 ASP.NET Core 也有憑證 也不過幾個月時間，最近想要搭配 Kubernetes 發行憑證給 ASP.NET Core 使用 透過 Kubernetes 的 cert-manager 使用自簽憑證，想不到一直不通，從</description></item><item><title>ASP.NET Core 避免工作執行到一半強制被關閉</title><link>https://blog.yowko.com/aspdotnetcore-graceful-shutdown/</link><pubDate>Sat, 27 Feb 2021 09:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnetcore-graceful-shutdown/</guid><description>ASP.NET Core 避免工作執行到一半強制被關閉 最近同事反應部份 application 在不同環境間，有 stop log 沒有正常紀錄下來的情況，雖然只是 log，但很有可能就連原本預期執行完畢</description></item><item><title>Kubernetes 發行憑證給 ASP.NET Core 使用</title><link>https://blog.yowko.com/kubernetes-certificate-aspdotnet-core/</link><pubDate>Fri, 12 Feb 2021 09:30:00 +0800</pubDate><guid>https://blog.yowko.com/kubernetes-certificate-aspdotnet-core/</guid><description>Kubernetes 發行憑證給 ASP.NET Core 使用 之前筆記 使用 cert-manager 建立 PKCS12 格式 (.pfx) 憑證 紀錄到如何使用 cert-manager 來建立 ASP.NET Core 可以使用的 PKCS12 格式 (.pfx) 憑證，也在 將憑證 secret 以檔案掛戴至 Container 中 紀錄如何將 Kubernetes</description></item><item><title>ASP.NET Core 的 gRPC Polly Retry</title><link>https://blog.yowko.com/aspdotnet-core-grpc-polly-retry/</link><pubDate>Mon, 19 Oct 2020 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-grpc-polly-retry/</guid><description>ASP.NET Core 的 gRPC Polly Retry 之前曾經對 gRPC 的 keepalive 調整一輪 (server、kubernetes、container)，原本看似已解決，但最近斷線的錯誤又出現，於是</description></item><item><title>使用 Kubernetes 搭配 ASP.NET Core BackgroundService 確保 gRPC 服務回應合乎預期</title><link>https://blog.yowko.com/kubernetes-aspdotnet-core-backgroundservice-grpc/</link><pubDate>Tue, 22 Sep 2020 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/kubernetes-aspdotnet-core-backgroundservice-grpc/</guid><description>使用 Kubernetes 搭配 ASP.NET Core BackgroundService 確保 gRPC 服務回應合乎預期 之前在筆記 使用 Kubernetes Liveness 來檢查 ASP.NET Core gRPC 回應合乎預期 紀錄到使用 Kubernetes Liveness 在 pod 中的 service 回應如果不如預期時就直接重啟 pod 來嘗試</description></item><item><title>使用 Kubernetes Liveness 來檢查 ASP.NET Core gRPC 回應合乎預期</title><link>https://blog.yowko.com/kubernetes-liveness-aspdotnet-core-grpc/</link><pubDate>Mon, 21 Sep 2020 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/kubernetes-liveness-aspdotnet-core-grpc/</guid><description>使用 Kubernetes Liveness 來檢查 ASP.NET Core gRPC 回應合乎預期 今天要紀錄透過 Kubernetes 搭配 使用 ASP.NET Core middleware 進行 gRPC healthy check (當然 使用 ASP.NET Core BackgroundService 進行 gRPC healthy check 也是可行的) 與 讓 container 中的 ASP.NET Core 也有憑證 來確保 service</description></item><item><title>讓 container 中的 ASP.NET Core 也有憑證</title><link>https://blog.yowko.com/aspdotnet-core-container-certificate/</link><pubDate>Sun, 20 Sep 2020 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-container-certificate/</guid><description>讓 container 中的 ASP.NET Core 也有憑證 經 2021/03/04 測試，本文內容失效，請參考 ASP.NET Core gRPC 使用自發憑證 之前筆記 使用 ASP.NET Core middleware 進行 gRPC healthy check、使用 ASP.NET Core BackgroundService 進行 gRPC healthy check 以及 ASP.NET Core gRPC 無法</description></item><item><title>在 ASP.NET Core 上啟用 gRPC Reflection</title><link>https://blog.yowko.com/aspdotnet-core-grpc-reflection/</link><pubDate>Thu, 10 Sep 2020 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-grpc-reflection/</guid><description>在 ASP.NET Core 上啟用 gRPC Reflection 系統功能愈來愈多，自然而然地 proto 檔也就熟變得愈來愈龐大，如果每次想要手動測試 gRPC 功能時都要手 key proto 實在沒效率 (測試工具可以參考之前</description></item><item><title>使用 ASP.NET Core BackgroundService 進行 gRPC healthy check</title><link>https://blog.yowko.com/aspdotnet-core-backgroundservice-grpc-healthy-check/</link><pubDate>Sun, 06 Sep 2020 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-backgroundservice-grpc-healthy-check/</guid><description>使用 ASP.NET Core BackgroundService 進行 gRPC healthy check 之前筆記 使用 ASP.NET Core middleware 進行 gRPC healthy check 紀錄到如何使用 ASP.NET Core 內建的 Health Check middleware 來進行 gRPC service 的檢查，當時有看到 Steve Gordon 的 HEALTH CHECKS WITH GRPC AND ASP.NET CORE 3.0 使用 serive 本身的</description></item><item><title>使用 ASP.NET Core middleware 進行 gRPC healthy check</title><link>https://blog.yowko.com/aspdotnet-core-middleware-grpc-healthy-check/</link><pubDate>Mon, 31 Aug 2020 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-middleware-grpc-healthy-check/</guid><description>使用 ASP.NET Core middleware 進行 gRPC healthy check 這個需求來自於某次的 issue：有個 service 的回應時好時壞，沒有規律，這讓我想起當年在壽險公司資訊部門使用 asp 提供服務的故事，當</description></item><item><title>ASP.NET Core gRPC 無法在 macOS 上啟動？！</title><link>https://blog.yowko.com/aspdotnet-core-grpc-macos/</link><pubDate>Sat, 28 Sep 2019 20:40:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-grpc-macos/</guid><description>ASP.NET Core gRPC 無法在 macOS 上啟動？！ 隨著 .NET Core 3 正式發表，也代表 gRPC 相關功能開始內建在 ASP.NET Core 3 中並由官方直接支援，前幾個月專案在團隊進行效能評估後已率先於 .NET Core</description></item><item><title>ASP.NET Core WebAPI 回應 406 Not Acceptable</title><link>https://blog.yowko.com/aspdotnetcore-webapi-406-not-acceptable/</link><pubDate>Sun, 30 Jun 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnetcore-webapi-406-not-acceptable/</guid><description>ASP.NET Core WebAPI 回應 406 Not Acceptable 照著之前筆記 從 Empty 建立 ASP.NET Core Web API 從空專案開始建立 ASP.NET Core WebAPI ，過程中一切順利直到開始加入商業邏輯時卻出現意料外的錯誤，雖然事後覺得我應</description></item><item><title>從 Empty 建立 ASP.NET Core Web API</title><link>https://blog.yowko.com/add-webapi-to-aspdotnetcore-empty/</link><pubDate>Sat, 29 Jun 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/add-webapi-to-aspdotnetcore-empty/</guid><description>從 Empty 建立 ASP.NET Core Web API 之前曾經在筆記 建立ASP.NET Web API 專案的幾種方式- Yowko&amp;rsquo;s Notes 提到專案的起源分為兩派： 使用 Empty 專案範本再手動安裝需要的 framework 直接使用需要</description></item><item><title>在 ASP.NET Core 中將 log 寫至 GCP 的 Stackdriver</title><link>https://blog.yowko.com/aspdotnet-core-log-stackdriver/</link><pubDate>Sat, 22 Jun 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-log-stackdriver/</guid><description>在 ASP.NET Core 中將 log 寫至 GCP 的 Stackdriver 之前剛好有個功能在內部環境運作時都一直出現錯誤，經過一輪測試後決定將功能搬至 GCP 的 GKE 上執行來確認問題是不是內部環境設定所</description></item><item><title>ASP.NET Core 中 Controller 與 ControllerBase 的差別</title><link>https://blog.yowko.com/aspdotnet-core-controller-controllerbase/</link><pubDate>Sun, 09 Jun 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-controller-controllerbase/</guid><description>ASP.NET Core 中 Controller 與 ControllerBase 的差別 之前筆記 ASP.NET Core 中 AddMvc() 與 AddMvcCore() 的差別 提到 AddMvc() 與 AddMvcCore() 的差別，今天剛好在整理如何從 Empty 專案加入 Web API 時聯想到似乎沒有很清楚實際差別，趁著自己查資</description></item><item><title>ASP.NET Core 中 AddMvc() 與 AddMvcCore() 的差別</title><link>https://blog.yowko.com/aspdotnet-core-addmvc-addmvccore/</link><pubDate>Sat, 08 Jun 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-addmvc-addmvccore/</guid><description>ASP.NET Core 中 AddMvc() 與 AddMvcCore() 的差別 ASP.NET Core 將過去 ASP.NET MVC 與 ASP.NET Web API 兩套 framework 整合在一起，對於開發人員是種福音：不用再想到底該引用哪個 NameSpace、不用再為該繼承哪個</description></item><item><title>使用 GenericHost 來 Host gRPC Server</title><link>https://blog.yowko.com/generichost-grpc-server/</link><pubDate>Sun, 26 May 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/generichost-grpc-server/</guid><description>使用 GenericHost 來 Host gRPC Server 之前筆記 在 .NET Core console 上使用 Dependency Injection - DI 提到 ASP.NET Core 有兩種 host 方式： WebHost Generic Host 而在之前另一則筆記 使用 ASP.NET Core 2.2 來 Host gRPC Server 使用到 WebHost 來 host gRPC Server，經同</description></item><item><title>使用 ASP.NET Core 2.2 來 Host gRPC Server</title><link>https://blog.yowko.com/aspdotnet-core-2-host-grpc-server/</link><pubDate>Tue, 21 May 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-2-host-grpc-server/</guid><description>使用 ASP.NET Core 2.2 來 Host gRPC Server 之前筆記 Protobuf 該如何處理不定型別, .NET Core 上使用 Jaeger 追蹤 gRPC 呼叫, Protobuf 時間屬性該如何表示？ 在 host gRPC Server 時都是透過 console project 來進行，但 console 專案需要使用</description></item><item><title>將 .NET Core Console 專案轉換為 ASP.NET Core</title><link>https://blog.yowko.com/dotnet-core-console-to-aspdotnet-core/</link><pubDate>Tue, 21 May 2019 19:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-core-console-to-aspdotnet-core/</guid><description>將 .NET Core Console 專案轉換為 ASP.NET Core console 因為組成簡單、建立快速，常被用來確認語法或是 POC 特定功能需求，不過一旦 POC 沒問題就會遇到程式碼彙總的狀況，如果程式碼數量</description></item><item><title>關於 ASP.NET Core IMemoryCache RegisterPostEvictionCallback 的觸發時機</title><link>https://blog.yowko.com/aspdotnet-core-imemorycache-registerpostevictioncallback/</link><pubDate>Tue, 14 May 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-imemorycache-registerpostevictioncallback/</guid><description>關於 ASP.NET Core IMemoryCache RegisterPostEvictionCallback 的觸發時機 同事提到想用 ASP.NET Core 的 IMemoryCache 來處理 application 本身的 cache，無奈小弟學藝不精沒有太多想法可以參與討論，所以趕緊惡補，藉這個機會學習也</description></item><item><title>讓 ASP.NET Core MVC 自行停止運作</title><link>https://blog.yowko.com/aspdotnet-core-mvc-stop-by-itself/</link><pubDate>Sun, 12 May 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-core-mvc-stop-by-itself/</guid><description>讓 ASP.NET Core MVC 自行停止運作 公司專案有個系統在啟動時執行 init script，接著就等待後台管理者下指令才會有後續動作，但開發階段暫時還不會有後台管理者的</description></item><item><title>將 ASP.NET Core 部署至 Docker 中</title><link>https://blog.yowko.com/aspnet-core-docker/</link><pubDate>Wed, 24 Apr 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspnet-core-docker/</guid><description>將 ASP.NET Core 部署至 Docker 中 最近專案在 macOS 上開發 ASP.NET Core 的 Web API，完成後再透過 Docker 包成 image 準備建立 container，流程很直覺，加上 CI CD 同事都已經準備好了，所</description></item><item><title>使用 Jaeger 追蹤 ASP.NET Core 中的 class 呼叫</title><link>https://blog.yowko.com/jaeger-trace-aspdotnet-core-class-call/</link><pubDate>Sun, 14 Apr 2019 15:30:00 +0800</pubDate><guid>https://blog.yowko.com/jaeger-trace-aspdotnet-core-class-call/</guid><description>使用 Jaeger 追蹤 ASP.NET Core 中的 class 呼叫 之前筆記 .NET Core 上使用 Jaeger 追蹤 gRPC 呼叫 與 使用 Jaeger 追蹤 ASP.NET Core 呼叫 分別紀錄到使用 Jaeger 來紀錄 gRPC call 與 ASP.NET Core Web API 的呼叫歷程內容，接著紀錄另個常</description></item><item><title>使用 Jaeger 追蹤 ASP.NET Core 呼叫</title><link>https://blog.yowko.com/jaeger-trace-aspdotnet-core/</link><pubDate>Sat, 13 Apr 2019 21:30:00 +0800</pubDate><guid>https://blog.yowko.com/jaeger-trace-aspdotnet-core/</guid><description>使用 Jaeger 追蹤 ASP.NET Core 呼叫 之前筆記 .NET Core 上使用 Jaeger 追蹤 gRPC 呼叫 紀錄到如何使用 Jaeger 來追蹤 .NET Core Console project 中 gRPC 的呼叫歷程，不過想必未來應該免不了還是需要使用 REST api 的專案，</description></item><item><title>將 ASP.NET Core 的預設 log 輸出至 NLog 或 Serilog</title><link>https://blog.yowko.com/asp-net-core-default-log-nlog-serilog/</link><pubDate>Sun, 10 Mar 2019 21:00:00 +0800</pubDate><guid>https://blog.yowko.com/asp-net-core-default-log-nlog-serilog/</guid><description>將 ASP.NET Core 的預設 log 輸出至 NLog 或 Serilog ASP.NET Core 預設會將 WebHost 執行細節透過 stdout 輸出至 console 上，application 的所有動作都一目暸然，這在 debug 時很方便，不過部署在一般</description></item><item><title>讓 ASP.NET Web API 與 ASP.NET Core 可以支援 x-www-form-urlencoded</title><link>https://blog.yowko.com/aspnet-core-x-www-form-urlencoded/</link><pubDate>Mon, 01 Oct 2018 02:44:00 +0800</pubDate><guid>https://blog.yowko.com/aspnet-core-x-www-form-urlencoded/</guid><description>讓 ASP.NET Web API 與 ASP.NET Core 可以支援 x-www-form-urlencoded 最近某個專案需要將資料(前端)傳送至其他平台 API 進行處理，跟一般需求相同，只是資料傳輸格式不是使用過去較熟悉的 application/json 而是使</description></item></channel></rss>