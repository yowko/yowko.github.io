<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>dotnet on Yowko&#39;s Notes</title><link>https://blog.yowko.com/tags/dotnet/</link><description>Recent content in dotnet on Yowko&#39;s Notes</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 06 Dec 2024 00:30:00 +0800</lastBuildDate><atom:link href="https://blog.yowko.com/tags/dotnet/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 JetBrains Rider 來 Debug Source Generators 或 Incremental Generators</title><link>https://blog.yowko.com/debug-source-generators-incremental-generators/</link><pubDate>Fri, 06 Dec 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/debug-source-generators-incremental-generators/</guid><description>使用 JetBrains Rider 來 Debug Source Generators 或 Incremental Generators 之前筆記 使用 Source Generators 來為 method 加上時間測量 與 使用 Incremental Generators 來為 method 加上時間測量 紀錄到如何使用 Source Generators 與 Incremental Generators 來為 method 加上 stopwatch 測量 method 的執行時間，但</description></item><item><title>使用 Incremental Generators 來為 method 加上時間測量</title><link>https://blog.yowko.com/incremental-generators-stopwatch/</link><pubDate>Thu, 05 Dec 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/incremental-generators-stopwatch/</guid><description>使用 Incremental Generators 來為 method 加上時間測量 之前筆記 Stopwatch 的正確用法 紀錄了使用在 .NET 7 所發表 Stopwatch 的新 api 來測量程式執行時間以避免 memory allocate，接著就想起 Metho</description></item><item><title>使用 Source Generators 來為 method 加上時間測量</title><link>https://blog.yowko.com/source-generators-stopwatch/</link><pubDate>Tue, 03 Dec 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/source-generators-stopwatch/</guid><description>使用 Source Generators 來為 method 加上時間測量 之前筆記 Stopwatch 的正確用法 紀錄了使用在 .NET 7 所發表 Stopwatch 的新 api 來測量程式執行時間以避免 memory allocate，接著就想起 Metho</description></item><item><title>使用 MethodTimer.Fody 來為 method 加上時間測量</title><link>https://blog.yowko.com/measure-method-performance-with-methodtimer-fody/</link><pubDate>Wed, 27 Nov 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/measure-method-performance-with-methodtimer-fody/</guid><description>使用 MethodTimer.Fody 來為 method 加上時間測量 之前筆記 Stopwatch 的正確用法 紀錄到如何使用 Stopwatch 的新 API，讓我想起過去常使用的 GitHub:MethodTimer.Fody 也是透過 Stopwatch.StartNew() 方式來計算時間，回頭確認是否有更新時</description></item><item><title>Stopwatch 的正確用法</title><link>https://blog.yowko.com/stopwatch-best-practice/</link><pubDate>Fri, 22 Nov 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/stopwatch-best-practice/</guid><description>Stopwatch 的正確用法 前幾天從 Cash 大的粉專上看到 Cash Wu Geek 分享了 youtuber-Nick Chapsas 對於 Stopwatch 的正確用法：Youtube:How to Measure Time Correctly in .NET，覺得值得仔細了解一下，快速筆</description></item><item><title>隨 .NET9 SDK 推出的 C#13 新增 Lock 類別與用法</title><link>https://blog.yowko.com/dotnet9-csharp13-lock/</link><pubDate>Thu, 07 Nov 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet9-csharp13-lock/</guid><description>隨 .NET9 SDK 推出的 C#13 新增 Lock 類別與用法 在 C# 中，lock 語法確保程式碼區塊的執行不會被其他 thread 影響。過去 lock 語法就是 System.Threading.Monitor 的語法糖，編譯器產生的程式碼等於使用</description></item><item><title>如何在 Nexus Repository 的 NuGet server 下載與上傳套件</title><link>https://blog.yowko.com/nexus-nuget-download-upload/</link><pubDate>Mon, 14 Oct 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/nexus-nuget-download-upload/</guid><description>如何在 Nexus Repository 的 NuGet server 下載與上傳套件 最近團隊因為 Nexus Repository server 的用量太高，造成服務中斷，進而影響到 CI/CD 流程，團隊的開發進度也多少受到影響，所以決定啟用多個 Nexus</description></item><item><title>.NET 中的 UUID(GUID) 與 ULID</title><link>https://blog.yowko.com/dotnet-uuid-guid-ulid/</link><pubDate>Wed, 10 Jul 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-uuid-guid-ulid/</guid><description>.NET 中的 UUID(GUID) 與 ULID 先來認識一下 UUID(GUID) 與 ULID UUID (Universally Unique Identifier) 128-bit 長的唯一標識符，通常用於生成唯一 ID UUID Version 1：基於時間和 MAC address 結構：60 bit 代表時間戳，48 bit 代表節點（通常</description></item><item><title>從 arm64 macOS 建立 Linux x64 ASP.NET Docker Image 卡在 dotnet restore</title><link>https://blog.yowko.com/arm-docker-build-stuck-on-dotnet-restore/</link><pubDate>Thu, 04 Apr 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/arm-docker-build-stuck-on-dotnet-restore/</guid><description>從 arm64 macOS 建立 Linux x64 ASP.NET Docker Image 卡在 dotnet restore 之前筆記 為 ASP.NET Core 建立 Multi-Platform image 紀錄到如何使用 buildx 來建立 linux/amd64 與 linux/arm64 的 docker image，當時提到 .NET 8 以前需要使用條件式編譯，而 .NET 8 開始</description></item><item><title>在不同 mac 上共享 .NET 開發用憑證</title><link>https://blog.yowko.com/share-dotnet-certificate-on-mac/</link><pubDate>Tue, 02 Apr 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/share-dotnet-certificate-on-mac/</guid><description>在不同 mac 上共享 .NET 開發用憑證 最近團隊為了避免部份功能在開發階段因為憑證問題無法正常運作而造成開發與實際的 production code 有所差異，因此想要逐步套用 https everywhere 的機</description></item><item><title>從 macOS 中移除 .NET Runtime 與 SDK</title><link>https://blog.yowko.com/remove-dotnet-sdk-runtime-from-mac/</link><pubDate>Wed, 21 Feb 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/remove-dotnet-sdk-runtime-from-mac/</guid><description>從 macOS 中移除 .NET Runtime 與 SDK 之前筆記 從 Mac 移除 .NET Core Runtime 與 SDK 紀錄到因為團隊定期升級 .NET 版本，所以順手紀錄如何移除舊版本的 .NET Core SDK，隨著時間的推移，中間又升級</description></item><item><title>停用 C# 編譯時特定的警告</title><link>https://blog.yowko.com/csharp-disable-warn/</link><pubDate>Fri, 24 Nov 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/csharp-disable-warn/</guid><description>停用 C# 編譯時特定的警告 之前筆記 NuGet restore error NU1803 紀錄了在某次 build fail 後意外發現 Microsoft NuGet team 的 HTTPS everywhere 計劃，接著筆記 NuGet 設定 Insecure HTTP source 是根據 Microsoft NuGet team 的新計劃：HTTPS Everywhere Update 嘗</description></item><item><title>NuGet 設定 Insecure HTTP source</title><link>https://blog.yowko.com/nuget-insecure/</link><pubDate>Thu, 23 Nov 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/nuget-insecure/</guid><description>NuGet 設定 Insecure HTTP source 之前筆記 NuGet restore error NU1803 紀錄了在某次 build fail 後意外發現 Microsoft NuGet team 的 HTTPS everywhere 計劃，眼看著計劃中的時程慢慢接近，正在進行相應計劃：包含忽略 NU1803 error 與內部 dns 以</description></item><item><title>如何指定 container 或是 .NET application 的時區</title><link>https://blog.yowko.com/timezone-in-container-or-dotnet/</link><pubDate>Thu, 26 Oct 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/timezone-in-container-or-dotnet/</guid><description>如何指定 container 或是 .NET application 的時區 最近經手的一個專案，使用到外部 partner 提供的 NuGet library，但這個 library 有個問題，就是 DateTime.UtcNow 與 DateTime.Now 同時都有用到，而且沒有提供任何的</description></item><item><title>如何在 .NET6 上指定 HttpClient 使用 HTTP/2</title><link>https://blog.yowko.com/httpclient-http2/</link><pubDate>Tue, 30 May 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient-http2/</guid><description>如何在 .NET6 上指定 HttpClient 使用 HTTP/2 之前筆記 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 紀錄到如何使用 ASP.NET Core 7 加入的 JSON 轉碼功能：可以讓 gRPC service 也可以透過 rest api 的方式來呼叫，所以就有了 HttpClient</description></item><item><title>ASP.NET Core 的 gRPC-Web 功能</title><link>https://blog.yowko.com/aspdotnetcore-grpc-web/</link><pubDate>Fri, 05 May 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnetcore-grpc-web/</guid><description>ASP.NET Core 的 gRPC-Web 功能 之前筆記 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 紀錄到如何使用 Transcoding 讓 gRPC service 同時提供 web rest api 的功能，過程中在 Microsoft 官方文件 gRPC JSON transcoding in ASP.NET Core gRPC apps 看到 Microsoft 官方將 gRPC JSON transcoding 與</description></item><item><title>使用 Postman 來發送 gRPC request</title><link>https://blog.yowko.com/postman-grpc/</link><pubDate>Fri, 28 Apr 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/postman-grpc/</guid><description>使用 Postman 來發送 gRPC request 過去在測試 gRPC 時大部份都是依賴 BloomRPC，畢竟 grpcurl 還是語法上還是沒辦法像 GUI 一樣直覺，只是今年要更新 BloomRPC 時發現已停止維護，雖然</description></item><item><title>再探 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 (Streaming)</title><link>https://blog.yowko.com/grpc-aspdotnetcore7-json-streaming/</link><pubDate>Thu, 27 Apr 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-aspdotnetcore7-json-streaming/</guid><description>再探 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 (Streaming) 之前筆記 再探 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 紀錄到如何使用 ASP.NET Core 7 加入的 JSON 轉碼功能讓 gRPC service 與 rest api 有接近的使用體驗：使用 POST 方法搭</description></item><item><title>再探 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能</title><link>https://blog.yowko.com/grpc-aspdotnetcore7-json-post/</link><pubDate>Wed, 26 Apr 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-aspdotnetcore7-json-post/</guid><description>再探 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 之前筆記 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 紀錄到如何使用 ASP.NET Core 7 加入的 JSON 轉碼功能：可以讓 gRPC service 也可以透過 rest api 的方式來呼叫。 不過眼尖</description></item><item><title>gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 (macOS)</title><link>https://blog.yowko.com/grpc-aspdotnetcore7-json-macos/</link><pubDate>Fri, 14 Apr 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-aspdotnetcore7-json-macos/</guid><description>gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 (macOS) 在之前筆記 gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 紀錄到如何使用 ASP.NET Core 7 加入的 JSON 轉碼功能：可以讓 gRPC service 也可以透過 rest api 的方式來呼叫 但由於該功</description></item><item><title>gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能</title><link>https://blog.yowko.com/grpc-aspdotnetcore7-json/</link><pubDate>Tue, 11 Apr 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/grpc-aspdotnetcore7-json/</guid><description>gRPC 在 ASP.NET Core 7 的 JSON 轉碼功能 .NET 7 跟過去幾個 .NET 版本一樣有不少效能的改善，也增加了好幾個語法糖以及功能，但因為單數版本的關係屬於 Standard Term Support (STS)：只有</description></item><item><title>NuGet restore error NU1803</title><link>https://blog.yowko.com/nuget-restore-nu1803/</link><pubDate>Fri, 26 Aug 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/nuget-restore-nu1803/</guid><description>NuGet restore error NU1803 2023/11/26 update: Microsoft NuGet team 的新計劃：HTTPS Everywhere Update，筆記可以參考 NuGet 設定 Insecure HTTP source 或是 停用 C# 編譯時特定的警告 原本團隊使用 .NET SDK 6.0.201 ，考慮到近期幾個更</description></item><item><title>在 Linux 上確認 dll 版本</title><link>https://blog.yowko.com/linux-dll-version/</link><pubDate>Sat, 02 Apr 2022 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/linux-dll-version/</guid><description>在 Linux 上確認 dll 版本 這是為了解決 ASP.NET Core 3.1 的 amd64 image 無法在 arm 晶片 (M1) 上執行而衍生的問題 我嘗試在 ASP.NET Core 3.1 的 application 中升級一個 NuGet package 以套用在 .NET 5 以後加入的功能，為了確認</description></item><item><title>使用 dotnet-grpc-cli 取得 gRPC Service 內容</title><link>https://blog.yowko.com/dotnet-grpc-cli/</link><pubDate>Sun, 13 Sep 2020 12:30:00 +0800</pubDate><guid>https://blog.yowko.com/dotnet-grpc-cli/</guid><description>使用 dotnet-grpc-cli 取得 gRPC Service 內容 之前筆記 使用 grpc-cli 呼叫 gRPC Service 紀錄到 gprc 官方 command line tool 的使用方式，後來偶爾間發現竟然有 dotnet 版：dotnet-grpc-cli，還是 C# 撰寫的</description></item><item><title>在 .NET Core 與 .NET Framework 上使用 HttpClientFactory</title><link>https://blog.yowko.com/httpclient/</link><pubDate>Wed, 16 Jan 2019 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/httpclient/</guid><description>在 .NET Core 與 .NET Framework 上使用 HttpClientFactory 之前筆記 探討 HttpClient 可能的問題 與 HttpClient 無法反應 DNS 異動的解決方式 的出現是因為工作任務需要將一些重要訊息傳送至 Slack 而留意到 .NET Core 使用的 HttpClientFactory 是</description></item><item><title>Application Domain 與 Application Pool 的差異</title><link>https://blog.yowko.com/appdomain-apppool-difference/</link><pubDate>Sat, 22 Dec 2018 23:45:00 +0800</pubDate><guid>https://blog.yowko.com/appdomain-apppool-difference/</guid><description>Application Domain 與 Application Pool 的差異 最近同事問到修改 IIS 上站台的 log path 會不會引發重啟，雖然針對同事的問題有九成把握，但對於實際運作細節卻有許多疑問，所以想趁著這個機</description></item></channel></rss>