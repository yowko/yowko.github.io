<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on Yowko&#39;s Notes</title>
    <link>https://blog.yowko.com/tags/c#/</link>
    <description>Recent content in C# on Yowko&#39;s Notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 16 Mar 2019 21:30:00 +0800</lastBuildDate>
    
	<atom:link href="https://blog.yowko.com/tags/c#/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Protobuf 該如何處理不定型別</title>
      <link>https://blog.yowko.com/protobuf-object-any/</link>
      <pubDate>Sat, 16 Mar 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/protobuf-object-any/</guid>
      <description>Protobuf 該如何處理不定型別 之前筆記 Protobuf 時間屬性該如何表示？ 紀錄了 C# DateTime 屬性在 Protobuf 的 message 表示方式，當時在找資料時發現 any.proto 特別查了資料看可以應用在什麼地方，就個</description>
    </item>
    
    <item>
      <title>.NET Core 上使用 Jaeger 追蹤 gRPC 呼叫</title>
      <link>https://blog.yowko.com/dotnet-core-jaeger-grpc/</link>
      <pubDate>Wed, 13 Mar 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dotnet-core-jaeger-grpc/</guid>
      <description>.NET Core 上使用 Jaeger 追蹤 gRPC 呼叫 隨著系統使用人數愈來愈多，架構也跟著愈來愈複雜，各種技術為了解決既有問題或是加快反應速度不斷推陳出新，服務的架構也從單</description>
    </item>
    
    <item>
      <title>Protobuf 時間屬性該如何表示？</title>
      <link>https://blog.yowko.com/protobuf-datetime-timestamp/</link>
      <pubDate>Tue, 12 Mar 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/protobuf-datetime-timestamp/</guid>
      <description>Protobuf 時間屬性該如何表示？ 最近的專案在跨 application 的溝通上捨去以往熟悉的 RESTful API 而採用 gRPC 做為溝通的 protocal，過去沒有相關使用經驗的我當然是踩雷不斷，</description>
    </item>
    
    <item>
      <title>讓 .NET Core 的 HttpClientFactory 不驗證 Https 憑證</title>
      <link>https://blog.yowko.com/dotnet-core-httpclientfactory-invalid-certificate/</link>
      <pubDate>Wed, 06 Mar 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dotnet-core-httpclientfactory-invalid-certificate/</guid>
      <description>讓 .NET Core 的 HttpClientFactory 不驗證 Https 憑證 Https 幾乎已成為了現在網站的基本配備，從過去只有敏感交易網站才需要，到現在瀏覽器還會把非 Https 網站標記為 不安全，而 .NET Core 程式在預</description>
    </item>
    
    <item>
      <title>[Benchmark] 使用 C# 對 NoSQL insert 操作的效能數據</title>
      <link>https://blog.yowko.com/nosql-insert-benchmark/</link>
      <pubDate>Sun, 24 Feb 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/nosql-insert-benchmark/</guid>
      <description>[Benchmark] 使用 C# 對 NoSQL insert 操作的效能數據 最近專案需要將收到的原始 request 內容直接儲存下來，以備日後有問題或是後續加工使用。 針對這類只有 insert 跟 select 操作的需要，過去大</description>
    </item>
    
    <item>
      <title>使用 C# 存取 Riak</title>
      <link>https://blog.yowko.com/csharp-riak/</link>
      <pubDate>Sat, 23 Feb 2019 20:40:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/csharp-riak/</guid>
      <description>使用 C# 存取 Riak 之前筆記 使用 C# 存取 Cassandra 提到想要將 log 存放至 NoSQL 中而正在嘗試某幾套 NoSQL，現在就來看看 Riak 的使用吧 基本環境說明 在 Windows 上使用 docker 建立 linux 版本 R</description>
    </item>
    
    <item>
      <title>使用 C# 存取 PostgreSQL</title>
      <link>https://blog.yowko.com/csharp-postgresql/</link>
      <pubDate>Sun, 17 Feb 2019 20:40:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/csharp-postgresql/</guid>
      <description>使用 C# 存取 PostgreSQL 之前筆記 使用 C# 存取 Cassandra 提到想要將 log 存放至 NoSQL 中而正在嘗試某幾套 NoSQL，現在就來看看 PostgreSQL 的使用吧 基本環境說明 在 mac 上使用 docker 建立 Post</description>
    </item>
    
    <item>
      <title>使用 C# 存取 MongoDB</title>
      <link>https://blog.yowko.com/csharp-mangodb/</link>
      <pubDate>Sat, 16 Feb 2019 22:40:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/csharp-mangodb/</guid>
      <description>使用 C# 存取 MongoDB 之前筆記 使用 C# 存取 Cassandra 提到想要將 log 存放至 NoSQL 中而正在嘗試某幾套 NoSQL，現在就來看看 MongoDB 的使用吧 基本環境說明 在 mac 上使用 docker 建立 Mong</description>
    </item>
    
    <item>
      <title>使用 C# 存取 ArangoDB</title>
      <link>https://blog.yowko.com/csharp-arangodb/</link>
      <pubDate>Tue, 12 Feb 2019 22:40:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/csharp-arangodb/</guid>
      <description>使用 C# 存取 ArangoDB 之前筆記 使用 C# 存取 Cassandra 提到想要將 log 存放至 NoSQL 中而正在嘗試某幾套 NoSQL，現在就來看看 ArangoDB 的使用吧 基本環境說明 在 mac 上使用 docker 建立 Aran</description>
    </item>
    
    <item>
      <title>使用 C# 存取 RavenDB</title>
      <link>https://blog.yowko.com/csharp-ravendb/</link>
      <pubDate>Mon, 11 Feb 2019 22:45:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/csharp-ravendb/</guid>
      <description>使用 C# 存取 RavenDB 之前筆記 使用 C# 存取 Cassandra 提到想要將 log 存放至 NoSQL 中而正在嘗試某幾套 NoSQL，現在就來看看 RavenDB 的使用吧 基本環境說明 在 mac 上使用 docker 建立 Rave</description>
    </item>
    
    <item>
      <title>使用 C# 存取 CouchDB</title>
      <link>https://blog.yowko.com/csharp-couchdb/</link>
      <pubDate>Sun, 10 Feb 2019 23:43:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/csharp-couchdb/</guid>
      <description>使用 C# 存取 CouchDB 之前筆記 使用 C# 存取 Cassandra 提到想要將 log 存放至 NoSQL 中而正在嘗試某幾套 NoSQL，現在就來看看 CouchDB 的使用吧 基本環境說明 在 mac 上使用 docker 建立 Couc</description>
    </item>
    
    <item>
      <title>使用 C# 存取 Cassandra</title>
      <link>https://blog.yowko.com/csharp-cassandra/</link>
      <pubDate>Sat, 09 Feb 2019 23:45:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/csharp-cassandra/</guid>
      <description>使用 C# 存取 Cassandra 公司專案因為流量龐大連帶也會產生大量 log，過去都是使用 local file 來儲存，但在 cluster 的環境下 log file 會散落在許多主機上，一旦需要查閱詳細內容或</description>
    </item>
    
    <item>
      <title>使用 C# (.NET Core) 傳訊息至 Slack</title>
      <link>https://blog.yowko.com/csharp-message-slack/</link>
      <pubDate>Wed, 06 Feb 2019 23:45:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/csharp-message-slack/</guid>
      <description>使用 C# (.NET Core) 傳訊息至 Slack 公司有個臨時性需求：某個重要功能開啟或是關閉時，立即通知營運團隊及各級主管知道，讓大家在討論 production issue 有共同的討論基準。 經過一</description>
    </item>
    
    <item>
      <title>透過自訂 Attribute 標示屬性讓 Dapper 進行 json 轉換</title>
      <link>https://blog.yowko.com/dapper-customattribute-typehandler/</link>
      <pubDate>Thu, 17 Jan 2019 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dapper-customattribute-typehandler/</guid>
      <description>透過自訂 Attribute 標示屬性讓 Dapper 進行 json 轉換 之前在筆記 使用 Dapper 將 json string 轉換為 object 紀錄到可以透過自訂 TypeHandler 讓 Dapper 可以將 db 內的值處理成需要的樣子(目前的用法是 db 欄位直接</description>
    </item>
    
    <item>
      <title>在 .NET Core 與 .NET Framework 上使用 HttpClientFactory</title>
      <link>https://blog.yowko.com/httpclientfactory-dotnet-core-dotnet-framework/</link>
      <pubDate>Wed, 16 Jan 2019 23:45:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/httpclientfactory-dotnet-core-dotnet-framework/</guid>
      <description>在 .NET Core 與 .NET Framework 上使用 HttpClientFactory 之前筆記 探討 HttpClient 可能的問題 與 HttpClient 無法反應 DNS 異動的解決方式 的出現是因為工作任務需要將一些重要訊息傳送至 Slack 而留意到 .NET Core 使用的 HttpClientFactory 是</description>
    </item>
    
    <item>
      <title>在 ASP.NET MVC 5 中使用 ASP.NET Core Dependency Injection 與 HttpClientFactory</title>
      <link>https://blog.yowko.com/aspnet-core-di-httpclientfactory-in-aspnet-mvc-5/</link>
      <pubDate>Mon, 14 Jan 2019 23:45:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/aspnet-core-di-httpclientfactory-in-aspnet-mvc-5/</guid>
      <description>在 ASP.NET MVC 5 中使用 ASP.NET Core Dependency Injection 與 HttpClientFactory 習慣了 ASP.NET Core DI 的寫法後，回到 ASP.NET MVC 5 後突然覺得不太適應，沒有 HttpClientFactory 都覺得 HttpClient 好像很容易出錯，於是試著研究研究，順手紀錄一下，</description>
    </item>
    
    <item>
      <title>HttpClient 無法反應 DNS 異動的解決方式</title>
      <link>https://blog.yowko.com/httpclient-not-respect-dns-change/</link>
      <pubDate>Sat, 05 Jan 2019 23:45:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/httpclient-not-respect-dns-change/</guid>
      <description>HttpClient 無法反應 DNS 異動的解決方式 之前筆記 探討 HttpClient 可能的問題 提到使用 HttpCLient 時避免 socket 耗盡的方式就是只建立一個 HttpClient instance (透過 static or singleton)，但這樣的方式</description>
    </item>
    
    <item>
      <title>[Benchmark] DB 物件對映至 C# class 的做法</title>
      <link>https://blog.yowko.com/object-relation-mapping/</link>
      <pubDate>Tue, 01 Jan 2019 00:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/object-relation-mapping/</guid>
      <description>[Benchmark] DB 物件對映至 C# class 的做法 跟同事討論到 ORM 的優劣，當然各有擁護的對象，但相同的目標卻很一致：速度快，而在 速度快 這個基本前提下，我個人覺得還有討論</description>
    </item>
    
    <item>
      <title>使用 Dapper 將 json string 轉換為 object</title>
      <link>https://blog.yowko.com/dapper-json-string-to-object/</link>
      <pubDate>Wed, 26 Dec 2018 23:45:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dapper-json-string-to-object/</guid>
      <description>使用 Dapper 將 json string 轉換為 object 同事設計物件儲存在 DB 的 schema 時將非核心功能屬性 (e.g. 畫面顯示用或是狀態表示用) 轉為 json 放在單一欄位中而不是一一建立欄位。我覺得超酷</description>
    </item>
    
    <item>
      <title>探討 HttpClient 可能的問題</title>
      <link>https://blog.yowko.com/httpclient-issue/</link>
      <pubDate>Mon, 10 Dec 2018 23:45:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/httpclient-issue/</guid>
      <description>探討 HttpClient 可能的問題 印象中前幾年曾經看過有文章提到 HttpClient 雖然是 disposable 但透過 using 來使用 HttpClient 卻反而可能出現問題，當時覺得網路文章多數仍是使用 using，於是我抱</description>
    </item>
    
    <item>
      <title>在 .NET Core console 上使用 Dependency Injection - DI</title>
      <link>https://blog.yowko.com/dotnet-core-console-di/</link>
      <pubDate>Wed, 28 Nov 2018 23:45:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dotnet-core-console-di/</guid>
      <description>在 .NET Core console 上使用 Dependency Injection - DI 開始撰寫 ASP.NET Core 後，對於整個開發流程雖然不至於陌生卻也一直覺得掌握度不足，尤其在習慣 ASP.NET Core 註冊及啟動流程後，突然要寫 .NET Core console application</description>
    </item>
    
    <item>
      <title>如何擴充 enum ？</title>
      <link>https://blog.yowko.com/extend-enum/</link>
      <pubDate>Sun, 25 Nov 2018 23:45:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/extend-enum/</guid>
      <description>如何擴充 enum ？ 同事問到可不可以擴充 enum ？！我的第一個反應：為什麼不行，就接著上個設定往下加不就好了？！ 不過立馬回過神來，如果這麼容易搞定，同事應</description>
    </item>
    
    <item>
      <title>應該使用 IsNullOrEmpty 還是 IsNullOrWhiteSpace</title>
      <link>https://blog.yowko.com/string-isnullorempty-isnullorwhitespace/</link>
      <pubDate>Sat, 17 Nov 2018 00:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/string-isnullorempty-isnullorwhitespace/</guid>
      <description>應該使用 IsNullOrEmpty 還是 IsNullOrWhiteSpace 前幾天看到 Bruce 分享微軟內部團隊在 C# 寫作上的團隊規範 - #80 寫程式的參考準測 (coding guideline) - C# 篇，其中一點是 用 string.IsNullOrWhiteSpace() 來檢查字串是否為 null 或是空白，雖</description>
    </item>
    
    <item>
      <title>如何使用 Blogger APIs Client Library for .NET 匯出 Blogger 文章</title>
      <link>https://blog.yowko.com/dotnet-blogger-library/</link>
      <pubDate>Sat, 15 Sep 2018 18:44:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dotnet-blogger-library/</guid>
      <description>如何使用 Blogger APIs Client Library for .NET 匯出 Blogger 文章 雖然剛開始決定為自己的開發經驗做些筆記時就已經知道 Blogger 的一些缺點：無法為自訂 domain 加上 https (嘗試過使用 CloudFare ，直到幾個月前</description>
    </item>
    
    <item>
      <title>取得 Redis 中指定 key 條件的筆數</title>
      <link>https://blog.yowko.com/redis-key-count/</link>
      <pubDate>Fri, 13 Jul 2018 02:40:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/redis-key-count/</guid>
      <description>取得 Redis 中指定 key 條件的筆數 公司有個流量很大的 ASP.NET MVC 網站仍在使用 Session，並利用 Redis 來儲存 Session 資訊，而近來的大型活動讓 Redis 壓力倍增，使用的 memory 是活動</description>
    </item>
    
    <item>
      <title>使用 HttpClient 出現 ObjectDisposedException ？！</title>
      <link>https://blog.yowko.com/httpclient-objectdisposedexception/</link>
      <pubDate>Wed, 11 Jul 2018 22:52:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/httpclient-objectdisposedexception/</guid>
      <description>使用 HttpClient 出現 ObjectDisposedException ？！ 最近某個專案中有個需求需要對 partner 發出 http request，而 user 針對 request 出現 error 時希望加上 retry 機制：重試一次，結果就是這個重試一次的要求讓</description>
    </item>
    
    <item>
      <title>C# 搭配 MongoDB 的連線寫法</title>
      <link>https://blog.yowko.com/mongodb-connectionstring/</link>
      <pubDate>Sun, 10 Jun 2018 20:26:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/mongodb-connectionstring/</guid>
      <description>C# 搭配 MongoDB 的連線寫法 最近有個新專案需要儲存 json 格式的資料，MongoDB 是考慮的選項之一，評估的過程中才發現我沒有 C# 連線 MongoDB 的使用筆記，雖然專案時</description>
    </item>
    
    <item>
      <title>C# 連線 Oracle 出現 ORA-01000: maximum open cursors exceeded</title>
      <link>https://blog.yowko.com/oracle-maximum-open-cursors-exceeded/</link>
      <pubDate>Thu, 07 Jun 2018 23:52:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/oracle-maximum-open-cursors-exceeded/</guid>
      <description>C# 連線 Oracle 出現 ORA-01000: maximum open cursors exceeded 同事負責的系統在 production 環境出現異常問題：原本系統已經運作了一段時間，某天突然出現 ORA-01000: maximum open cursors exceeded 造成相關功能無法運作，經過 IIS reset 後</description>
    </item>
    
    <item>
      <title>不需安裝 Oracle client 使用 C# 搭配 Oracle.DataAccess 連線 Oracle</title>
      <link>https://blog.yowko.com/oracleaccess-without-oracle-client/</link>
      <pubDate>Thu, 31 May 2018 01:45:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/oracleaccess-without-oracle-client/</guid>
      <description>不需安裝 Oracle client 使用 C# 搭配 Oracle.DataAccess 連線 Oracle 之前公司電腦因為註冊檔毀損，讓電腦上的 Oracle client 一直無法正常運作，就算是重灌多次 Oracle client 還是一樣無法正確運作就連移除功能</description>
    </item>
    
    <item>
      <title>讓 log4net 收到指定錯誤 Level 發送 mail</title>
      <link>https://blog.yowko.com/log4net-mail/</link>
      <pubDate>Sun, 27 May 2018 02:02:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/log4net-mail/</guid>
      <description>讓 log4net 收到指定錯誤 Level 發送 mail 平常我自己本身慣用的 log 套件是 nlog，主要原因是因為設定相對較簡潔，加上多年前看過的效能比較 - Benchmarking 5 popular .NET logging libraries 結果是 nlog 效</description>
    </item>
    
    <item>
      <title>如何知道使用的 dll 是否需以 32 位元模式執行</title>
      <link>https://blog.yowko.com/detect-dll-require-32bit/</link>
      <pubDate>Tue, 08 May 2018 09:57:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/detect-dll-require-32bit/</guid>
      <description>如何知道使用的 dll 是否需以 32 位元模式執行 最近因為年度計畫預計做些 Windows server OS 的升級作業，將大部份 OS 升級為 Windows Server 2016，也順便整理 server 上的 applica</description>
    </item>
    
    <item>
      <title>C# 使用 Dapper 連線 DB 時指定逾時時間 (timeout)：0x80004005</title>
      <link>https://blog.yowko.com/dapper-timeout/</link>
      <pubDate>Sun, 22 Apr 2018 23:34:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dapper-timeout/</guid>
      <description>C# 使用 Dapper 連線 DB 時指定逾時時間 (timeout)：0x80004005 最近專案在 production 環境執行時常常遇到 [Win32Exception (0x80004005): The wait operation timed out]，造成程式未完整執行，</description>
    </item>
    
    <item>
      <title>decimal , double , float 輸出 json 的格式問題</title>
      <link>https://blog.yowko.com/decimal-double-float-json-format/</link>
      <pubDate>Sun, 22 Apr 2018 17:42:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/decimal-double-float-json-format/</guid>
      <description>decimal , double , float 輸出 json 的格式問題 之前筆記 decimal 屬性輸出 JSON 時指定的格式問題 提到在專案中因為系統介接需要統一 decimal 小數位數，過程中也才發現 json.net 在輸出沒有小數的 decimal</description>
    </item>
    
    <item>
      <title>decimal 屬性輸出 JSON 時指定的格式問題</title>
      <link>https://blog.yowko.com/decimal-json-digital/</link>
      <pubDate>Sat, 21 Apr 2018 00:14:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/decimal-json-digital/</guid>
      <description>decimal 屬性輸出 JSON 時指定的格式問題 這是之前專案遇到的狀況：輸出 金額 時只需處理到小數點下二位。既然是 金額，為了避免精準度造成的誤差都會選用 deciaml 資料類型</description>
    </item>
    
    <item>
      <title>使用 Topshelf 搭配 Quartz.Net 撰寫 Windows Service 排程執行工作</title>
      <link>https://blog.yowko.com/topshelf-quartznet-windows-service/</link>
      <pubDate>Thu, 12 Apr 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/topshelf-quartznet-windows-service/</guid>
      <description>使用 Topshelf 搭配 Quartz.Net 撰寫 Windows Service 排程執行工作 排程工作在許多系統中都是必備組件，常用來處理非立即性作業(e.g.：每日交易結清，發送電子報&amp;hellip;</description>
    </item>
    
    <item>
      <title>使用 RedLock.net 搭配 redis 達成分散式 Lock</title>
      <link>https://blog.yowko.com/redlocknet-redis-lock/</link>
      <pubDate>Tue, 10 Apr 2018 01:31:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/redlocknet-redis-lock/</guid>
      <description>使用 RedLock.net 搭配 redis 達成分散式 Lock RedLock.net 是前兩個禮拜從安德魯大大的 架構面試題 #1, 線上交易的正確性 一文中看到使用 redis 搭配 RedLock 演算法製造出分散式鎖定 (Distributed locks) 的套件，也是</description>
    </item>
    
    <item>
      <title>匯出 Excel 時使用多國語系 Resource 當做欄位名稱</title>
      <link>https://blog.yowko.com/reflection-resource-culture/</link>
      <pubDate>Fri, 06 Apr 2018 21:53:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/reflection-resource-culture/</guid>
      <description>匯出 Excel 時使用多國語系 Resource 當做欄位名稱 之前筆記 使用 C# 將資料匯出成 Excel (.xlsx) 紀錄到使用 ClosedXML 搭配 generic 與 reflection 匯出 excel，方便使用者自行調整資料報表 剛好有個系統</description>
    </item>
    
    <item>
      <title>使用 C# 將資料匯出成 Excel (.xlsx)</title>
      <link>https://blog.yowko.com/list-to-excel/</link>
      <pubDate>Thu, 05 Apr 2018 22:17:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/list-to-excel/</guid>
      <description>使用 C# 將資料匯出成 Excel (.xlsx) 雖然大部份系統都會有報表相關功能，只是多數情況都無法在系統建置時就設想到所有使用者需求，加上常常功能需求的優先程度會被</description>
    </item>
    
    <item>
      <title>使用 C# 將資料匯出為 CSV</title>
      <link>https://blog.yowko.com/list-to-csv/</link>
      <pubDate>Wed, 04 Apr 2018 15:21:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/list-to-csv/</guid>
      <description>使用 C# 將資料匯出為 CSV 最近有個需求是將部份資料內容倒進其他系統中，主要計劃是打算透過目標系統所開發的 restful api 來 insert 資料，但在實際透過 api 交換資料之前最</description>
    </item>
    
    <item>
      <title>用 C# 將 PowerPoint 檔(.pptx .ppt) 轉換為 PDF</title>
      <link>https://blog.yowko.com/ppt-to-pdf/</link>
      <pubDate>Tue, 13 Mar 2018 01:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/ppt-to-pdf/</guid>
      <description>用 C# 將 PowerPoint 檔(.pptx .ppt) 轉換為 PDF 之前筆記 使用 C# 將 Word 檔(.docx .doc) 轉換為 PDF 紀錄到該如何使用 Word 內建 API 將 Word 轉存為 PDF，後來有網友問到 Excel 及 PowerPoint 轉存</description>
    </item>
    
    <item>
      <title>使用 C# 將 Excel 檔(.xlsx .xls) 轉換為 PDF</title>
      <link>https://blog.yowko.com/excel-to-pdf/</link>
      <pubDate>Mon, 12 Mar 2018 21:00:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/excel-to-pdf/</guid>
      <description>使用 C# 將 Excel 檔(.xlsx .xls) 轉換為 PDF 之前筆記 使用 C# 將 Word 檔(.docx .doc) 轉換為 PDF 紀錄到該如何使用 Word 內建 API 將 Word 轉存為 PDF，後來有網友問到 Excel 及 PowerPoint 轉</description>
    </item>
    
    <item>
      <title>C# DateTime 轉 JavaScript Date (依使用者偏好區域來顯示時間)</title>
      <link>https://blog.yowko.com/csharp-datetime-javascript-date/</link>
      <pubDate>Mon, 05 Feb 2018 00:17:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/csharp-datetime-javascript-date/</guid>
      <description>C# DateTime 轉 JavaScript Date (依使用者偏好區域來顯示時間) 同事負責的頁面會有不同時區的 user 來瀏覽，時間類型的顯示會直接影響 user 的使用者體驗，尤其是各式公告跟有時效</description>
    </item>
    
    <item>
      <title>Enum To List&lt;SelectListItem&gt; 及 Enum To SelectList</title>
      <link>https://blog.yowko.com/enum-to-selectlist/</link>
      <pubDate>Tue, 30 Jan 2018 02:53:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/enum-to-selectlist/</guid>
      <description>Enum To List&amp;lt;SelectListItem&amp;gt; 及 Enum To SelectList 無意間看到專案中的一段程式碼，讓我停頓了一下，一時之間好幾個念頭閃過卻不知道該選擇哪個做法來改善 大意是 View 中有個欄位資料型別是一</description>
    </item>
    
    <item>
      <title>使用 C# 取出 Word (.docx) 中的內嵌 Office 物件</title>
      <link>https://blog.yowko.com/extract-office-object-from-word/</link>
      <pubDate>Thu, 18 Jan 2018 02:46:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/extract-office-object-from-word/</guid>
      <description>使用 C# 取出 Word (.docx) 中的內嵌 Office 物件 之前筆記 取得 Word(.docx) 中的內嵌檔案 紀錄到如何在 word 中嵌入其他物件，也提到如何簡易地取出內嵌物件 今天則是要紀錄如何使用 C# 將 Word</description>
    </item>
    
    <item>
      <title>使用 C# 將 Word 檔(.docx .doc) 轉換為 PDF</title>
      <link>https://blog.yowko.com/c-sharp-word-to-pdf/</link>
      <pubDate>Thu, 04 Jan 2018 03:22:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/c-sharp-word-to-pdf/</guid>
      <description>使用 C# 將 Word 檔(.docx .doc) 轉換為 PDF 同事想要將 user 上傳的 word 檔轉換為 pdf，降低內容被篡改的機會，記憶中 word 轉存成 PDF 功能的程式碼並不多，但印象模糊，</description>
    </item>
    
    <item>
      <title>不用安裝 Oracle Client 使用 C# 透過 tnsnamses.ora 連結 Oracle</title>
      <link>https://blog.yowko.com/csharp-oracle-tns-without-client/</link>
      <pubDate>Tue, 21 Nov 2017 23:11:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/csharp-oracle-tns-without-client/</guid>
      <description>不用安裝 Oracle Client 使用 C# 透過 tnsnamses.ora 連結 Oracle 之前進公司時報到的第一天依公司前輩給的文件開始架設開發環境，大部份環境都很熟悉不用多久時間就完成安裝及設定，唯</description>
    </item>
    
    <item>
      <title>使用 delagate 來進行多個條件驗證</title>
      <link>https://blog.yowko.com/delegate-rule-check/</link>
      <pubDate>Mon, 20 Nov 2017 21:57:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/delegate-rule-check/</guid>
      <description>使用 delagate 來進行多個條件驗證 今天跟同事討論到某個功能在實際執行前需要做一些商業邏輯檢查，確認符合所有規則才能繼續執行後面動作，同事本來使用多層 if</description>
    </item>
    
    <item>
      <title>將 method 或是 class 標記為 internal 來限定專案使用</title>
      <link>https://blog.yowko.com/limit-caller-method-class/</link>
      <pubDate>Sun, 19 Nov 2017 21:11:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/limit-caller-method-class/</guid>
      <description>將 method 或是 class 標記為 internal 來限定專案使用 一般專案常常會有部份操作是的前後台行為相同或是極度類似的，如果這些行為雷同的程式分別置於前後台會讓程式碼顯得</description>
    </item>
    
    <item>
      <title>C# 連線至 RabbitMQ Cluster - 使用 RabbitMQ .Net Client 及 EasyNetQ</title>
      <link>https://blog.yowko.com/dotnet-client-rabbitmq-cluster/</link>
      <pubDate>Sun, 20 Aug 2017 01:26:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dotnet-client-rabbitmq-cluster/</guid>
      <description>C# 連線至 RabbitMQ Cluster - 使用 RabbitMQ .Net Client 及 EasyNetQ 之前文章 如何在 Windwos 上設定 RabbitMQ Cluster 介紹到透過建立 cluster 的方式來讓 RabbtMQ 可以擁有 HA ，而在 queue 及 message 完整性方面則利用 mirrored queue 的機制來處理，詳</description>
    </item>
    
    <item>
      <title>客製 Json.NET 的 JsonConverter - 自動 Initial Value Type 屬性 (使用 JsonSerializer)</title>
      <link>https://blog.yowko.com/jsonnet-jsonserializer-initial-value/</link>
      <pubDate>Wed, 02 Aug 2017 23:42:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/jsonnet-jsonserializer-initial-value/</guid>
      <description>客製 Json.NET 的 JsonConverter - 自動 Initial Value Type 屬性 (使用 JsonSerializer) 之前文章 客製 Json.NET 的 JsonConverter - 自動 Initial Value Type 屬性 介紹到可以在使用自訂 JsonConverter 在將物件轉為 json 前先進行初始化 後來同事在使用自訂 JsonConverter 時</description>
    </item>
    
    <item>
      <title>從 Json String 中取得物件的屬性值</title>
      <link>https://blog.yowko.com/jobject-parse/</link>
      <pubDate>Sun, 30 Jul 2017 23:55:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/jobject-parse/</guid>
      <description>從 Json String 中取得物件的屬性值 之前文章 使用 string 建立 instance 及反序列化 json 為 class 介紹到如何使用 string 產生 instance 及反序列化 json 為 class，後來同事看到寫法建議可以用 json.net 的 JObject.Parse</description>
    </item>
    
    <item>
      <title>關於 GetType 的一些事</title>
      <link>https://blog.yowko.com/gettype/</link>
      <pubDate>Sun, 30 Jul 2017 22:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/gettype/</guid>
      <description>關於 GetType 的一些事 之前在 LINQ to Objects VS LINQ to Entities 中提到 LINQ to Objects 是一系列 IEnumerable 及 IEnumerable&amp;lt;T&amp;gt; 的擴充方法，而 LINQ to Entities 是一系統 IQueryable 及 IQueryable&amp;lt;T&amp;gt; 的擴充方法，透過物件繼承的型別可以很容易區分出</description>
    </item>
    
    <item>
      <title>NuGet 發行 Package 時自動增加版號</title>
      <link>https://blog.yowko.com/nuget-package-auto-version/</link>
      <pubDate>Sat, 22 Jul 2017 23:56:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/nuget-package-auto-version/</guid>
      <description>NuGet 發行 Package 時自動增加版號 之前文章 Jenkins 自動 Publish NuGet Package 已經可以透過 Jenkins 將程式碼成品打包成 NuGet package，但文末也提到 NuGet 是使用 {id+版號} 當做唯一值，一</description>
    </item>
    
    <item>
      <title>LINQ to Objects VS LINQ to Entities</title>
      <link>https://blog.yowko.com/linq-to-objects-vs-linq-to-entities/</link>
      <pubDate>Mon, 17 Jul 2017 23:20:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/linq-to-objects-vs-linq-to-entities/</guid>
      <description>LINQ to Objects VS LINQ to Entities 前幾天去參加 黃忠成 老師的 LINQ - 強者之道時，聽到忠成老師說 LINQ 有兩種行為：LINQ to Objects 與 LINQ to Entities。What！！用那麼久 L</description>
    </item>
    
    <item>
      <title>使用 string 建立 instance 及反序列化 json 為 class</title>
      <link>https://blog.yowko.com/string-create-instance/</link>
      <pubDate>Thu, 13 Jul 2017 23:55:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/string-create-instance/</guid>
      <description>使用 string 建立 instance 及反序列化 json 為 class 最近的專案在架構拆分時，將可能可以共用的部份獨立設計成開放式的服務，將執行行為也當做輸入參數的一部份，直接交由使</description>
    </item>
    
    <item>
      <title>Unit Test 想驗證 private static method 該怎麼做？ - 使用 PrivateType</title>
      <link>https://blog.yowko.com/unit-test-static-method/</link>
      <pubDate>Sun, 18 Jun 2017 21:26:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/unit-test-static-method/</guid>
      <description>Unit Test 想驗證 private static method 該怎麼做？ - 使用 PrivateType TDD 的第一天課程中就提到，以單元測試的角度 private method 不需單獨進行測試，在驗證 public 及 internal method 的過程中自然會涵蓋到 private or protected me</description>
    </item>
    
    <item>
      <title>使用 HttpClient 來存取 GET,POST,PUT,DELETE,PATCH 網路資源</title>
      <link>https://blog.yowko.com/httpclient/</link>
      <pubDate>Wed, 14 Jun 2017 21:30:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/httpclient/</guid>
      <description>使用 HttpClient 來存取 GET,POST,PUT,DELETE,PATCH 網路資源 之前文章 如何使用 WebRequest,HttpWebRequest 來存取 (GET,POST,PUT,DELETE,PATCH) 網路資源 紀錄 WebRequest,HttpWebRequest 的用法，使用 WebClient 來存取 GET,POST,PUT,DELETE,PATCH 網路資源 則紀錄了 WebClient 的用法，接著就是我所知的最後一個可以用</description>
    </item>
    
    <item>
      <title>使用 WebClient 來存取 GET,POST,PUT,DELETE,PATCH 網路資源</title>
      <link>https://blog.yowko.com/webclient/</link>
      <pubDate>Tue, 13 Jun 2017 21:00:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/webclient/</guid>
      <description>使用 WebClient 來存取 GET,POST,PUT,DELETE,PATCH 網路資源 之前在專案中看到許多不同風格的程式，這種現象很常見，尤其在由來已久、團隊成員來來去去的專案中更是常發生，我並沒有太多想</description>
    </item>
    
    <item>
      <title>製作 Selenium IDE 的 xUnit.net 2.0 版 Formatter</title>
      <link>https://blog.yowko.com/selenium-ide-xunit-formatter/</link>
      <pubDate>Wed, 07 Jun 2017 21:00:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/selenium-ide-xunit-formatter/</guid>
      <description>製作 Selenium IDE 的 xUnit.net 2.0 版 Formatter TDD 課程中，91 大介紹了 Selenium IDE 的用法，我的心得筆記請參考 使用 Selenium IDE 與 C# 做 Web UI 測試，因為 Selenium IDE 預設只支援 Nunit，所以 91 大動手做了</description>
    </item>
    
    <item>
      <title>使用 Selenium IDE 與 C# 做 Web UI 測試</title>
      <link>https://blog.yowko.com/selenium-ide-csharp-web-ui-test/</link>
      <pubDate>Mon, 05 Jun 2017 21:00:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/selenium-ide-csharp-web-ui-test/</guid>
      <description>使用 Selenium IDE 與 C# 做 Web UI 測試 網頁 UI 及前端技術變化很快，也愈來愈專業，分工愈來愈細，除了前後端獨立的 unit test 之外，前後端介接完成後的整合測試也是重點之一</description>
    </item>
    
    <item>
      <title>使用 .Net client 連線至 Apache Kafka 收發訊息</title>
      <link>https://blog.yowko.com/kafka-client-produce-consume/</link>
      <pubDate>Thu, 25 May 2017 01:00:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/kafka-client-produce-consume/</guid>
      <description>使用 .Net client 連線至 Apache Kafka 收發訊息 繼之前紀錄 如何在 Windows OS 安裝 Apache Kafka 到現在默默地過了兩個月XD，直到最近才有時間可以再開始進行 MQ 相關功能比較，經過初步比較</description>
    </item>
    
    <item>
      <title>使用 .Net client 連線至 RabbitMQ 收發訊息</title>
      <link>https://blog.yowko.com/rabbitmq-client-send-consume/</link>
      <pubDate>Mon, 22 May 2017 23:35:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/rabbitmq-client-send-consume/</guid>
      <description>使用 .Net client 連線至 RabbitMQ 收發訊息 繼之前 使用 RabbitMQ.Client 連線至 RabbitMQ 出現 BrokerUnreachableException 問題解決後，終於又可以繼續測試 RabbitMQ 了，要比較的不僅僅是 mq 的能力，也要比較使用上的便利性及周邊</description>
    </item>
    
    <item>
      <title>建構式中呼叫基底類別 (base class) 建構式傳入 Action 出現錯誤</title>
      <link>https://blog.yowko.com/pass-action-base-constructor/</link>
      <pubDate>Mon, 22 May 2017 22:29:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/pass-action-base-constructor/</guid>
      <description>建構式中呼叫基底類別 (base class) 建構式傳入 Action 出現錯誤 這是最近在重構程式時遇到的狀況，class B 繼承自 class A (class B:A)， class B 的建構式會在呼叫 class A 建構式</description>
    </item>
    
    <item>
      <title>如何客製化 Opserver - 使用不同帳號密碼來監控多台 Windows Server</title>
      <link>https://blog.yowko.com/opserver-windows-server_multiple_auth/</link>
      <pubDate>Thu, 30 Mar 2017 01:00:00 +0800</pubDate>
      
      <guid>https://blog.yowko.com/opserver-windows-server_multiple_auth/</guid>
      <description>如何客製化 Opserver - 使用不同帳號密碼來監控多台 Windows Server 之前文章 如何使用 Opserver 來監控 Windows Server 介紹該怎麼設定 Opserver 來監控 Windows Server，但我們也發現只能使用同一組帳號</description>
    </item>
    
    <item>
      <title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 5 使用動態條件與動態欄位</title>
      <link>https://blog.yowko.com/net-framework-memorycache-5/</link>
      <pubDate>Sat, 11 Mar 2017 01:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/net-framework-memorycache-5/</guid>
      <description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 5 使用動態條件與動態欄位 一直以為 使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 4 使用泛型來簡化 是 .NET MemoryCache 系列的最後一篇，壓根忘</description>
    </item>
    
    <item>
      <title>如何使用 WebRequest,HttpWebRequest 來存取(GET,POST,PUT,DELETE,PATCH)網路資源</title>
      <link>https://blog.yowko.com/webrequest-and-httpwebrequest/</link>
      <pubDate>Thu, 09 Mar 2017 02:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/webrequest-and-httpwebrequest/</guid>
      <description>如何使用 WebRequest,HttpWebRequest 來存取(GET,POST,PUT,DELETE,PATCH)網路資源 現在雲端服務多元，很多系統設計上也都走向 api 化的架構，加上前端工</description>
    </item>
    
    <item>
      <title>初探 Expression Tree</title>
      <link>https://blog.yowko.com/expression-tree/</link>
      <pubDate>Thu, 02 Mar 2017 01:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/expression-tree/</guid>
      <description>初探 Expression Tree 最近在重構取資料的邏輯，希望可以寫得更有彈性，所以開始使用 expression tree，雖然之前就有聽說 expression tree 很厲害，但總覺得好像不是一定要用，花時間就</description>
    </item>
    
    <item>
      <title>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 5 (使用 Sorted Sets 型別)</title>
      <link>https://blog.yowko.com/dotnet-redis-sorted-sets/</link>
      <pubDate>Mon, 27 Feb 2017 01:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dotnet-redis-sorted-sets/</guid>
      <description>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 5 (使用 Sorted Sets 型別) 今天來看看 Sorted Sets 該怎麼使用，建議可與 如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 4 (使用 Sets 型別) 參照 一樣</description>
    </item>
    
    <item>
      <title>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 4 (使用 Sets 型別)</title>
      <link>https://blog.yowko.com/dotnet-redis-sets/</link>
      <pubDate>Sun, 26 Feb 2017 01:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dotnet-redis-sets/</guid>
      <description>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 4 (使用 Sets 型別) 今天來看看 Sets 該怎麼使用，建議可與 如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 3 (使用 Lists 型別) 參照 先說重點</description>
    </item>
    
    <item>
      <title>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 3 (使用 Lists 型別)</title>
      <link>https://blog.yowko.com/dotnet-redis-lists/</link>
      <pubDate>Thu, 23 Feb 2017 01:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dotnet-redis-lists/</guid>
      <description>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 3 (使用 Lists 型別) 先前文章 如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 2 (使用 Hashes 型別) 使用了 Hashed 型別來 cache 資料，但總覺得不太清</description>
    </item>
    
    <item>
      <title>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 2 (使用 Hashes 型別)</title>
      <link>https://blog.yowko.com/dotnet-redis-hashes/</link>
      <pubDate>Tue, 21 Feb 2017 01:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dotnet-redis-hashes/</guid>
      <description>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 2 (使用 Hashes 型別) 在 如何在 .NET 程式中使用 Redis 做為 Cache Server 一文中把原本使用 .NET 的 MemoryCache 改為使用 Redis，其中用的是 Redis 最基本的</description>
    </item>
    
    <item>
      <title>C# 如何用特定的 attribute 取得 property 資訊</title>
      <link>https://blog.yowko.com/csharp-get-property-info-from-attribute/</link>
      <pubDate>Mon, 20 Feb 2017 01:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/csharp-get-property-info-from-attribute/</guid>
      <description>C# 如何用特定的 attribute 取得 property 資訊 今天正在試著如何把自訂 method 寫得更彈性些，不要有太多 magic string 判斷，所以打算利用 attribute 做為媒介，印象中以前也做過這件事，所以筆記</description>
    </item>
    
    <item>
      <title>使用 ConfigurationSection 自訂 ASP.NET config (web.config) 區段</title>
      <link>https://blog.yowko.com/webconfig-customize-configurationsection/</link>
      <pubDate>Sun, 19 Feb 2017 01:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/webconfig-customize-configurationsection/</guid>
      <description>使用 ConfigurationSection 自訂 ASP.NET config (web.config) 區段 不得不服老呀，一樣的功能二、三年前寫的時候還相當流暢，想不到這二、三年的光景過去，就搞得像是沒寫過一樣XD 乾脆當做沒寫過</description>
    </item>
    
    <item>
      <title>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 1 (使用 Strings 型別)</title>
      <link>https://blog.yowko.com/dotnet-redis-strings/</link>
      <pubDate>Sat, 18 Feb 2017 01:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/dotnet-redis-strings/</guid>
      <description>如何在 .NET 程式中使用 Redis 做為 Cache Server - Part 1 (使用 Strings 型別) 在前面文章 使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 1 極簡做法 介紹了最簡單達到 cache 資料的方法，也使用 .NET Framework</description>
    </item>
    
    <item>
      <title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 4 使用泛型來簡化</title>
      <link>https://blog.yowko.com/net-framework-memorycache-4/</link>
      <pubDate>Fri, 17 Feb 2017 01:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/net-framework-memorycache-4/</guid>
      <description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 4 使用泛型來簡化 經過第一篇文章 使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 1 極簡做法 介紹了最簡單達到 cache 資料的方法，也在 使</description>
    </item>
    
    <item>
      <title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 2 使用 lock 避免 ddos db</title>
      <link>https://blog.yowko.com/net-framework-memorycache-2/</link>
      <pubDate>Thu, 16 Feb 2017 01:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/net-framework-memorycache-2/</guid>
      <description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 2 使用 lock 避免 ddos db 經過前一篇文章 使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 1 極簡做法 介紹了最簡單達到 cache 資料的方法，文末也</description>
    </item>
    
    <item>
      <title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 3 隱藏的效能瓶頸</title>
      <link>https://blog.yowko.com/net-framework-memorycache-3/</link>
      <pubDate>Thu, 16 Feb 2017 01:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/net-framework-memorycache-3/</guid>
      <description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 3 隱藏的效能瓶頸 之前筆記 使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 2 使用 lock 避免 ddos db 解決程式可能 ddos db 的重大缺失，最近重新</description>
    </item>
    
    <item>
      <title>C# 的跳躍語法( break continue goto 與 return)</title>
      <link>https://blog.yowko.com/csharp-break-continue-goto-return/</link>
      <pubDate>Tue, 14 Feb 2017 01:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/csharp-break-continue-goto-return/</guid>
      <description>C# 的跳躍語法( break continue goto 與 return) 最近看了一段程式，感覺跑的順序跟預期的不同，查了 msdn 文件，順手做了個紀錄。 文件請務必看英文版，中文版的錯很大，完全不是</description>
    </item>
    
    <item>
      <title>C# reflection getProperty and getValue</title>
      <link>https://blog.yowko.com/csharp-reflection-getproperty-getvalue/</link>
      <pubDate>Tue, 14 Feb 2017 00:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/csharp-reflection-getproperty-getvalue/</guid>
      <description>C# reflection getProperty and getValue 你曾經想要把 object 中所有的 property name 跟內容都取出來確認嗎？如果每次程式跑 debug 都花個五分鐘，或是你跟我一樣急性子的話，你一定不會想在 debug 下一個一個</description>
    </item>
    
    <item>
      <title>讓 EntityFramework 綁定自定 Enum 型別</title>
      <link>https://blog.yowko.com/entityframework-enum-binding-class/</link>
      <pubDate>Sun, 05 Feb 2017 00:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/entityframework-enum-binding-class/</guid>
      <description>讓 EntityFramework 綁定自定 Enum 型別 讓 EntityFramework 可以綁定自定 Enum 有兩個好處： 不用再自行轉換 int 跟 Enum 透過 scaffolding 可以直接綁定 dropdownlist，這讓我們在開發上節省不少工作</description>
    </item>
    
    <item>
      <title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 2 使用 lock 避免 ddos db</title>
      <link>https://blog.yowko.com/net-framework-memorycache-2/</link>
      <pubDate>Tue, 31 Jan 2017 00:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/net-framework-memorycache-2/</guid>
      <description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 2 使用 lock 避免 ddos db 經過前一篇文章 使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 1 極簡做法 介紹了最簡單達到 cache 資料的方法，文末也</description>
    </item>
    
    <item>
      <title>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 1 極簡做法</title>
      <link>https://blog.yowko.com/net-framework-memorycache-1/</link>
      <pubDate>Mon, 30 Jan 2017 00:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/net-framework-memorycache-1/</guid>
      <description>使用 .NET Framework 內建的 MemoryCache 來 Cache 常用資料 - Part 1 極簡做法 程式多多少少有些資料或設定是經常需要使用的，如果這些資料異動頻率低的特性就可以考慮將其加入 cach</description>
    </item>
    
    <item>
      <title>Enum in C#</title>
      <link>https://blog.yowko.com/enum-in-c-sharp/</link>
      <pubDate>Sun, 29 Jan 2017 00:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/enum-in-c-sharp/</guid>
      <description>Enum in C 最近跟同事討論 enum 相關應用時剛好同事問到 enum 可以用什麼型別，無奈學藝不精沒有答出完整正確答案XD，剛好趁這個機會順便整理一下。 基本特性 名稱</description>
    </item>
    
    <item>
      <title>字串處理速度比較：&#43; 運算符、string.Format、string.Concat、字串插值(String Interpolation)</title>
      <link>https://blog.yowko.com/stringformat-stringconcat-stringintepolation/</link>
      <pubDate>Thu, 05 Jan 2017 00:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/stringformat-stringconcat-stringintepolation/</guid>
      <description>字串處理速度比較：+ 運算符、string.Format、string.Concat、字串插值(String Interpolation) c# 6.0 多了一個方便處理字串的語法糖</description>
    </item>
    
    <item>
      <title>decimal 在 C# 中的隱含轉換建構式</title>
      <link>https://blog.yowko.com/decimal-constructor-with-char/</link>
      <pubDate>Sat, 24 Dec 2016 00:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/decimal-constructor-with-char/</guid>
      <description>decimal 在 C# 中的隱含轉換建構式 最近有個工作項目是將原本 jsp 的金流相關功能，搬遷到 C# 上 重要性不言可喻，加下小弟寫 java 的時間並不長，還是寫 android，</description>
    </item>
    
    <item>
      <title>C# 解析 XML 字串(C# Parse XML string)</title>
      <link>https://blog.yowko.com/c-sharp-parse-xml-string/</link>
      <pubDate>Tue, 20 Dec 2016 00:42:34 +0800</pubDate>
      
      <guid>https://blog.yowko.com/c-sharp-parse-xml-string/</guid>
      <description>C# 解析 XML 字串(C# Parse XML string) 最近在介紹第三方金流服務時，廠商使用 XML 回傳，有段時間沒處理 XML，剛收到時還愣了一下，突然間想不起來該怎麼做，看來有</description>
    </item>
    
  </channel>
</rss>