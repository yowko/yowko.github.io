<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>aspdotnet on Yowko&#39;s Notes</title><link>https://blog.yowko.com/tags/aspdotnet/</link><description>Recent content in aspdotnet on Yowko&#39;s Notes</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 24 Jan 2025 00:30:00 +0800</lastBuildDate><atom:link href="https://blog.yowko.com/tags/aspdotnet/index.xml" rel="self" type="application/rss+xml"/><item><title>ASP.NET minimal API 解析 text/json</title><link>https://blog.yowko.com/aspnetcore-minimal-api-text-json/</link><pubDate>Fri, 24 Jan 2025 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspnetcore-minimal-api-text-json/</guid><description>ASP.NET minimal API 解析 text/json 這個需求一樣來自之前筆記 ASP.NET minimal API 將多個 route pattern 套用相同處理邏輯 中所提到的舊系統，不過這次不是打錯字XD 舊系統使用 web api controller 來接收 post 傳遞的 m</description></item><item><title>ASP.NET minimal API 將多個 route pattern 套用相同處理邏輯</title><link>https://blog.yowko.com/aspnetcore-minimal-api-multiple-route-patterns/</link><pubDate>Thu, 23 Jan 2025 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspnetcore-minimal-api-multiple-route-patterns/</guid><description>ASP.NET minimal API 將多個 route pattern 套用相同處理邏輯 這個需求來自一個內部共用服務的 API 上，之前同事在建立處理邏輯時，不慎將 controller name 打錯，預計使用 Text 但打成 Test，導致</description></item><item><title>在 ASP.NET 中為相同 Interface 註冊多個 Service</title><link>https://blog.yowko.com/aspdotnet-one-interface-multiple-services/</link><pubDate>Thu, 15 Aug 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-one-interface-multiple-services/</guid><description>在 ASP.NET 中為相同 Interface 註冊多個 Service 在某些情境下(e.g. 測試目的、不同環境：cloud or on premise 或是依據不同客戶)會需要為相同的 Interface 註冊多個 Service，</description></item><item><title>ASP.NET ProblemDetail 錯誤處理</title><link>https://blog.yowko.com/aspnetcore-problemdetail-error-handling/</link><pubDate>Thu, 01 Aug 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspnetcore-problemdetail-error-handling/</guid><description>ASP.NET ProblemDetail 錯誤處理 之前筆記 ASP.NET 8 新增的錯誤處理 主要是想嘗試 ASP.NET 8 新增的錯誤處理功能，不過剛好官網文件 Microsoft Learn:Handle errors in ASP.NET Core 有提到其他錯誤處理做法，所以一併簡單紀</description></item><item><title>ASP.NET 8 新增的錯誤處理</title><link>https://blog.yowko.com/aspnetcore-8-error-handling/</link><pubDate>Wed, 31 Jul 2024 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspnetcore-8-error-handling/</guid><description>ASP.NET 8 新增的錯誤處理 ASP.NET Core 問市時提供了 Middleware 的做法：可以透過建立不同元件用做 pipeline 處理請求，讓 log、authentication、authorizat</description></item><item><title>將 ASP.NET gRPC 的 Trace 整合至 Grafana Tempo</title><link>https://blog.yowko.com/aspdotnet-grpc-tempo/</link><pubDate>Fri, 01 Dec 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-grpc-tempo/</guid><description>將 ASP.NET gRPC 的 Trace 整合至 Grafana Tempo 之前筆記 將 ASP.NET 的 Trace 整合至 Grafana Tempo 紀錄到如何將 ASP.NET 的 Trace 整合至 Grafana Tempo，今天來看看如何將 ASP.NET gRPC 的 Trace 整合至 Grafana Tempo 過去 trace 相關筆記如下： OpenTracing</description></item><item><title>將 ASP.NET 的 Trace 整合至 Grafana Tempo</title><link>https://blog.yowko.com/aspdotnet-tempo/</link><pubDate>Wed, 29 Nov 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-tempo/</guid><description>將 ASP.NET 的 Trace 整合至 Grafana Tempo 之前筆記 使用 Docker Compose 啟動 Grafana Tempo 紀錄到如何透過 docker compose 快速建立 Grafana Tempo 測試環境，今天來看看如何將 ASP.NET 的 Trace 整合至 Grafana Tempo 過去 trace 相關筆記如下： OpenTracing .NET Core</description></item><item><title>將 ASP.NET Core 的 log 透過 Grafana Loki 來顯示</title><link>https://blog.yowko.com/aspdotnet-loki/</link><pubDate>Mon, 04 Sep 2023 00:30:00 +0800</pubDate><guid>https://blog.yowko.com/aspdotnet-loki/</guid><description>將 ASP.NET Core 的 log 透過 Grafana Loki 來顯示 之前筆記 使用 Docker Compose 啟動 Grafana Loki 提到過去幾年時間都是透過 Elastic Stack 來處理 log 集中化，因為團隊正在評估下一代產品所使用的 technical stack 於是將 Grafana Loki</description></item></channel></rss>